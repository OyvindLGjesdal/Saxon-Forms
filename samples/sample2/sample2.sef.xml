<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://ns.saxonica.com/xslt/export" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vv="http://saxon.sf.net/generated-variable" xmlns:java-type="http://saxon.sf.net/java-type" dmk="TGljZW5zb3I9U2F4b25pY2EKTGljZW5zZWU9TydOZWlsIERlbHByYXR0CkNvbXBhbnk9U2F4b25pY2EKRW1haWw9b25laWxAc2F4b25pY2EuY29tCkVkaXRpb249REUKU0FUPXllcwpTQVE9eWVzClNBVj15ZXMKSXNzdWVkPTIwMTctMTEtMjIKU2VyaWVzPUQKU2VyaWFsPUQwMDY0MDgKVXNlcj1QMDAwMQpFdmFsdWF0aW9uPW5vCkV4cGlyYXRpb249bmV2ZXIKVXBncmFkZURheXM9MzY2Ck1haW50ZW5hbmNlRGF5cz0zNjYKU2lnbmF0dXJlPTMwMkMwMjE0NjU1REM4QzZFRDM3NDBDOTg4MkFERkYzRUFBQzVGNDlDRTcwOTFGRDAyMTQzRjQ0N0Y4OEY1MTIxQTQxMUM3MTQwRThEMzMyQzQ3Q0E4RUZDQjE1Cg==" version="30" packageVersion="1" saxonVersion="9.8.0.12" target="JS" targetVersion="1" relocatable="true">
 <co id="0" binds="">
  <mode name="Q{}xforms-action" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.0" seq="1" rank="0" minImp="0" slots="1" flags="s" line="2484" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}delete)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2485">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <elem line="2487" name="delete" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <sequence>
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <elem line="2490" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2491" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2494" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}ref" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2499">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <elem line="2502" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2503" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2506" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}nodeset" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2512">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
        </fn>
        <elem line="2514" name="position" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}position" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2517">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
        </fn>
        <elem line="2519" name="at" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}at" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2522">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
        </fn>
        <elem line="2524" name="if" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}if" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2527">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
        </fn>
        <elem line="2529" name="while" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}while" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
      </sequence>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="0" rank="0" minImp="0" slots="1" flags="s" line="2433" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}insert)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2434">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <elem line="2436" name="insert" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <sequence>
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <elem line="2439" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2440" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2443" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}ref" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2448">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <elem line="2451" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2452" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2455" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}nodeset" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2461">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
        </fn>
        <elem line="2463" name="position" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}position" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2466">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
        </fn>
        <elem line="2468" name="at" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}at" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2471">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
        </fn>
        <elem line="2473" name="if" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}if" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2476">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
        </fn>
        <elem line="2478" name="while" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}while" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
      </sequence>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="3" rank="0" minImp="0" slots="1" flags="s" line="2600" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}reset)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2601">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <elem line="2603" name="reset" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <sequence>
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <elem line="2606" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2607" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2610" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}ref" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2615">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <elem line="2618" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2619" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2622" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}nodeset" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2628">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
        </fn>
        <elem line="2630" name="position" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}position" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2633">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
        </fn>
        <elem line="2635" name="at" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}at" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2638">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
        </fn>
        <elem line="2640" name="if" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}if" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2643">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
        </fn>
        <elem line="2645" name="while" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}while" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2648">
        <fn name="exists">
         <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
        </fn>
        <elem line="2650" name="event" nsuri="" flags="l">
         <valueOf flags="l">
          <fn name="string-join">
           <convert from="xs:untypedAtomic" to="xs:string">
            <data>
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </data>
           </convert>
           <str val=" "/>
          </fn>
         </valueOf>
        </elem>
       </choose>
      </sequence>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="2" rank="0" minImp="0" slots="1" flags="s" line="2535" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}setvalue)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2536">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <elem line="2540" name="setvalue" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <sequence>
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
        </fn>
        <att line="2542" name="value" flags="l">
         <convert from="xs:untypedAtomic" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <fn name="string">
            <convert from="xs:untypedAtomic" to="xs:string">
             <attVal name="Q{}value" chk="0"/>
            </convert>
           </fn>
          </cast>
         </convert>
        </att>
       </choose>
       <choose line="2545">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <elem line="2548" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2549" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2552" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}ref" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2557">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <elem line="2560" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2561" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2564" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}nodeset" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2570">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
        </fn>
        <elem line="2572" name="position" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}position" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2575">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
        </fn>
        <elem line="2577" name="at" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}at" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2580">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
        </fn>
        <elem line="2582" name="if" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}if" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2585">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
        </fn>
        <elem line="2587" name="while" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}while" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2591">
        <fn name="exists">
         <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
        </fn>
        <elem line="2593" name="value" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <data>
            <dot type="element(Q{http://www.w3.org/2002/xforms}setvalue)"/>
           </data>
          </convert>
         </valueOf>
        </elem>
       </choose>
      </sequence>
     </elem>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="1" binds="">
  <mode name="Q{}xforms-action-map" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.25" seq="0" rank="0" minImp="0" slots="2" flags="s" line="2662" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="Q{http://www.w3.org/2002/xforms}*" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.uri==='http://www.w3.org/2002/xforms'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2663">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <ifCall line="2664" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
      <fn name="local-name">
       <dot type="Q{http://www.w3.org/2002/xforms}*"/>
      </fn>
      <let line="2666" var="array" as="map(xs:string, xs:string)*" slot="1" eval="8">
       <forEach line="2667">
        <currentGroup/>
        <ifCall line="2671" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
         <sequence>
          <choose>
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
            </slash>
           </fn>
           <ifCall line="2672" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@value"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2675">
           <and op="and">
            <fn name="empty">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
             </slash>
            </fn>
            <fn name="exists">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
               <dot/>
              </treat>
              <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
             </slash>
            </fn>
           </and>
           <ifCall line="2676" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="value"/>
            <fn name="string">
             <dot/>
            </fn>
           </ifCall>
          </choose>
          <choose line="2679">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
            </slash>
           </fn>
           <ifCall line="2680" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="ref"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2683">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
            </slash>
           </fn>
           <ifCall line="2684" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="ref"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2687">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </slash>
           </fn>
           <ifCall line="2688" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="position"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2692">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </slash>
           </fn>
           <ifCall line="2693" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="at"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2696">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </slash>
           </fn>
           <ifCall line="2697" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="if"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2700">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </slash>
           </fn>
           <ifCall line="2701" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="while"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2705">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </slash>
           </fn>
           <ifCall line="2706" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="event"/>
            <fn name="string">
             <check card="?" diag="0|0||fn:string">
              <slash simple="1">
               <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
                <dot/>
               </treat>
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </slash>
             </check>
            </fn>
           </ifCall>
          </choose>
         </sequence>
         <map size="2">
          <str val="duplicates"/>
          <str val="reject"/>
          <str val="duplicates-error-code"/>
          <str val="XTDE3365"/>
         </map>
        </ifCall>
       </forEach>
       <ifCall line="2713" name="Q{http://www.w3.org/2005/xpath-functions/array}_from-sequence" type="array(*)">
        <varRef name="array" slot="1"/>
       </ifCall>
      </let>
     </ifCall>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="2" binds="">
  <globalVariable name="Q{}bookingForm" type="xs:string" line="20" module="sample2.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.string.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <fn ns="xsl=~ xforms=http://www.w3.org/2002/xforms array=http://www.w3.org/2005/xpath-functions/array f=http://www.saxonica.com/local/functions ixsl=~ js=~ xs=~ saxon=~ map=http://www.w3.org/2005/xpath-functions/map" line="20" name="resolve-uri">
    <str val="sampleBookingForm.xml"/>
    <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:resolve-uri">
     <check card="1" diag="0|1||fn:resolve-uri">
      <cvUntyped to="xs:string">
       <data>
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}location" type="item()?"/>
       </data>
      </cvUntyped>
     </check>
    </treat>
   </fn>
  </globalVariable>
 </co>
 <co id="3" binds="4">
  <mode name="Q{}form-check-initial" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="1" flags="s" line="2864" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2865">
     <param name="Q{}pendingUpdates" slot="0" as="map(xs:string, xs:string)?">
      <empty role="select"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
       <check card="?" diag="8|0|XTTE0590|pendingUpdates">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <copy line="2871" flags="cin">
      <applyT role="content" mode="Q{}form-check" bSlot="0">
       <dot role="select" type="element()"/>
       <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
        <varRef line="2872" name="pendingUpdates" slot="0"/>
       </withParam>
      </applyT>
     </copy>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="4" binds="4 5 4 4 5">
  <mode name="Q{}form-check" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="10" flags="s" line="2877" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2878">
     <param name="Q{}curPath" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <param line="2879" name="Q{}position" slot="1">
      <int role="select" val="0"/>
      <supplied role="conversion" slot="1"/>
     </param>
     <param line="2880" name="Q{}pendingUpdates" slot="2" as="map(xs:string, xs:string)?">
      <empty role="select"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
       <check card="?" diag="8|0|XTTE0590|pendingUpdates">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <let line="2887" var="updatedPath" as="xs:string" slot="3" eval="7">
      <choose>
       <gc op="&gt;" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="position" slot="1"/>
        </data>
        <int val="0"/>
       </gc>
       <fn name="concat">
        <atomSing card="?" diag="0|0||fn:concat">
         <varRef name="curPath" slot="0"/>
        </atomSing>
        <fn name="local-name">
         <dot type="element()"/>
        </fn>
        <str val="["/>
        <atomSing card="?" diag="0|3||fn:concat">
         <varRef name="position" slot="1"/>
        </atomSing>
        <str val="]"/>
       </fn>
       <true/>
       <fn name="concat">
        <atomSing card="?" diag="0|0||fn:concat">
         <varRef name="curPath" slot="0"/>
        </atomSing>
        <fn name="local-name">
         <dot type="element()"/>
        </fn>
       </fn>
      </choose>
      <sequence line="2895">
       <applyT mode="Q{}form-check" bSlot="0">
        <axis role="select" name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
        <withParam name="Q{}curPath" as="xs:string">
         <fn line="2896" name="concat">
          <varRef name="updatedPath" slot="3"/>
          <str val="/"/>
         </fn>
        </withParam>
        <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
         <varRef line="2897" name="pendingUpdates" slot="2"/>
        </withParam>
       </applyT>
       <let line="2903" var="associated-form-control" as="element()*" slot="4" eval="8">
        <filter flags="b">
         <slash simple="1">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
          <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
         </slash>
         <gc op="=" card="1:1" comp="CCC">
          <attVal name="Q{}data-ref" chk="0"/>
          <varRef name="updatedPath" slot="3"/>
         </gc>
        </filter>
        <sequence line="2906">
         <choose>
          <fn name="exists">
           <varRef name="associated-form-control" slot="4"/>
          </fn>
          <valueOf line="2910">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <applyT mode="Q{}get-field" bSlot="1">
                <varRef role="select" name="associated-form-control" slot="4"/>
               </applyT>
              </mergeAdj>
             </data>
            </convert>
            <str val=""/>
           </fn>
          </valueOf>
          <and line="2913" op="and">
           <fn name="exists">
            <varRef name="pendingUpdates" slot="2"/>
           </fn>
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
            <check card="1" diag="0|0||map:contains">
             <varRef name="pendingUpdates" slot="2"/>
            </check>
            <varRef name="updatedPath" slot="3"/>
           </ifCall>
          </and>
          <valueOf line="2921">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
            <check card="1" diag="0|0||map:get">
             <varRef name="pendingUpdates" slot="2"/>
            </check>
            <varRef name="updatedPath" slot="3"/>
           </ifCall>
          </valueOf>
          <true/>
          <valueOf line="2931">
           <fn name="normalize-space">
            <fn name="string-join">
             <data>
              <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
             </data>
             <str val=""/>
            </fn>
           </fn>
          </valueOf>
         </choose>
         <forEachGroup line="2938" algorithm="by">
          <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
          <fn role="key" name="local-name">
           <dot type="element()"/>
          </fn>
          <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
          <let role="content" line="2940" var="updatedChildPath" as="xs:string" slot="5" eval="8">
           <fn name="concat">
            <varRef name="updatedPath" slot="3"/>
            <str val="/"/>
            <check card="?" diag="0|2||fn:concat">
             <currentGroupingKey/>
            </check>
           </fn>
           <let line="2945" var="vv:v0" as="xs:string" slot="6" eval="13">
            <fn name="concat">
             <varRef name="updatedChildPath" slot="5"/>
             <str val="["/>
            </fn>
            <let var="dataRefWithFilter" as="element()*" slot="7" eval="8">
             <filter flags="b">
              <slash simple="1">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
               <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
              </slash>
              <fn name="starts-with">
               <cvUntyped to="xs:string">
                <attVal name="Q{}data-ref" chk="0"/>
               </cvUntyped>
               <varRef name="vv:v0" slot="6"/>
              </fn>
             </filter>
             <choose line="2948">
              <or op="or">
               <fn name="exists">
                <tail start="2">
                 <currentGroup/>
                </tail>
               </fn>
               <fn name="exists">
                <varRef name="dataRefWithFilter" slot="7"/>
               </fn>
              </or>
              <let line="2953" var="vv:v1" as="xs:string" slot="8" eval="13">
               <fn name="concat">
                <varRef name="updatedPath" slot="3"/>
                <str val="/"/>
               </fn>
               <forEach line="2950">
                <currentGroup/>
                <copy line="2952" flags="cin">
                 <applyT role="content" mode="Q{}form-check" bSlot="2">
                  <dot role="select"/>
                  <withParam name="Q{}curPath" as="xs:string">
                   <varRef line="2953" name="vv:v1" slot="8"/>
                  </withParam>
                  <withParam name="Q{}position" as="xs:integer">
                   <fn line="2954" name="position"/>
                  </withParam>
                  <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
                   <varRef line="2955" name="pendingUpdates" slot="2"/>
                  </withParam>
                 </applyT>
                </copy>
               </forEach>
              </let>
              <true/>
              <let line="2967" var="vv:v2" as="xs:string" slot="9" eval="13">
               <fn name="concat">
                <varRef name="updatedPath" slot="3"/>
                <str val="/"/>
               </fn>
               <forEach line="2964">
                <currentGroup/>
                <copy line="2966" flags="cin">
                 <applyT role="content" mode="Q{}form-check" bSlot="3">
                  <dot role="select"/>
                  <withParam name="Q{}curPath" as="xs:string">
                   <varRef line="2967" name="vv:v2" slot="9"/>
                  </withParam>
                  <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
                   <varRef line="2968" name="pendingUpdates" slot="2"/>
                  </withParam>
                 </applyT>
                </copy>
               </forEach>
              </let>
             </choose>
            </let>
           </let>
          </let>
         </forEachGroup>
        </sequence>
       </let>
      </sequence>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="1" rank="0" minImp="0" slots="4" flags="s" line="2981" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2982">
     <param name="Q{}curPath" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <param line="2983" name="Q{}pendingUpdates" slot="1" as="map(xs:string, xs:string)?">
      <empty role="select"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
       <check card="?" diag="8|0|XTTE0590|pendingUpdates">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <let line="2984" var="updatedPath" as="xs:string" slot="2" eval="8">
      <fn name="concat">
       <atomSing card="?" diag="0|0||fn:concat">
        <varRef name="curPath" slot="0"/>
       </atomSing>
       <str val="@"/>
       <fn name="local-name">
        <dot type="attribute()"/>
       </fn>
      </fn>
      <let line="2993" var="associated-form-control" as="element()*" slot="3" eval="8">
       <filter flags="b">
        <slash simple="1">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
         <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
        <gc op="=" card="1:1" comp="CCC">
         <attVal name="Q{}data-ref" chk="0"/>
         <varRef name="updatedPath" slot="2"/>
        </gc>
       </filter>
       <choose line="2996">
        <fn name="exists">
         <varRef name="associated-form-control" slot="3"/>
        </fn>
        <compAtt line="2999">
         <fn role="name" name="local-name">
          <dot type="attribute()"/>
         </fn>
         <fn role="select" line="3001" name="string-join">
          <convert from="xs:anyAtomicType" to="xs:string">
           <data>
            <mergeAdj>
             <applyT mode="Q{}get-field" bSlot="4">
              <varRef role="select" name="associated-form-control" slot="3"/>
             </applyT>
            </mergeAdj>
           </data>
          </convert>
          <str val=""/>
         </fn>
        </compAtt>
        <and line="3004" op="and">
         <fn name="exists">
          <varRef name="pendingUpdates" slot="1"/>
         </fn>
         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
          <check card="1" diag="0|0||map:contains">
           <varRef name="pendingUpdates" slot="1"/>
          </check>
          <varRef name="updatedPath" slot="2"/>
         </ifCall>
        </and>
        <compAtt line="3005">
         <fn role="name" name="local-name">
          <dot type="attribute()"/>
         </fn>
         <ifCall role="select" line="3006" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
          <check card="1" diag="0|0||map:get">
           <varRef name="pendingUpdates" slot="1"/>
          </check>
          <varRef name="updatedPath" slot="2"/>
         </ifCall>
        </compAtt>
        <true/>
        <forEach line="3010">
         <dot type="attribute()"/>
         <copy flags="cin">
          <empty role="content"/>
         </copy>
        </forEach>
       </choose>
      </let>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="6" binds="6">
  <mode name="Q{}update-ref" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="2" rank="0" minImp="0" slots="2" flags="s" line="1927" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1928">
     <param name="Q{}path" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1929" name="Q{}position" slot="1">
      <int role="select" val="0"/>
      <supplied role="conversion" slot="1"/>
     </param>
     <copy line="1932" flags="cin">
      <applyT role="content" mode="Q{}update-ref" bSlot="0">
       <sequence role="select">
        <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
        <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
       </sequence>
       <withParam name="Q{}path" as="xs:string">
        <varRef line="1933" name="path" slot="0"/>
       </withParam>
       <withParam name="Q{}position">
        <varRef line="1934" name="position" slot="1"/>
       </withParam>
      </applyT>
     </copy>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="1" rank="0" minImp="0" slots="3" flags="s" line="1908" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1909">
     <param name="Q{}path" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1910" name="Q{}position" slot="1">
      <int role="select" val="0"/>
      <supplied role="conversion" slot="1"/>
     </param>
     <let line="1912" var="path-updated" as="xs:string" slot="2" eval="7">
      <choose>
       <gc op="&gt;" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="position" slot="1"/>
        </data>
        <int val="0"/>
       </gc>
       <fn name="concat">
        <varRef name="path" slot="0"/>
        <str val="["/>
        <atomSing card="?" diag="0|2||fn:concat">
         <varRef name="position" slot="1"/>
        </atomSing>
        <str val="]"/>
       </fn>
       <true/>
       <varRef name="path" slot="0"/>
      </choose>
      <choose line="1916">
       <vc op="eq" onEmpty="0" comp="CCC">
        <fn name="substring">
         <cvUntyped to="xs:string">
          <data>
           <dot type="attribute()"/>
          </data>
         </cvUntyped>
         <int val="1"/>
         <fn line="1913" name="string-length">
          <varRef name="path" slot="0"/>
         </fn>
        </fn>
        <varRef name="path" slot="0"/>
       </vc>
       <compAtt line="1917">
        <fn role="name" line="1911" name="name">
         <dot type="attribute()"/>
        </fn>
        <convert role="select" line="1918" from="xs:untypedAtomic" to="xs:string">
         <cast as="xs:untypedAtomic" emptiable="0">
          <fn name="concat">
           <varRef name="path-updated" slot="2"/>
           <fn name="substring">
            <cvUntyped to="xs:string">
             <data>
              <dot type="attribute()"/>
             </data>
            </cvUntyped>
            <arith op="+" calc="i+i">
             <fn name="string-length">
              <varRef name="path-updated" slot="2"/>
             </fn>
             <int val="1"/>
            </arith>
           </fn>
          </fn>
         </cast>
        </convert>
       </compAtt>
       <true/>
       <copyOf line="1922" flags="vc">
        <dot type="attribute()"/>
       </copyOf>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="2.0" seq="0" rank="1" minImp="0" slots="3" flags="s" line="1894" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="attribute(Q{}data-action)" jsTest="return SaxonJS.U.isAttr(item) &amp;&amp; item.name==='data-action'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1895">
     <param name="Q{}path" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1896" name="Q{}position" slot="1">
      <int role="select" val="0"/>
      <supplied role="conversion" slot="1"/>
     </param>
     <let line="1898" var="myid" as="xs:string" slot="2" eval="8">
      <fn name="concat">
       <fn name="generate-id">
        <dot type="attribute(Q{}data-action)"/>
       </fn>
       <atomSing card="?" diag="0|1||fn:concat">
        <varRef name="position" slot="1"/>
       </atomSing>
      </fn>
      <sequence line="1900">
       <att name="data-old-action">
        <convert from="xs:untypedAtomic" to="xs:string">
         <data>
          <dot type="attribute(Q{}data-action)"/>
         </data>
        </convert>
       </att>
       <att line="1903" name="data-action">
        <convert from="xs:untypedAtomic" to="xs:string">
         <cast as="xs:untypedAtomic" emptiable="0">
          <choose>
           <fn name="exists">
            <filter flags="b">
             <slash simple="1">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
              <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </slash>
             <gc op="=" card="N:1" comp="CCC">
              <data>
               <axis name="child" nodeTest="element(Q{}data-action)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='data-action';"/>
              </data>
              <varRef name="myid" slot="2"/>
             </gc>
            </filter>
           </fn>
           <fn name="concat">
            <fn name="generate-id">
             <dot type="attribute(Q{}data-action)"/>
            </fn>
            <fn name="generate-id">
             <dot type="attribute(Q{}data-action)"/>
            </fn>
           </fn>
           <true/>
           <varRef name="myid" slot="2"/>
          </choose>
         </cast>
        </convert>
       </att>
      </sequence>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="7" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}resolveXPathStrings" line="560" module="saxon-xforms.xsl" eval="7" flags="pU" as="xs:string" slots="5">
   <arg name="base" as="xs:string"/>
   <arg name="relative" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="565" var="parentCallCount" as="xs:integer" slot="2" eval="7">
    <choose>
     <fn name="contains">
      <varRef name="relative" slot="1"/>
      <str val="/"/>
     </fn>
     <fn name="count">
      <filter flags="b">
       <fn name="tokenize">
        <varRef name="relative" slot="1"/>
        <str val="/"/>
        <str val=""/>
       </fn>
       <vc op="eq" comp="CCC">
        <dot type="xs:string"/>
        <str val=".."/>
       </vc>
      </filter>
     </fn>
     <fn name="contains">
      <varRef name="relative" slot="1"/>
      <str val=".."/>
     </fn>
     <int val="1"/>
     <true/>
     <int val="0"/>
    </choose>
    <let line="568" var="slashes" as="xs:integer*" slot="3" eval="3">
     <choose>
      <fn name="contains">
       <varRef name="base" slot="0"/>
       <str val="/"/>
      </fn>
      <fn name="index-of">
       <fn name="string-to-codepoints">
        <varRef name="base" slot="0"/>
       </fn>
       <int val="47"/>
      </fn>
      <true/>
      <int val="0"/>
     </choose>
     <choose line="598">
      <compareToInt op="gt" val="0">
       <varRef name="parentCallCount" slot="2"/>
      </compareToInt>
      <fn line="602" name="concat">
       <fn name="substring">
        <varRef name="base" slot="0"/>
        <int val="1"/>
        <choose line="579">
         <and op="and">
          <vc op="ge" onEmpty="0" comp="CAVC">
           <fn name="count">
            <varRef name="slashes" slot="3"/>
           </fn>
           <varRef name="parentCallCount" slot="2"/>
          </vc>
          <compareToInt op="gt" val="0">
           <varRef name="parentCallCount" slot="2"/>
          </compareToInt>
         </and>
         <let line="580" var="vv:v0" as="xs:integer" slot="4" eval="13">
          <arith op="-" calc="i-i">
           <varRef name="parentCallCount" slot="2"/>
           <int val="1"/>
          </arith>
          <check card="1" diag="3|0|XTTE0570|parentSlash">
           <filter flags="p">
            <varRef name="slashes" slot="3"/>
            <arith op="-" calc="i-i">
             <fn name="last"/>
             <varRef name="vv:v0" slot="4"/>
            </arith>
           </filter>
          </check>
         </let>
         <true/>
         <check line="583" card="1" diag="3|0|XTTE0570|parentSlash">
          <lastOf>
           <varRef name="slashes" slot="3"/>
          </lastOf>
         </check>
        </choose>
       </fn>
       <fn name="replace">
        <varRef name="relative" slot="1"/>
        <str val="\.\./"/>
        <str val=""/>
        <str val=""/>
       </fn>
      </fn>
      <true/>
      <fn line="605" name="concat">
       <varRef name="base" slot="0"/>
       <str val="/"/>
       <varRef name="relative" slot="1"/>
      </fn>
     </choose>
    </let>
   </let>
  </function>
 </co>
 <co id="8" binds="">
  <function name="Q{http://saxonica.com/ns/forms-local}current-date" line="78" module="xforms-function-library.xsl" eval="7" flags="pU" as="xs:string" slots="0">
   <treat role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="79" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|today">
    <check card="1" diag="3|0|XTTE0570|today">
     <cvUntyped to="xs:string">
      <data>
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getCurrentDate"/>
        <arrayBlock/>
       </ifCall>
      </data>
     </cvUntyped>
    </check>
   </treat>
  </function>
 </co>
 <co id="9" binds="">
  <globalVariable name="Q{}debugMode" type="xs:boolean" line="27" module="saxon-xforms.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.boolean.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <false/>
  </globalVariable>
 </co>
 <co id="10" binds="11 2">
  <template name="Q{}main2" flags="os" line="30" module="sample2.xsl" slots="0">
   <callT role="body" ns="xsl=~ xforms=http://www.w3.org/2002/xforms array=http://www.w3.org/2005/xpath-functions/array f=http://www.saxonica.com/local/functions ixsl=~ js=~ xs=~ saxon=~ map=http://www.w3.org/2005/xpath-functions/map" line="31" name="xformsjs-main" bSlot="0" flags="t">
    <withParam name="Q{}xforms-doc" flags="c" as="document-node()">
     <fn line="32" name="doc">
      <gVarRef name="Q{}bookingForm" bSlot="1"/>
     </fn>
    </withParam>
    <withParam name="Q{}xFormsId" flags="c" as="xs:string">
     <str val="xForm"/>
    </withParam>
   </callT>
  </template>
 </co>
 <co id="12" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}getWhileStatement" line="546" module="saxon-xforms.xsl" eval="7" flags="pU" as="xs:string?" slots="3">
   <arg name="map" as="map(*)"/>
   <choose role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="549">
    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
     <varRef name="map" slot="0"/>
     <str val="@while"/>
    </ifCall>
    <treat line="550" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getWhileStatement">
     <check card="?" diag="5|0|XTTE0780|xforms:getWhileStatement">
      <cvUntyped to="xs:string">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="map" slot="0"/>
         <str val="@while"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
    <true/>
    <treat line="553" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getWhileStatement">
     <check card="?" diag="5|0|XTTE0780|xforms:getWhileStatement">
      <cvUntyped to="xs:string">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
          <check card="1" diag="0|0||map:get">
           <let var="vv:LHS992136656" as="map(*)" slot="1" eval="1">
            <varRef name="map" slot="0"/>
            <for var="vv:STAR511833308" as="xs:anyAtomicType" slot="2">
             <ifCall role="in" name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
              <varRef name="vv:LHS992136656" slot="1"/>
             </ifCall>
             <ifCall role="return" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
              <varRef name="vv:LHS992136656" slot="1"/>
              <varRef name="vv:STAR511833308" slot="2"/>
             </ifCall>
            </for>
           </let>
          </check>
         </treat>
         <str val="@while"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
   </choose>
  </function>
 </co>
 <co id="13" binds="13 13">
  <mode name="Q{}insert-node" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="11" flags="s" line="1805" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1806">
     <param name="Q{}insert-node" slot="0" flags="i" as="node()">
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|insert-node">
       <check card="1" diag="8|0|XTTE0590|insert-node">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1807" name="Q{}path" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1808" name="Q{}current-path" slot="2" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|current-path">
       <check card="1" diag="8|0|XTTE0590|current-path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1809" var="updatedPath" as="xs:string" slot="3" eval="8">
      <fn name="concat">
       <varRef name="current-path" slot="2"/>
       <str val="/"/>
       <fn name="local-name">
        <dot type="element()"/>
       </fn>
      </fn>
      <let line="1811" var="name" as="xs:string" slot="4" eval="8">
       <fn name="local-name">
        <dot type="element()"/>
       </fn>
       <let line="1813" var="currentPosition" as="xs:integer" slot="5" eval="7">
        <let var="vv:current585323788" as="element()" slot="6" eval="7">
         <dot type="element()"/>
         <let var="vv:v0" as="xs:string" slot="7" eval="13">
          <fn name="local-name">
           <varRef name="vv:current585323788" slot="6"/>
          </fn>
          <arith op="+" calc="i+i">
           <fn name="count">
            <filter flags="b">
             <slash simple="1">
              <dot type="element()"/>
              <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </slash>
             <vc op="eq" comp="CCC">
              <fn name="local-name">
               <dot type="element()"/>
              </fn>
              <varRef name="vv:v0" slot="7"/>
             </vc>
            </filter>
           </fn>
           <int val="1"/>
          </arith>
         </let>
        </let>
        <let line="1816" var="updatedPath2" as="document-node()" slot="8" eval="7">
         <doc line="1817" flags="t" validation="preserve">
          <sequence>
           <valueOf flags="l">
            <varRef name="updatedPath" slot="3"/>
           </valueOf>
           <choose line="1819">
            <fn name="exists">
             <let var="vv:current-28121473" as="element()" slot="9" eval="7">
              <dot type="element()"/>
              <let var="vv:v1" as="xs:string" slot="10" eval="13">
               <fn name="local-name">
                <varRef name="vv:current-28121473" slot="9"/>
               </fn>
               <filter flags="b">
                <union op="|">
                 <fn name="reverse">
                  <slash simple="1">
                   <dot type="element()"/>
                   <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                  </slash>
                 </fn>
                 <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                </union>
                <vc op="eq" comp="CCC">
                 <fn name="local-name">
                  <dot type="element()"/>
                 </fn>
                 <varRef name="vv:v1" slot="10"/>
                </vc>
               </filter>
              </let>
             </let>
            </fn>
            <valueOf line="1820" flags="l">
             <fn name="concat">
              <str val="["/>
              <varRef name="currentPosition" slot="5"/>
              <str val="]"/>
             </fn>
            </valueOf>
           </choose>
          </sequence>
         </doc>
         <choose line="1826">
          <and op="and">
           <vc op="eq" onEmpty="0" comp="CCC">
            <varRef name="updatedPath" slot="3"/>
            <varRef name="path" slot="1"/>
           </vc>
           <vc line="1815" op="eq" onEmpty="0" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
            <fn name="count">
             <filter flags="b">
              <slash>
               <axis name="parent" nodeTest="element()" jsTest="return item.nodeType===1;"/>
               <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
              </slash>
              <vc op="eq" comp="CCC">
               <fn name="local-name">
                <dot type="element()"/>
               </fn>
               <varRef name="name" slot="4"/>
              </vc>
             </filter>
            </fn>
            <varRef name="currentPosition" slot="5"/>
           </vc>
          </and>
          <sequence line="1830">
           <copy flags="cin">
            <applyT role="content" mode="Q{}insert-node" bSlot="0">
             <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
             <withParam name="Q{}insert-node" as="node()">
              <varRef line="1832" name="insert-node" slot="0"/>
             </withParam>
             <withParam name="Q{}path" as="xs:string">
              <varRef line="1833" name="path" slot="1"/>
             </withParam>
             <withParam name="Q{}current-path" as="document-node()">
              <varRef line="1834" name="updatedPath2" slot="8"/>
             </withParam>
            </applyT>
           </copy>
           <copyOf line="1837" flags="vc">
            <varRef name="insert-node" slot="0"/>
           </copyOf>
          </sequence>
          <true/>
          <copy line="1842" flags="cin">
           <applyT role="content" mode="Q{}insert-node" bSlot="1">
            <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
            <withParam name="Q{}insert-node" as="node()">
             <varRef line="1843" name="insert-node" slot="0"/>
            </withParam>
            <withParam name="Q{}path" as="xs:string">
             <varRef line="1844" name="path" slot="1"/>
            </withParam>
            <withParam name="Q{}current-path" as="document-node()">
             <varRef line="1845" name="updatedPath2" slot="8"/>
            </withParam>
           </applyT>
          </copy>
         </choose>
        </let>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="14" binds="15">
  <function name="Q{http://www.w3.org/2002/xforms}convert-json-to-xml" line="2797" module="saxon-xforms.xsl" eval="7" flags="pU" as="node()" slots="2">
   <arg name="jinstance" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2803" var="result" as="document-node()" slot="1" eval="7">
    <doc line="2805" validation="preserve">
     <applyT mode="Q{}jxml-xml" bSlot="0">
      <doc role="select" line="2800" validation="preserve">
       <fn name="json-to-xml">
        <varRef name="jinstance" slot="0"/>
       </fn>
      </doc>
     </applyT>
    </doc>
    <varRef line="2808" name="result" slot="1"/>
   </let>
  </function>
 </co>
 <co id="16" binds="">
  <template name="Q{}serverError" flags="os" line="938" module="saxon-xforms.xsl" slots="1">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="939">
    <param name="Q{}responseMap" slot="0" flags="i" as="map(*)">
     <treat role="conversion" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="8|0|XTTE0590|responseMap">
      <check card="1" diag="8|0|XTTE0590|responseMap">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <message line="940">
     <sequence role="select">
      <valueOf>
       <str val="Server side error HTTP response - "/>
      </valueOf>
      <valueOf>
       <fn name="concat">
        <atomSing card="?" diag="0|0||fn:concat">
         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
          <varRef name="responseMap" slot="0"/>
          <str val="status"/>
         </ifCall>
        </atomSing>
        <str val=" "/>
        <atomSing card="?" diag="0|2||fn:concat">
         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
          <varRef name="responseMap" slot="0"/>
          <str val="message"/>
         </ifCall>
        </atomSing>
       </fn>
      </valueOf>
     </sequence>
     <str role="terminate" val="no"/>
     <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
    </message>
   </sequence>
  </template>
 </co>
 <co id="17" binds="18">
  <function name="Q{http://www.w3.org/2002/xforms}convert-xml-to-jxml" line="2720" module="saxon-xforms.xsl" eval="7" flags="pU" as="node()" slots="2">
   <arg name="xinstance" as="node()"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2722" var="rep-xml" as="document-node()" slot="1" eval="7">
    <doc line="2724" validation="preserve">
     <elem name="map" nsuri="http://www.w3.org/2005/xpath-functions" flags="dl">
      <applyT mode="Q{}json-xml" bSlot="0">
       <varRef role="select" name="xinstance" slot="0"/>
      </applyT>
     </elem>
    </doc>
    <varRef line="2727" name="rep-xml" slot="1"/>
   </let>
  </function>
 </co>
 <co id="19" vis="PUBLIC" binds="">
  <globalParam name="Q{}xforms-instance-id" type="item()*" line="24" module="saxon-xforms.xsl" visibility="PUBLIC" jsAcceptor="return val;" jsCardCheck="function c() {return true;};">
   <str val="xforms-jinstance"/>
  </globalParam>
 </co>
 <co id="20" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}getIfStatement" line="534" module="saxon-xforms.xsl" eval="7" flags="pU" as="xs:string?" slots="1">
   <arg name="map" as="map(*)"/>
   <choose role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="537">
    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
     <varRef name="map" slot="0"/>
     <str val="@if"/>
    </ifCall>
    <treat line="538" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getIfStatement">
     <check card="?" diag="5|0|XTTE0780|xforms:getIfStatement">
      <cvUntyped to="xs:string">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="map" slot="0"/>
         <str val="@if"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
    <true/>
    <treat line="541" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getIfStatement">
     <check card="?" diag="5|0|XTTE0780|xforms:getIfStatement">
      <cvUntyped to="xs:string">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="map" slot="0"/>
         <str val="@if"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
   </choose>
  </function>
 </co>
 <co id="21" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}check-constraints-on-fields" line="810" module="saxon-xforms.xsl" eval="8" flags="pU" as="item()*" slots="4">
   <arg name="updatedInstanceXML" as="document-node()"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="813" var="constraint-fieldsi" as="element()*" slot="1" eval="8">
    <filter flags="b">
     <slash simple="1">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
      <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </slash>
     <fn name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-constraint)" jsTest="return item.name==='data-constraint'"/>
     </fn>
    </filter>
    <forEach line="817">
     <varRef name="constraint-fieldsi" slot="1"/>
     <let line="818" var="contexti" as="node()" slot="2" eval="7">
      <treat line="819" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|contexti">
       <check card="1" diag="3|0|XTTE0570|contexti">
        <evaluate dxns="">
         <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
          <cvUntyped to="xs:string">
           <attVal name="Q{}data-ref" chk="0"/>
          </cvUntyped>
         </check>
         <varRef role="cxt" name="updatedInstanceXML" slot="0"/>
         <str role="sa" val="no"/>
         <map role="wp" size="0"/>
        </evaluate>
       </check>
      </treat>
      <let line="822" var="resulti" as="xs:boolean" slot="3" eval="7">
       <treat line="825" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|resulti">
        <check card="1" diag="3|0|XTTE0570|resulti">
         <cvUntyped to="xs:boolean">
          <data>
           <evaluate dxns="">
            <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
             <cvUntyped to="xs:string">
              <attVal name="Q{}data-constraint" chk="0"/>
             </cvUntyped>
            </check>
            <varRef role="cxt" name="contexti" slot="2"/>
            <str role="sa" val="no"/>
            <map role="wp" size="0"/>
           </evaluate>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <choose line="833">
        <fn name="not">
         <varRef name="resulti" slot="3"/>
        </fn>
        <dot type="element()"/>
       </choose>
      </let>
     </let>
    </forEach>
   </let>
  </function>
 </co>
 <co id="22" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}checkRelevantFields" line="271" module="saxon-xforms.xsl" eval="8" flags="pU" as="item()*" slots="13">
   <arg name="refElement" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="274" var="pendingUpdatesi" as="map(xs:string, xs:string)?" slot="1" eval="7">
    <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|pendingUpdatesi">
     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
      <check card="1" diag="0|0||ixsl:call">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
      </check>
      <str val="getPendingUpdates"/>
      <arrayBlock/>
     </ifCall>
    </treat>
    <let line="277" var="updatesi" as="map(xs:string, xs:string)?" slot="2" eval="7">
     <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|updatesi">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
       <check card="1" diag="0|0||ixsl:call">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
       </check>
       <str val="getUpdates"/>
       <arrayBlock/>
      </ifCall>
     </treat>
     <let line="288" var="relevantMap" as="map(xs:string, xs:string)" slot="3" eval="7">
      <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|relevantMap">
       <check card="1" diag="3|0|XTTE0570|relevantMap">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="getRelevantMap"/>
         <arrayBlock/>
        </ifCall>
       </check>
      </treat>
      <let line="289" var="mapKeys" as="xs:anyAtomicType*" slot="4" eval="3">
       <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
        <varRef name="relevantMap" slot="3"/>
       </ifCall>
       <let line="331" var="updatedInstanceXML4" as="item()?" slot="5" eval="8">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="getInstance"/>
         <arrayBlock/>
        </ifCall>
        <sequence line="333">
         <forEach>
          <sequence line="292">
           <forEach>
            <varRef name="mapKeys" slot="4"/>
            <choose line="293">
             <fn name="matches">
              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
               <varRef name="relevantMap" slot="3"/>
               <dot type="xs:anyAtomicType"/>
              </ifCall>
              <varRef name="refElement" slot="0"/>
              <str val=""/>
             </fn>
             <dot line="294" type="xs:anyAtomicType"/>
            </choose>
           </forEach>
           <forEach line="275">
            <choose>
             <fn name="exists">
              <varRef name="pendingUpdatesi" slot="1"/>
             </fn>
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
              <check card="1" diag="0|0||map:keys">
               <varRef name="pendingUpdatesi" slot="1"/>
              </check>
             </ifCall>
            </choose>
            <let line="300" var="keyi" as="xs:string?" slot="6" eval="7">
             <lastOf>
              <fn name="tokenize">
               <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:tokenize">
                <cvUntyped to="xs:string">
                 <dot type="xs:anyAtomicType"/>
                </cvUntyped>
               </treat>
               <str val="/"/>
               <str val=""/>
              </fn>
             </lastOf>
             <let line="303" var="vv:v0" as="xs:string" slot="7" eval="13">
              <check card="1" diag="0|1||fn:matches">
               <varRef name="keyi" slot="6"/>
              </check>
              <forEach line="301">
               <varRef name="mapKeys" slot="4"/>
               <choose line="303">
                <fn name="matches">
                 <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                  <varRef name="relevantMap" slot="3"/>
                  <dot type="xs:anyAtomicType"/>
                 </ifCall>
                 <varRef name="vv:v0" slot="7"/>
                 <str val=""/>
                </fn>
                <dot line="304" type="xs:anyAtomicType"/>
               </choose>
              </forEach>
             </let>
            </let>
           </forEach>
           <forEach line="278">
            <choose>
             <fn name="exists">
              <varRef name="updatesi" slot="2"/>
             </fn>
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
              <check card="1" diag="0|0||map:keys">
               <varRef name="updatesi" slot="2"/>
              </check>
             </ifCall>
            </choose>
            <let line="312" var="keyi" as="xs:string?" slot="8" eval="7">
             <lastOf>
              <fn name="tokenize">
               <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:tokenize">
                <cvUntyped to="xs:string">
                 <dot type="xs:anyAtomicType"/>
                </cvUntyped>
               </treat>
               <str val="/"/>
               <str val=""/>
              </fn>
             </lastOf>
             <let line="315" var="vv:v1" as="xs:string" slot="9" eval="13">
              <check card="1" diag="0|1||fn:matches">
               <varRef name="keyi" slot="8"/>
              </check>
              <forEach line="313">
               <varRef name="mapKeys" slot="4"/>
               <choose line="315">
                <fn name="matches">
                 <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                  <varRef name="relevantMap" slot="3"/>
                  <dot type="xs:anyAtomicType"/>
                 </ifCall>
                 <varRef name="vv:v1" slot="9"/>
                 <str val=""/>
                </fn>
                <dot line="316" type="xs:anyAtomicType"/>
               </choose>
              </forEach>
             </let>
            </let>
           </forEach>
          </sequence>
          <let line="334" var="keyi" as="xs:anyAtomicType" slot="10" eval="7">
           <dot type="xs:anyAtomicType"/>
           <let line="335" var="context" as="element()*" slot="11" eval="8">
            <filter flags="b">
             <slash simple="1">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
              <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </slash>
             <gc op="=" card="1:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
              <attVal name="Q{}data-ref" chk="0"/>
              <varRef name="keyi" slot="10"/>
             </gc>
            </filter>
            <let line="336" var="relevantCheck" as="xs:boolean" slot="12" eval="7">
             <treat line="337" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|relevantCheck">
              <check card="1" diag="3|0|XTTE0570|relevantCheck">
               <cvUntyped to="xs:boolean">
                <data>
                 <evaluate dxns="">
                  <fn role="xpath" name="concat">
                   <dot type="xs:anyAtomicType"/>
                   <str val="/"/>
                   <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                    <varRef name="relevantMap" slot="3"/>
                    <dot type="xs:anyAtomicType"/>
                   </ifCall>
                  </fn>
                  <varRef role="cxt" name="updatedInstanceXML4" slot="5"/>
                  <str role="sa" val="no"/>
                  <map role="wp" size="0"/>
                 </evaluate>
                </data>
               </cvUntyped>
              </check>
             </treat>
             <choose line="340">
              <varRef name="relevantCheck" slot="12"/>
              <ifCall line="343" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
               <str val="style.display"/>
               <str val="inline"/>
               <check card="1" diag="0|2||ixsl:set-property">
                <conditionalSort>
                 <fn name="exists">
                  <tail start="2">
                   <varRef name="context" slot="11"/>
                  </tail>
                 </fn>
                 <docOrder intra="1">
                  <slash>
                   <varRef name="context" slot="11"/>
                   <axis name="parent" nodeTest="(document-node()|element())" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);"/>
                  </slash>
                 </docOrder>
                </conditionalSort>
               </check>
              </ifCall>
              <true/>
              <ifCall line="346" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
               <str val="style.display"/>
               <str val="none"/>
               <check card="1" diag="0|2||ixsl:set-property">
                <conditionalSort>
                 <fn name="exists">
                  <tail start="2">
                   <varRef name="context" slot="11"/>
                  </tail>
                 </fn>
                 <docOrder intra="1">
                  <slash>
                   <varRef name="context" slot="11"/>
                   <axis name="parent" nodeTest="(document-node()|element())" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);"/>
                  </slash>
                 </docOrder>
                </conditionalSort>
               </check>
              </ifCall>
             </choose>
            </let>
           </let>
          </let>
         </forEach>
         <ifCall line="352" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="clearPendingUpdates"/>
          <arrayBlock/>
         </ifCall>
         <ifCall line="353" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="clearUpdates"/>
          <arrayBlock/>
         </ifCall>
        </sequence>
       </let>
      </let>
     </let>
    </let>
   </let>
  </function>
 </co>
 <co id="23" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}random" line="68" module="xforms-function-library.xsl" eval="7" flags="pU" as="xs:double" slots="0">
   <check role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="69" card="1" diag="3|0|XTTE0570|randomNumber">
    <convert from="xs:anyAtomicType" to="xs:double" flags="p">
     <cvUntyped to="xs:double">
      <data>
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="Math.random"/>
        <arrayBlock/>
       </ifCall>
      </data>
     </cvUntyped>
    </convert>
   </check>
  </function>
 </co>
 <co id="24" binds="3 20 7 25 3 22 3 7 25 3 22">
  <mode name="Q{http://saxonica.com/ns/interactiveXSLT}onchange" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.5" seq="0" rank="0" minImp="0" slots="18" flags="s" line="358" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}input)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='input';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="358" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
     </fn>
    </p.withPredicate>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="359" var="refi" as="attribute(Q{}data-ref)?" slot="0" eval="8">
     <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
     <let line="363" var="xforms-value-change" as="item()?" slot="1" eval="8">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
       <check card="1" diag="0|0||ixsl:call">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
       </check>
       <str val="getAction"/>
       <arrayBlock>
        <fn name="string">
         <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
        </fn>
       </arrayBlock>
      </ifCall>
      <let line="365" var="updatedInstanceXML" as="document-node()" slot="2" eval="7">
       <doc line="366" validation="preserve">
        <let var="instanceXML" as="item()?" slot="3" eval="8">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="getInstance"/>
          <arrayBlock/>
         </ifCall>
         <applyT line="367" mode="Q{}form-check-initial" bSlot="0">
          <varRef role="select" name="instanceXML" slot="3"/>
         </applyT>
        </let>
       </doc>
       <sequence line="369">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setInstance"/>
         <arrayBlock>
          <varRef name="updatedInstanceXML" slot="2"/>
         </arrayBlock>
        </ifCall>
        <ifCall line="375" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setPendingUpdates"/>
         <arrayBlock>
          <treat line="371" as="map(°)" jsTest="function k(item) {return SaxonJS.U.Atomic.anyAtomicType.matches(item);};function v(item) {return true;};function c() {return true;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||pendingInstanceUpdates">
           <map size="0"/>
          </treat>
         </arrayBlock>
        </ifCall>
        <ifCall line="376" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setUpdates"/>
         <arrayBlock>
          <treat line="373" as="map(°)" jsTest="function k(item) {return SaxonJS.U.Atomic.anyAtomicType.matches(item);};function v(item) {return true;};function c() {return true;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||instanceUpdates">
           <map size="0"/>
          </treat>
         </arrayBlock>
        </ifCall>
        <forEach line="383">
         <varRef name="xforms-value-change" slot="1"/>
         <let line="384" var="action-map" as="item()" slot="4" eval="7">
          <dot/>
          <let line="395" var="context" as="node()?" slot="5" eval="7">
           <treat line="396" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|context">
            <check card="?" diag="3|0|XTTE0570|context">
             <evaluate dxns="">
              <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
               <check card="1" diag="4|0||xsl:evaluate/xpath">
                <cvUntyped to="xs:string">
                 <data>
                  <ifCall line="386" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                   <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                    <varRef name="action-map" slot="4"/>
                   </treat>
                   <str val="@ref"/>
                  </ifCall>
                 </data>
                </cvUntyped>
               </check>
              </treat>
              <varRef role="cxt" name="updatedInstanceXML" slot="2"/>
              <str role="sa" val="no"/>
              <map role="wp" size="0"/>
             </evaluate>
            </check>
           </treat>
           <let line="401" var="ifVar" as="xs:string?" slot="6" eval="7">
            <ufCall name="Q{http://www.w3.org/2002/xforms}getIfStatement" tailCall="false" bSlot="1" eval="7">
             <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||xforms:getIfStatement">
              <varRef name="action-map" slot="4"/>
             </treat>
            </ufCall>
            <let line="407" var="ifExecuted" as="xs:boolean" slot="7" eval="7">
             <choose line="409">
              <fn name="exists">
               <varRef name="ifVar" slot="6"/>
              </fn>
              <treat as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|ifExecuted">
               <check card="1" diag="3|0|XTTE0570|ifExecuted">
                <cvUntyped to="xs:boolean">
                 <data>
                  <evaluate dxns="">
                   <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
                    <varRef name="ifVar" slot="6"/>
                   </check>
                   <varRef role="cxt" name="context" slot="5"/>
                   <str role="sa" val="no"/>
                   <map role="wp" size="0"/>
                  </evaluate>
                 </data>
                </cvUntyped>
               </check>
              </treat>
              <true/>
              <true/>
             </choose>
             <choose line="417">
              <varRef name="ifExecuted" slot="7"/>
              <choose line="421">
               <fn name="exists">
                <ifCall line="420" name="Q{http://www.w3.org/2005/xpath-functions/map}find" type="function(*)">
                 <varRef name="action-map" slot="4"/>
                 <str val="setvalue"/>
                </ifCall>
               </fn>
               <let line="435" var="vv:v0" as="xs:string" slot="8" eval="13">
                <check card="1" diag="0|0||xforms:resolveXPathStrings">
                 <cvUntyped to="xs:string">
                  <data>
                   <varRef name="refi" slot="0"/>
                  </data>
                 </cvUntyped>
                </check>
                <let line="422" var="setValues" as="item()*" slot="9" eval="3">
                 <sequence line="424">
                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                   <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                    <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                     <varRef name="action-map" slot="4"/>
                    </treat>
                    <str val="setvalue"/>
                   </ifCall>
                  </ifCall>
                  <ifCall line="425" name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                   <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                    <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                     <varRef name="action-map" slot="4"/>
                    </treat>
                    <str val="setvalue"/>
                   </ifCall>
                  </ifCall>
                 </sequence>
                 <sequence line="431">
                  <forEach>
                   <ifCall name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                    <varRef name="setValues" slot="9"/>
                   </ifCall>
                   <let line="435" var="refz" as="xs:string" slot="10" eval="7">
                    <ufCall name="Q{http://www.w3.org/2002/xforms}resolveXPathStrings" tailCall="false" bSlot="2" eval="6 4">
                     <varRef name="vv:v0" slot="8"/>
                     <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||xforms:resolveXPathStrings">
                      <check card="1" diag="0|1||xforms:resolveXPathStrings">
                       <cvUntyped to="xs:string">
                        <let var="vv:LHS1451270520" as="function(*)" slot="11" eval="7">
                         <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS1451270520">
                          <dot/>
                         </treat>
                         <choose>
                          <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                           <varRef name="vv:LHS1451270520" slot="11"/>
                          </instance>
                          <data>
                           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                            <treat module="saxon-xforms.xsl" line="435" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                             <varRef name="vv:LHS1451270520" slot="11"/>
                            </treat>
                            <str val="ref"/>
                           </ifCall>
                          </data>
                          <true/>
                          <data>
                           <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                          </data>
                         </choose>
                        </let>
                       </cvUntyped>
                      </check>
                     </treat>
                    </ufCall>
                    <let line="436" var="valuez" as="document-node()" slot="12" eval="7">
                     <doc line="439" validation="preserve">
                      <choose>
                       <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                        <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:contains">
                         <dot/>
                        </treat>
                        <str val="@value"/>
                       </ifCall>
                       <let line="444" var="contexti" as="node()" slot="13" eval="8">
                        <evaluate line="445" as="node()" dxns="">
                         <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
                          <cvUntyped to="xs:string">
                           <data>
                            <varRef name="refi" slot="0"/>
                           </data>
                          </cvUntyped>
                         </check>
                         <varRef role="cxt" name="updatedInstanceXML" slot="2"/>
                         <str role="sa" val="no"/>
                         <map role="wp" size="0"/>
                        </evaluate>
                        <evaluate line="448" dxns="">
                         <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
                          <check card="1" diag="4|0||xsl:evaluate/xpath">
                           <cvUntyped to="xs:string">
                            <data>
                             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                              <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                               <dot/>
                              </treat>
                              <str val="@value"/>
                             </ifCall>
                            </data>
                           </cvUntyped>
                          </check>
                         </treat>
                         <varRef role="cxt" name="contexti" slot="13"/>
                         <str role="sa" val="no"/>
                         <map role="wp" size="0"/>
                        </evaluate>
                       </let>
                       <ifCall line="451" name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                        <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:contains">
                         <dot/>
                        </treat>
                        <str val="value"/>
                       </ifCall>
                       <cast line="452" as="xs:string" emptiable="1">
                        <atomSing card="?" diag="2|0||cast as">
                         <let var="vv:LHS1608446010" as="function(*)" slot="14" eval="7">
                          <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS1608446010">
                           <dot/>
                          </treat>
                          <choose>
                           <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                            <varRef name="vv:LHS1608446010" slot="14"/>
                           </instance>
                           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                            <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                             <varRef name="vv:LHS1608446010" slot="14"/>
                            </treat>
                            <str val="value"/>
                           </ifCall>
                           <true/>
                           <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                          </choose>
                         </let>
                        </atomSing>
                       </cast>
                       <true/>
                       <str val=""/>
                      </choose>
                     </doc>
                     <choose line="466">
                      <fn name="exists">
                       <varRef name="refz" slot="10"/>
                      </fn>
                      <let line="468" var="associated-form-control" as="element()?" slot="15" eval="7">
                       <check card="?" diag="3|0|XTTE0570|associated-form-control">
                        <filter flags="b">
                         <slash simple="1">
                          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                          <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                         </slash>
                         <gc op="=" card="1:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
                          <attVal name="Q{}data-ref" chk="0"/>
                          <varRef name="refz" slot="10"/>
                         </gc>
                        </filter>
                       </check>
                       <choose line="471">
                        <fn name="exists">
                         <varRef name="associated-form-control" slot="15"/>
                        </fn>
                        <sequence line="473">
                         <applyT mode="Q{}set-field" bSlot="3">
                          <varRef role="select" name="associated-form-control" slot="15"/>
                          <withParam name="Q{}value" flags="t" as="xs:string">
                           <cast line="474" as="xs:string" emptiable="0">
                            <data>
                             <varRef name="valuez" slot="12"/>
                            </data>
                           </cast>
                          </withParam>
                         </applyT>
                         <ifCall line="477" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                          <check card="1" diag="0|0||ixsl:call">
                           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                          </check>
                          <str val="setUpdates"/>
                          <arrayBlock>
                           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                            <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:put">
                             <check card="1" diag="0|0||map:put">
                              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                               <check card="1" diag="0|0||ixsl:call">
                                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                               </check>
                               <str val="getUpdates"/>
                               <arrayBlock/>
                              </ifCall>
                             </check>
                            </treat>
                            <varRef name="refz" slot="10"/>
                            <cast as="xs:string" emptiable="0">
                             <data>
                              <varRef name="valuez" slot="12"/>
                             </data>
                            </cast>
                           </ifCall>
                          </arrayBlock>
                         </ifCall>
                        </sequence>
                        <true/>
                        <ifCall line="486" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                         <check card="1" diag="0|0||ixsl:call">
                          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                         </check>
                         <str val="setPendingUpdates"/>
                         <arrayBlock>
                          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                           <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:put">
                            <check card="1" diag="0|0||map:put">
                             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                              <check card="1" diag="0|0||ixsl:call">
                               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                              </check>
                              <str val="getPendingUpdates"/>
                              <arrayBlock/>
                             </ifCall>
                            </check>
                           </treat>
                           <varRef name="refz" slot="10"/>
                           <cast as="xs:string" emptiable="0">
                            <data>
                             <varRef name="valuez" slot="12"/>
                            </data>
                           </cast>
                          </ifCall>
                         </arrayBlock>
                        </ifCall>
                       </choose>
                      </let>
                     </choose>
                    </let>
                   </let>
                  </forEach>
                  <choose line="496">
                   <fn name="exists">
                    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                     <varRef name="setValues" slot="9"/>
                    </ifCall>
                   </fn>
                   <let line="497" var="pendingUpdates" as="map(xs:string, xs:string)?" slot="16" eval="7">
                    <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|pendingUpdates">
                     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                      <check card="1" diag="0|0||ixsl:call">
                       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                      </check>
                      <str val="getPendingUpdates"/>
                      <arrayBlock/>
                     </ifCall>
                    </treat>
                    <let line="499" var="updatedInstanceXML3" as="document-node()" slot="17" eval="7">
                     <doc line="501" validation="preserve">
                      <applyT mode="Q{}form-check-initial" bSlot="4">
                       <varRef role="select" name="updatedInstanceXML" slot="2"/>
                       <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
                        <varRef line="502" name="pendingUpdates" slot="16"/>
                       </withParam>
                      </applyT>
                     </doc>
                     <ifCall line="506" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                      <check card="1" diag="0|0||ixsl:call">
                       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                      </check>
                      <str val="setInstance"/>
                      <arrayBlock>
                       <varRef name="updatedInstanceXML3" slot="17"/>
                      </arrayBlock>
                     </ifCall>
                    </let>
                   </let>
                  </choose>
                 </sequence>
                </let>
               </let>
              </choose>
             </choose>
            </let>
           </let>
          </let>
         </let>
        </forEach>
        <ufCall line="517" name="Q{http://www.w3.org/2002/xforms}checkRelevantFields" tailCall="false" bSlot="5" eval="7">
         <check card="1" diag="0|0||xforms:checkRelevantFields">
          <cvUntyped to="xs:string">
           <attVal name="Q{}data-element" chk="0"/>
          </cvUntyped>
         </check>
        </ufCall>
       </sequence>
      </let>
     </let>
    </let>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="1" rank="0" minImp="0" slots="19" flags="s" line="611" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}select)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='select';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="611" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
     </fn>
    </p.withPredicate>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="613" var="refi" as="attribute(Q{}data-ref)?" slot="0" eval="8">
     <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
     <let line="619" var="xforms-actions" as="map(*)?" slot="1" eval="7">
      <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|xforms-actions">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getAction"/>
        <arrayBlock>
         <fn name="string">
          <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
         </fn>
        </arrayBlock>
       </ifCall>
      </treat>
      <let line="623" var="updatedInstanceXML" as="document-node()" slot="2" eval="7">
       <doc line="624" validation="preserve">
        <let var="instanceXML" as="item()?" slot="3" eval="8">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="getInstance"/>
          <arrayBlock/>
         </ifCall>
         <applyT line="625" mode="Q{}form-check-initial" bSlot="6">
          <varRef role="select" name="instanceXML" slot="3"/>
         </applyT>
        </let>
       </doc>
       <sequence line="631">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setPendingUpdates"/>
         <arrayBlock>
          <treat line="628" as="map(°)" jsTest="function k(item) {return SaxonJS.U.Atomic.anyAtomicType.matches(item);};function v(item) {return true;};function c() {return true;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||pendingInstanceUpdates">
           <map size="0"/>
          </treat>
         </arrayBlock>
        </ifCall>
        <ifCall line="632" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="setUpdates"/>
         <arrayBlock>
          <treat line="629" as="map(°)" jsTest="function k(item) {return SaxonJS.U.Atomic.anyAtomicType.matches(item);};function v(item) {return true;};function c() {return true;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||instanceUpdates">
           <map size="0"/>
          </treat>
         </arrayBlock>
        </ifCall>
        <forEach line="638">
         <varRef name="xforms-actions" slot="1"/>
         <let line="639" var="action-map" as="map(*)" slot="4" eval="7">
          <dot type="map(*)"/>
          <let line="647" var="context" as="node()?" slot="5" eval="7">
           <treat line="648" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|context">
            <check card="?" diag="3|0|XTTE0570|context">
             <evaluate dxns="">
              <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
               <check card="1" diag="4|0||xsl:evaluate/xpath">
                <cvUntyped to="xs:string">
                 <data>
                  <ifCall line="643" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                   <varRef name="action-map" slot="4"/>
                   <str val="@ref"/>
                  </ifCall>
                 </data>
                </cvUntyped>
               </check>
              </treat>
              <varRef role="cxt" name="updatedInstanceXML" slot="2"/>
              <str role="sa" val="no"/>
              <map role="wp" size="0"/>
             </evaluate>
            </check>
           </treat>
           <let line="651" var="ifVar" as="item()*" slot="6" eval="3">
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
             <varRef name="action-map" slot="4"/>
             <str val="@if"/>
            </ifCall>
            <let line="662" var="ifExecuted" as="xs:boolean" slot="7" eval="7">
             <choose line="664">
              <fn name="exists">
               <varRef name="ifVar" slot="6"/>
              </fn>
              <treat as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|ifExecuted">
               <check card="1" diag="3|0|XTTE0570|ifExecuted">
                <cvUntyped to="xs:boolean">
                 <data>
                  <evaluate dxns="">
                   <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
                    <check card="1" diag="4|0||xsl:evaluate/xpath">
                     <cvUntyped to="xs:string">
                      <data>
                       <varRef name="ifVar" slot="6"/>
                      </data>
                     </cvUntyped>
                    </check>
                   </treat>
                   <varRef role="cxt" name="context" slot="5"/>
                   <str role="sa" val="no"/>
                   <map role="wp" size="0"/>
                  </evaluate>
                 </data>
                </cvUntyped>
               </check>
              </treat>
              <true/>
              <true/>
             </choose>
             <choose line="672">
              <varRef name="ifExecuted" slot="7"/>
              <choose line="679">
               <fn name="exists">
                <ifCall line="678" name="Q{http://www.w3.org/2005/xpath-functions/map}find" type="function(*)">
                 <varRef name="action-map" slot="4"/>
                 <str val="setvalue"/>
                </ifCall>
               </fn>
               <let line="700" var="vv:v0" as="xs:string" slot="8" eval="13">
                <check card="1" diag="0|0||xforms:resolveXPathStrings">
                 <cvUntyped to="xs:string">
                  <data>
                   <varRef name="refi" slot="0"/>
                  </data>
                 </cvUntyped>
                </check>
                <forEach line="687">
                 <ifCall line="682" name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                   <varRef name="action-map" slot="4"/>
                   <str val="setvalue"/>
                  </ifCall>
                 </ifCall>
                 <let line="688" var="ifVari" as="item()*" slot="9" eval="3">
                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                   <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                    <dot/>
                   </treat>
                   <str val="@if"/>
                  </ifCall>
                  <let line="689" var="ifExecutedi" as="xs:boolean" slot="10" eval="7">
                   <choose line="691">
                    <fn name="exists">
                     <varRef name="ifVari" slot="9"/>
                    </fn>
                    <treat as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|ifExecutedi">
                     <check card="1" diag="3|0|XTTE0570|ifExecutedi">
                      <cvUntyped to="xs:boolean">
                       <data>
                        <evaluate dxns="">
                         <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
                          <check card="1" diag="4|0||xsl:evaluate/xpath">
                           <cvUntyped to="xs:string">
                            <data>
                             <varRef name="ifVari" slot="9"/>
                            </data>
                           </cvUntyped>
                          </check>
                         </treat>
                         <varRef role="cxt" name="context" slot="5"/>
                         <str role="sa" val="no"/>
                         <map role="wp" size="0"/>
                        </evaluate>
                       </data>
                      </cvUntyped>
                     </check>
                    </treat>
                    <true/>
                    <true/>
                   </choose>
                   <let line="700" var="refz" as="xs:string" slot="11" eval="7">
                    <ufCall name="Q{http://www.w3.org/2002/xforms}resolveXPathStrings" tailCall="false" bSlot="7" eval="6 4">
                     <varRef name="vv:v0" slot="8"/>
                     <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||xforms:resolveXPathStrings">
                      <check card="1" diag="0|1||xforms:resolveXPathStrings">
                       <cvUntyped to="xs:string">
                        <let var="vv:LHS1705929636" as="function(*)" slot="12" eval="7">
                         <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS1705929636">
                          <dot/>
                         </treat>
                         <choose>
                          <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                           <varRef name="vv:LHS1705929636" slot="12"/>
                          </instance>
                          <data>
                           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                            <treat module="saxon-xforms.xsl" line="700" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                             <varRef name="vv:LHS1705929636" slot="12"/>
                            </treat>
                            <str val="ref"/>
                           </ifCall>
                          </data>
                          <true/>
                          <data>
                           <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                          </data>
                         </choose>
                        </let>
                       </cvUntyped>
                      </check>
                     </treat>
                    </ufCall>
                    <let line="701" var="valuez" as="xs:string" slot="13" eval="7">
                     <choose line="704">
                      <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                       <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:contains">
                        <dot/>
                       </treat>
                       <str val="@value"/>
                      </ifCall>
                      <let line="708" var="contexti" as="node()" slot="14" eval="8">
                       <evaluate line="709" as="node()" dxns="">
                        <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
                         <cvUntyped to="xs:string">
                          <data>
                           <varRef name="refi" slot="0"/>
                          </data>
                         </cvUntyped>
                        </check>
                        <varRef role="cxt" name="updatedInstanceXML" slot="2"/>
                        <str role="sa" val="no"/>
                        <map role="wp" size="0"/>
                       </evaluate>
                       <evaluate line="712" as="xs:string" dxns="">
                        <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
                         <check card="1" diag="4|0||xsl:evaluate/xpath">
                          <cvUntyped to="xs:string">
                           <data>
                            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                             <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                              <dot/>
                             </treat>
                             <str val="@value"/>
                            </ifCall>
                           </data>
                          </cvUntyped>
                         </check>
                        </treat>
                        <varRef role="cxt" name="contexti" slot="14"/>
                        <str role="sa" val="no"/>
                        <map role="wp" size="0"/>
                       </evaluate>
                      </let>
                      <ifCall line="715" name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                       <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:contains">
                        <dot/>
                       </treat>
                       <str val="value"/>
                      </ifCall>
                      <check line="716" card="1" diag="3|0|XTTE0570|valuez">
                       <cast as="xs:string" emptiable="1">
                        <atomSing card="?" diag="2|0||cast as">
                         <let var="vv:LHS1221555852" as="function(*)" slot="15" eval="7">
                          <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS1221555852">
                           <dot/>
                          </treat>
                          <choose>
                           <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                            <varRef name="vv:LHS1221555852" slot="15"/>
                           </instance>
                           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                            <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                             <varRef name="vv:LHS1221555852" slot="15"/>
                            </treat>
                            <str val="value"/>
                           </ifCall>
                           <true/>
                           <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                          </choose>
                         </let>
                        </atomSing>
                       </cast>
                      </check>
                      <true/>
                      <str val=""/>
                     </choose>
                     <choose line="728">
                      <and op="and">
                       <fn name="exists">
                        <varRef name="refz" slot="11"/>
                       </fn>
                       <varRef name="ifExecutedi" slot="10"/>
                      </and>
                      <let line="730" var="associated-form-control" as="element()?" slot="16" eval="7">
                       <check card="?" diag="3|0|XTTE0570|associated-form-control">
                        <filter flags="b">
                         <slash simple="1">
                          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                          <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                         </slash>
                         <gc op="=" card="1:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
                          <attVal name="Q{}data-ref" chk="0"/>
                          <varRef name="refz" slot="11"/>
                         </gc>
                        </filter>
                       </check>
                       <choose line="733">
                        <fn name="exists">
                         <varRef name="associated-form-control" slot="16"/>
                        </fn>
                        <sequence line="735">
                         <applyT mode="Q{}set-field" bSlot="8">
                          <varRef role="select" name="associated-form-control" slot="16"/>
                          <withParam name="Q{}value" flags="t" as="xs:string">
                           <varRef line="736" name="valuez" slot="13"/>
                          </withParam>
                         </applyT>
                         <ifCall line="738" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                          <check card="1" diag="0|0||ixsl:call">
                           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                          </check>
                          <str val="setUpdates"/>
                          <arrayBlock>
                           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                            <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:put">
                             <check card="1" diag="0|0||map:put">
                              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                               <check card="1" diag="0|0||ixsl:call">
                                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                               </check>
                               <str val="getUpdates"/>
                               <arrayBlock/>
                              </ifCall>
                             </check>
                            </treat>
                            <varRef name="refz" slot="11"/>
                            <varRef name="valuez" slot="13"/>
                           </ifCall>
                          </arrayBlock>
                         </ifCall>
                        </sequence>
                        <true/>
                        <ifCall line="747" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                         <check card="1" diag="0|0||ixsl:call">
                          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                         </check>
                         <str val="setPendingUpdates"/>
                         <arrayBlock>
                          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                           <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:put">
                            <check card="1" diag="0|0||map:put">
                             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                              <check card="1" diag="0|0||ixsl:call">
                               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                              </check>
                              <str val="getPendingUpdates"/>
                              <arrayBlock/>
                             </ifCall>
                            </check>
                           </treat>
                           <varRef name="refz" slot="11"/>
                           <varRef name="valuez" slot="13"/>
                          </ifCall>
                         </arrayBlock>
                        </ifCall>
                       </choose>
                      </let>
                     </choose>
                    </let>
                   </let>
                  </let>
                 </let>
                </forEach>
               </let>
              </choose>
             </choose>
            </let>
           </let>
          </let>
         </let>
        </forEach>
        <let line="767" var="updatedInstanceXML2" as="document-node()" slot="17" eval="7">
         <doc line="768" validation="preserve">
          <let var="instanceXML" as="item()?" slot="18" eval="8">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="getInstance"/>
            <arrayBlock/>
           </ifCall>
           <applyT line="769" mode="Q{}form-check-initial" bSlot="9">
            <varRef role="select" name="instanceXML" slot="18"/>
            <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
             <treat line="770" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
               <check card="1" diag="0|0||ixsl:call">
                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
               </check>
               <str val="getPendingUpdates"/>
               <arrayBlock/>
              </ifCall>
             </treat>
            </withParam>
           </applyT>
          </let>
         </doc>
         <sequence line="773">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
           <check card="1" diag="0|0||ixsl:call">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
           </check>
           <str val="setInstance"/>
           <arrayBlock>
            <varRef name="updatedInstanceXML2" slot="17"/>
           </arrayBlock>
          </ifCall>
          <ufCall line="777" name="Q{http://www.w3.org/2002/xforms}checkRelevantFields" tailCall="false" bSlot="10" eval="7">
           <check card="1" diag="0|0||xforms:checkRelevantFields">
            <cvUntyped to="xs:string">
             <attVal name="Q{}data-element" chk="0"/>
            </cvUntyped>
           </check>
          </ufCall>
         </sequence>
        </let>
       </sequence>
      </let>
     </let>
    </let>
   </templateRule>
  </mode>
 </co>
 <co id="11" binds="26 26 27">
  <template name="Q{}xformsjs-main" flags="os" line="31" module="saxon-xforms.xsl" slots="9">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="32">
    <param name="Q{}xforms-doc" slot="0" as="document-node()?">
     <empty role="select"/>
     <treat role="conversion" as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);" diag="8|0|XTTE0590|xforms-doc">
      <check card="?" diag="8|0|XTTE0590|xforms-doc">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <param line="33" name="Q{}xforms-file" slot="1" as="xs:string?">
     <empty role="select"/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|xforms-file">
      <check card="?" diag="8|0|XTTE0590|xforms-file">
       <cvUntyped to="xs:string">
        <data>
         <supplied slot="1"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <param line="34" name="Q{}instance-xml" slot="2" as="document-node()?">
     <empty role="select"/>
     <treat role="conversion" as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);" diag="8|0|XTTE0590|instance-xml">
      <check card="?" diag="8|0|XTTE0590|instance-xml">
       <supplied slot="2"/>
      </check>
     </treat>
    </param>
    <param line="35" name="Q{}xFormsId" slot="3" as="xs:string">
     <str role="select" val="xForm"/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|xFormsId">
      <check card="1" diag="8|0|XTTE0590|xFormsId">
       <cvUntyped to="xs:string">
        <data>
         <supplied slot="3"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <let line="43" var="xforms-doci" as="document-node()?" slot="4" eval="7">
     <choose>
      <fn name="empty">
       <varRef name="xforms-doc" slot="0"/>
      </fn>
      <fn name="doc">
       <varRef name="xforms-file" slot="1"/>
      </fn>
      <true/>
      <varRef name="xforms-doc" slot="0"/>
     </choose>
     <let line="45" var="instance-doc" as="document-node()" slot="5" eval="7">
      <doc line="47" validation="preserve">
       <choose>
        <fn name="empty">
         <varRef name="instance-xml" slot="2"/>
        </fn>
        <copyOf line="48" flags="vc">
         <slash>
          <slash>
           <slash>
            <slash simple="1">
             <varRef name="xforms-doci" slot="4"/>
             <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
            </slash>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
           </slash>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}instance)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='instance';"/>
          </slash>
          <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
         </slash>
        </copyOf>
        <true/>
        <copyOf line="51" flags="vc">
         <varRef name="instance-xml" slot="2"/>
        </copyOf>
       </choose>
      </doc>
      <let line="58" var="bindings" as="map(xs:string, element(Q{http://www.w3.org/2002/xforms}bind))" slot="6" eval="8">
       <ifCall line="60" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <forEach>
         <slash>
          <slash>
           <slash simple="1">
            <varRef name="xforms-doci" slot="4"/>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
           </slash>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
          </slash>
          <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}bind)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='bind';"/>
         </slash>
         <ifCall line="76" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <check card="1" diag="0|0||map:entry">
           <cast as="xs:string" emptiable="1">
            <choose>
             <fn name="exists">
              <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
             </fn>
             <attVal name="Q{}id" chk="0"/>
             <true/>
             <attVal name="Q{}nodeset" chk="0"/>
            </choose>
           </cast>
          </check>
          <dot type="element(Q{http://www.w3.org/2002/xforms}bind)"/>
         </ifCall>
        </forEach>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <let line="100" var="RelevantBindings" as="map(xs:string, xs:string)" slot="7" eval="7">
        <treat line="102" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|RelevantBindings">
         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <forEach>
           <ifCall line="98" name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
            <varRef name="bindings" slot="6"/>
           </ifCall>
           <let line="103" var="bindingNode" as="element(Q{http://www.w3.org/2002/xforms}bind)" slot="8" eval="7">
            <check card="1" diag="3|0|XTTE0570|bindingNode">
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
              <varRef name="bindings" slot="6"/>
              <cast as="xs:string" emptiable="0">
               <dot type="xs:anyAtomicType"/>
              </cast>
             </ifCall>
            </check>
            <choose line="105">
             <fn name="exists">
              <filter flags="b">
               <varRef name="bindingNode" slot="8"/>
               <fn name="exists">
                <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
               </fn>
              </filter>
             </fn>
             <ifCall line="107" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
              <check line="106" card="1" diag="3|0|XTTE0570|keyi">
               <cast as="xs:string" emptiable="1">
                <data>
                 <slash simple="1">
                  <varRef name="bindingNode" slot="8"/>
                  <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                 </slash>
                </data>
               </cast>
              </check>
              <cast as="xs:string" emptiable="1">
               <data>
                <slash simple="1">
                 <varRef name="bindingNode" slot="8"/>
                 <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                </slash>
               </data>
              </cast>
             </ifCall>
            </choose>
           </let>
          </forEach>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
        </treat>
        <sequence line="120">
         <choose>
          <gc op="=" card="M:N" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
           <data>
            <slash>
             <slash simple="1">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
              <axis name="descendant" nodeTest="element(Q{}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='script';"/>
             </slash>
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            </slash>
           </data>
           <data>
            <gVarRef name="Q{}xforms-cache-id" bSlot="0"/>
           </data>
          </gc>
          <sequence line="121">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setXFormsDoc"/>
            <arrayBlock>
             <varRef name="xforms-doc" slot="0"/>
            </arrayBlock>
           </ifCall>
           <ifCall line="122" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setXFormsID"/>
            <arrayBlock>
             <varRef name="xFormsId" slot="3"/>
            </arrayBlock>
           </ifCall>
           <ifCall line="123" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setRelevantMap"/>
            <arrayBlock>
             <varRef name="RelevantBindings" slot="7"/>
            </arrayBlock>
           </ifCall>
          </sequence>
          <true/>
          <sequence line="127">
           <forEach>
            <slash simple="1">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
             <axis name="descendant" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
            </slash>
            <resultDoc line="128" global="#&#xA;#Mon Jun 18 17:24:16 BST 2018&#xA;indent=no&#xA;doctype-system=http\://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#xA;encoding=utf-8&#xA;doctype-public=-//W3C//DTD XHTML 1.0 Transitional//EN&#xA;omit-xml-declaration=no&#xA;method=html&#xA;" local="#&#xA;#Mon Jun 18 17:24:16 BST 2018&#xA;">
             <str role="href" val="?."/>
             <elem role="content" line="129" name="script" nsuri="" namespaces="rdf xhtml js in fn map array ev">
              <sequence>
               <att name="type" flags="l">
                <str val="text/javascript"/>
               </att>
               <att name="id" flags="l">
                <fn name="string-join">
                 <convert from="xs:anyAtomicType" to="xs:string">
                  <data>
                   <mergeAdj>
                    <gVarRef name="Q{}xforms-cache-id" bSlot="1"/>
                   </mergeAdj>
                  </data>
                 </convert>
                 <str val=" "/>
                </fn>
               </att>
               <valueOf flags="l">
                <str val="                &#xA;                            var XFormsDoc = null;&#xA;                            var defaultInstanceDoc = null;&#xA;                            var instanceDoc = null;&#xA;                            var pendingUpdatesMap = null;&#xA;                            var updatesMap = null;&#xA;                            var XFormsID= 'xForm';&#xA;                            var actions = {};&#xA;                            var relevantMap = {};&#xA;                            &#xA;                            var getCurrentDate = function(){&#xA;                            var today = new Date();&#xA;                            var dd = today.getDate();&#xA;                            var mm = today.getMonth()+1; //January is 0!&#xA;                            var yyyy = today.getFullYear();&#xA;                            &#xA;                            if(dd &lt; 10) {&#xA;                            dd = '0'+dd&#xA;                            } &#xA;                            &#xA;                            if(mm &lt; 10) {&#xA;                            mm = '0'+mm&#xA;                            } &#xA;                            &#xA;                            today = yyyy + '-' + mm + '-' + dd;&#xA;                            return today;&#xA;                            }&#xA;                            &#xA;                            &#xA;                            var setXFormsDoc = function(doc) {&#xA;                                XFormsDoc = doc;&#xA;                            }&#xA;                            &#xA;                            var getXFormsDoc = function() {&#xA;                                return XFormsDoc;&#xA;                            }&#xA;                            var setXFormsID = function(id) {&#xA;                                XFormsID = id;&#xA;                            }&#xA;                            &#xA;                            var getXFormsID = function() {&#xA;                                return XFormsID;&#xA;                            }&#xA;                            &#xA;                            var setInstance = function(doc) {&#xA;                            instanceDoc = doc;&#xA;                            }&#xA;                            &#xA;                            var getInstance = function() {&#xA;                            return instanceDoc;&#xA;                            }&#xA;                            &#xA;                            var setDefaultInstance = function(doc) {&#xA;                            defaultInstanceDoc = doc;&#xA;                            }&#xA;                            &#xA;                            var getDefaultInstance = function() {&#xA;                            return defaultInstanceDoc;&#xA;                            }&#xA;                            &#xA;                            var setPendingUpdates = function(map1) {&#xA;                            pendingUpdatesMap = map1;&#xA;                            }&#xA;                            &#xA;                            var clearPendingUpdates = function() {&#xA;                            pendingUpdatesMap = null;&#xA;                            }&#xA;                            &#xA;                            var getPendingUpdates = function() {&#xA;                            return pendingUpdatesMap;&#xA;                            }&#xA;                            &#xA;                            var setUpdates = function(map1) {&#xA;                                updatesMap = map1;&#xA;                            }&#xA;                            &#xA;                            var clearUpdates = function() {&#xA;                                updatesMap = null;&#xA;                            }&#xA;                            &#xA;                            var getUpdates = function() {&#xA;                            return updatesMap;&#xA;                            }&#xA;                            &#xA;                            var addAction = function(name, value){&#xA;                                actions[name] = value;&#xA;                            }&#xA;&#xA;                            var getAction = function(name){&#xA;                                return actions[name];&#xA;                            }&#xA;                            &#xA;                            var updateAction = function(actioni, key, value){&#xA;                                actioni[key] = value;&#xA;                                return actioni;&#xA;                            }&#xA;                            &#xA;                            var setRelevantMap = function(map1) {&#xA;                                relevantMap = map1;                            &#xA;                            }&#xA;                            &#xA;                            var getRelevantMap = function() {&#xA;                                return relevantMap;&#xA;                            }&#xA;                            &#xA;  &#xA;                            var startTime = function(name) {&#xA;                                console.time(name);&#xA;                            }&#xA;                            &#xA;                            var endTime = function(name) {&#xA;                            console.timeEnd(name);&#xA;                            }&#xA;                            &#xA;                        "/>
               </valueOf>
              </sequence>
             </elem>
            </resultDoc>
           </forEach>
           <ifCall line="247" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setXFormsDoc"/>
            <arrayBlock>
             <varRef name="xforms-doc" slot="0"/>
            </arrayBlock>
           </ifCall>
           <ifCall line="248" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setRelevantMap"/>
            <arrayBlock>
             <varRef name="RelevantBindings" slot="7"/>
            </arrayBlock>
           </ifCall>
          </sequence>
         </choose>
         <choose line="253">
          <fn name="exists">
           <varRef name="instance-doc" slot="5"/>
          </fn>
          <ifCall line="254" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
           <check card="1" diag="0|0||ixsl:call">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
           </check>
           <str val="setInstance"/>
           <arrayBlock>
            <varRef name="instance-doc" slot="5"/>
           </arrayBlock>
          </ifCall>
         </choose>
         <resultDoc line="259" global="#&#xA;#Mon Jun 18 17:24:16 BST 2018&#xA;indent=no&#xA;doctype-system=http\://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#xA;encoding=utf-8&#xA;doctype-public=-//W3C//DTD XHTML 1.0 Transitional//EN&#xA;omit-xml-declaration=no&#xA;method=html&#xA;" local="#&#xA;#Mon Jun 18 17:24:16 BST 2018&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xA;">
          <fn role="href" name="concat">
           <str val="#"/>
           <varRef name="xFormsId" slot="3"/>
          </fn>
          <applyT role="content" line="260" bSlot="2">
           <slash role="select" simple="1">
            <varRef name="xforms-doci" slot="4"/>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
           </slash>
           <withParam name="Q{}instance1" as="document-node()">
            <varRef line="261" name="instance-doc" slot="5"/>
           </withParam>
           <withParam name="Q{}bindings" as="map(xs:string, node())">
            <varRef line="262" name="bindings" slot="6"/>
           </withParam>
           <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
            <treat line="85" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|submissions">
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
              <forEach>
               <slash>
                <slash>
                 <slash simple="1">
                  <varRef name="xforms-doci" slot="4"/>
                  <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
                 </slash>
                 <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
                </slash>
                <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}submission)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='submission';"/>
               </slash>
               <ifCall line="86" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
                <check card="1" diag="0|0||map:entry">
                 <cast as="xs:string" emptiable="1">
                  <attVal name="Q{}ref" chk="0"/>
                 </cast>
                </check>
                <cast as="xs:string" emptiable="1">
                 <attVal name="Q{}action" chk="0"/>
                </cast>
               </ifCall>
              </forEach>
              <map size="2">
               <str val="duplicates"/>
               <str val="reject"/>
               <str val="duplicates-error-code"/>
               <str val="XTDE3365"/>
              </map>
             </ifCall>
            </treat>
           </withParam>
          </applyT>
         </resultDoc>
        </sequence>
       </let>
      </let>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="25" binds="">
  <mode name="Q{}set-field" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.25" seq="2" rank="0" minImp="0" slots="1" flags="s" line="3074" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:textarea" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='textarea'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3075">
     <param name="Q{}value" slot="0" flags="t">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <ifCall line="3077" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
      <dot type="*:textarea"/>
      <str val="value"/>
     </ifCall>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="1" rank="0" minImp="0" slots="1" flags="s" line="3066" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:select" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='select'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3067">
     <param name="Q{}value" slot="0" flags="t">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <forEach line="3069">
      <filter flags="b">
       <axis name="child" nodeTest="element(Q{}option)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='option';"/>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="value" slot="0"/>
        </data>
        <attVal name="Q{}value" chk="0"/>
       </gc>
      </filter>
      <ifCall line="3070" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
       <str val="selected"/>
       <true/>
       <dot type="element(Q{}option)"/>
      </ifCall>
     </forEach>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="0" rank="0" minImp="0" slots="1" flags="s" line="3045" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:input" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='input'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3046">
     <param name="Q{}value" slot="0" flags="t">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <forEach line="3049">
      <dot type="*:input"/>
      <choose line="3051">
       <and op="and">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
        </fn>
        <gc op="=" card="1:1" comp="CCC">
         <attVal name="Q{}type" chk="0"/>
         <str val="checkbox"/>
        </gc>
       </and>
       <ifCall line="3052" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
        <str val="checked"/>
        <choose>
         <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
          <data>
           <varRef name="value" slot="0"/>
          </data>
          <str val="true"/>
         </gc>
         <check card="?" diag="0|1||ixsl:set-property">
          <varRef name="value" slot="0"/>
         </check>
         <true/>
         <str val=""/>
        </choose>
        <dot type="*:input"/>
       </ifCall>
       <true/>
       <ifCall line="3055" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
        <str val="value"/>
        <check card="?" diag="0|1||ixsl:set-property">
         <varRef name="value" slot="0"/>
        </check>
        <dot type="*:input"/>
       </ifCall>
      </choose>
     </forEach>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="28" binds="16">
  <template name="Q{}HTTPsubmit" cxt="map(*)" jsTest="return SaxonJS.U.isMap(item)" flags="s" line="914" module="saxon-xforms.xsl" slots="1">
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="919" var="responseXML" as="item()*" slot="0" eval="3">
    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
     <dot type="map(*)"/>
     <str val="body"/>
    </ifCall>
    <choose line="924">
     <fn name="empty">
      <varRef name="responseXML" slot="0"/>
     </fn>
     <callT line="925" name="serverError" bSlot="0" flags="t">
      <withParam name="Q{}responseMap" flags="c" as="map(*)">
       <dot line="926" type="map(*)"/>
      </withParam>
     </callT>
     <true/>
     <message line="932">
      <sequence role="select">
       <valueOf>
        <str val="Response: "/>
       </valueOf>
       <valueOf>
        <fn name="serialize">
         <varRef name="responseXML" slot="0"/>
        </fn>
       </valueOf>
      </sequence>
      <str role="terminate" val="no"/>
      <str role="error" val="Q{http://www.w3.org/2005/xqt-errors}XTMM9000"/>
     </message>
    </choose>
   </let>
  </template>
 </co>
 <co id="29" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}foo" line="43" module="xforms-function-library.xsl" eval="7" flags="pU" as="xs:boolean" slots="1">
   <arg name="num" as="xs:integer"/>
   <compareToInt role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="46" op="lt" val="5">
    <varRef name="num" slot="0"/>
   </compareToInt>
  </function>
 </co>
 <co id="30" binds="3 13 6 31 11 3 32 28">
  <mode name="Q{http://saxonica.com/ns/interactiveXSLT}onclick" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.5" seq="1" rank="0" minImp="0" slots="0" flags="s" line="1941" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}select)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='select';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1941" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
     </fn>
    </p.withPredicate>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="2" rank="0" minImp="0" slots="29" flags="s" line="1944" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}button)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='button';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1944" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
     </fn>
    </p.withPredicate>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1949" var="action-map" as="item()?" slot="0" eval="8">
     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
      <check card="1" diag="0|0||ixsl:call">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
      </check>
      <str val="getAction"/>
      <arrayBlock>
       <fn name="string">
        <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
       </fn>
      </arrayBlock>
     </ifCall>
     <let line="1959" var="updatedInstanceXML" as="document-node()" slot="1" eval="7">
      <doc line="1960" validation="preserve">
       <let var="instanceXML" as="item()?" slot="2" eval="8">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="getInstance"/>
         <arrayBlock/>
        </ifCall>
        <applyT line="1961" mode="Q{}form-check-initial" bSlot="0">
         <varRef role="select" name="instanceXML" slot="2"/>
        </applyT>
       </let>
      </doc>
      <let line="1964" var="xforms-doc" as="item()?" slot="3" eval="8">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getXFormsDoc"/>
        <arrayBlock/>
       </ifCall>
       <forEach line="1972">
        <ifCall line="1951" name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
         <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:keys">
          <check card="1" diag="0|0||map:keys">
           <varRef name="action-map" slot="0"/>
          </check>
         </treat>
        </ifCall>
        <choose line="1975">
         <gc op="=" card="1:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
          <dot type="xs:anyAtomicType"/>
          <str val="insert"/>
         </gc>
         <let line="2004" var="vv:v0" as="item()" slot="4" eval="13">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <forEach line="1981">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
            <ifCall line="1978" name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
              <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
               <check card="1" diag="0|0||map:get">
                <varRef name="action-map" slot="0"/>
               </check>
              </treat>
              <str val="insert"/>
             </ifCall>
            </ifCall>
           </ifCall>
           <let line="1983" var="map-ref" as="item()*" slot="5" eval="3">
            <let var="vv:LHS914504136" as="function(*)" slot="6" eval="7">
             <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS914504136">
              <dot/>
             </treat>
             <choose>
              <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
               <varRef name="vv:LHS914504136" slot="6"/>
              </instance>
              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
               <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                <varRef name="vv:LHS914504136" slot="6"/>
               </treat>
               <str val="ref"/>
              </ifCall>
              <true/>
              <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
             </choose>
            </let>
            <let line="2035" var="vv:v3" as="xs:anyAtomicType*" slot="7" eval="4">
             <data>
              <varRef name="map-ref" slot="5"/>
             </data>
             <let line="2009" var="vv:v2" as="xs:anyAtomicType*" slot="8" eval="4">
              <data>
               <varRef name="map-ref" slot="5"/>
              </data>
              <let line="2006" var="vv:v1" as="xs:anyAtomicType*" slot="9" eval="4">
               <data>
                <varRef name="map-ref" slot="5"/>
               </data>
               <let line="1984" var="insert-node" as="node()" slot="10" eval="7">
                <treat line="1987" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|insert-node">
                 <check card="1" diag="3|0|XTTE0570|insert-node">
                  <evaluate dxns="">
                   <fn role="xpath" name="concat">
                    <atomSing card="?" diag="0|0||fn:concat">
                     <varRef name="map-ref" slot="5"/>
                    </atomSing>
                    <str val="["/>
                    <str val="last()"/>
                    <str val="]"/>
                   </fn>
                   <varRef role="cxt" name="updatedInstanceXML" slot="1"/>
                   <str role="sa" val="no"/>
                   <map role="wp" size="0"/>
                  </evaluate>
                 </check>
                </treat>
                <let line="1994" var="instance-with-insert" as="document-node()" slot="11" eval="7">
                 <doc line="1996" validation="preserve">
                  <applyT mode="Q{}insert-node" bSlot="1">
                   <varRef role="select" name="updatedInstanceXML" slot="1"/>
                   <withParam name="Q{}insert-node" as="node()">
                    <varRef line="1997" name="insert-node" slot="10"/>
                   </withParam>
                   <withParam name="Q{}path" as="xs:string">
                    <fn line="1999" name="concat">
                     <str val="/"/>
                     <atomSing card="?" diag="0|1||fn:concat">
                      <varRef name="map-ref" slot="5"/>
                     </atomSing>
                    </fn>
                   </withParam>
                  </applyT>
                 </doc>
                 <sequence line="2004">
                  <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                   <varRef name="vv:v0" slot="4"/>
                   <str val="setInstance"/>
                   <arrayBlock>
                    <varRef name="instance-with-insert" slot="11"/>
                   </arrayBlock>
                  </ifCall>
                  <let line="2006" var="node-to-copyi" as="element(Q{}div)" slot="12" eval="7">
                   <check card="1" diag="3|0|XTTE0570|node-to-copyi">
                    <docOrder intra="1">
                     <filter flags="b">
                      <slash>
                       <filter flags="b">
                        <slash simple="1">
                         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                         <axis name="descendant" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
                        </slash>
                        <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
                         <varRef name="vv:v1" slot="9"/>
                         <attVal name="Q{}data-repeatable-context" chk="0"/>
                        </gc>
                       </filter>
                       <axis name="child" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
                      </slash>
                      <fn name="empty">
                       <axis name="following-sibling" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
                      </fn>
                     </filter>
                    </docOrder>
                   </check>
                   <let line="2009" var="newNodePosition" as="xs:integer" slot="13" eval="7">
                    <arith op="+" calc="i+i">
                     <fn name="count">
                      <docOrder intra="1">
                       <slash>
                        <filter flags="b">
                         <slash simple="1">
                          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                          <axis name="descendant" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
                         </slash>
                         <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
                          <varRef name="vv:v2" slot="8"/>
                          <attVal name="Q{}data-repeatable-context" chk="0"/>
                         </gc>
                        </filter>
                        <axis name="child" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
                       </slash>
                      </docOrder>
                     </fn>
                     <int val="1"/>
                    </arith>
                    <let line="2011" var="newNodeCPath" as="xs:string" slot="14" eval="7">
                     <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|newNodeCPath">
                      <check card="1" diag="3|0|XTTE0570|newNodeCPath">
                       <cvUntyped to="xs:string">
                        <data>
                         <varRef name="map-ref" slot="5"/>
                        </data>
                       </cvUntyped>
                      </check>
                     </treat>
                     <let line="2014" var="path-updated" as="xs:string" slot="15" eval="7">
                      <choose>
                       <compareToInt op="gt" val="0">
                        <varRef name="newNodePosition" slot="13"/>
                       </compareToInt>
                       <fn name="concat">
                        <varRef name="newNodeCPath" slot="14"/>
                        <str val="["/>
                        <varRef name="newNodePosition" slot="13"/>
                        <str val="]"/>
                       </fn>
                       <true/>
                       <varRef name="newNodeCPath" slot="14"/>
                      </choose>
                      <let line="2021" var="copied-node" as="node()" slot="16" eval="7">
                       <treat line="2022" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|copied-node">
                        <check card="1" diag="3|0|XTTE0570|copied-node">
                         <applyT mode="Q{}update-ref" bSlot="2">
                          <varRef role="select" name="node-to-copyi" slot="12"/>
                          <withParam name="Q{}path">
                           <varRef line="2023" name="map-ref" slot="5"/>
                          </withParam>
                          <withParam name="Q{}position" as="xs:integer">
                           <varRef line="2024" name="newNodePosition" slot="13"/>
                          </withParam>
                         </applyT>
                        </check>
                       </treat>
                       <sequence line="2035">
                        <forEach>
                         <filter flags="b">
                          <slash simple="1">
                           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                           <axis name="descendant" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
                          </slash>
                          <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
                           <varRef name="vv:v3" slot="7"/>
                           <attVal name="Q{}data-repeatable-context" chk="0"/>
                          </gc>
                         </filter>
                         <resultDoc line="2037" global="#&#xA;#Mon Jun 18 17:24:16 BST 2018&#xA;indent=no&#xA;doctype-system=http\://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#xA;encoding=utf-8&#xA;doctype-public=-//W3C//DTD XHTML 1.0 Transitional//EN&#xA;omit-xml-declaration=no&#xA;method=html&#xA;" local="#&#xA;#Mon Jun 18 17:24:16 BST 2018&#xA;method={http\://saxonica.com/ns/interactiveXSLT}append-content&#xA;">
                          <str role="href" val="?."/>
                          <copyOf role="content" line="2038" flags="vc">
                           <varRef name="copied-node" slot="16"/>
                          </copyOf>
                         </resultDoc>
                        </forEach>
                        <forEach line="2046">
                         <filter line="2045" flags="b">
                          <slash simple="1">
                           <varRef name="node-to-copyi" slot="12"/>
                           <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                          </slash>
                          <or op="or">
                           <fn name="exists">
                            <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
                           </fn>
                           <fn name="exists">
                            <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
                           </fn>
                          </or>
                         </filter>
                         <let line="2048" var="dataActionRef" as="xs:string?" slot="17" eval="8">
                          <cvUntyped to="xs:string">
                           <attVal name="Q{}data-action" chk="0"/>
                          </cvUntyped>
                          <choose line="2050">
                           <fn name="exists">
                            <varRef name="dataActionRef" slot="17"/>
                           </fn>
                           <let line="2052" var="actionEvents" as="map(*)?" slot="18" eval="7">
                            <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actionEvents">
                             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                              <check card="1" diag="0|0||ixsl:call">
                               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                              </check>
                              <str val="getAction"/>
                              <arrayBlock>
                               <fn name="string">
                                <varRef name="dataActionRef" slot="17"/>
                               </fn>
                              </arrayBlock>
                             </ifCall>
                            </treat>
                            <let line="2056" var="dataRefForNewNode" as="xs:string?" slot="19" eval="7">
                             <check card="?" diag="3|0|XTTE0570|dataRefForNewNode">
                              <cvUntyped to="xs:string">
                               <data>
                                <slash>
                                 <filter flags="b">
                                  <slash simple="1">
                                   <varRef name="copied-node" slot="16"/>
                                   <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                                  </slash>
                                  <gc op="=" card="1:1" comp="CCC">
                                   <attVal name="Q{}data-old-action" chk="0"/>
                                   <varRef name="dataActionRef" slot="17"/>
                                  </gc>
                                 </filter>
                                 <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
                                </slash>
                               </data>
                              </cvUntyped>
                             </check>
                             <ifCall line="2085" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                              <check card="1" diag="0|0||ixsl:call">
                               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                              </check>
                              <str val="addAction"/>
                              <arrayBlock>
                               <check line="2055" card="1" diag="3|0|XTTE0570|newActionId">
                                <cvUntyped to="xs:string">
                                 <data>
                                  <slash>
                                   <filter flags="b">
                                    <slash simple="1">
                                     <varRef name="copied-node" slot="16"/>
                                     <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                                    </slash>
                                    <gc op="=" card="1:1" comp="CCC">
                                     <attVal name="Q{}data-old-action" chk="0"/>
                                     <varRef name="dataActionRef" slot="17"/>
                                    </gc>
                                   </filter>
                                   <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
                                  </slash>
                                 </data>
                                </cvUntyped>
                               </check>
                               <forEach line="2059">
                                <varRef name="actionEvents" slot="18"/>
                                <let line="2060" var="myContext" as="map(*)" slot="20" eval="7">
                                 <dot type="map(*)"/>
                                 <let line="2062" var="refExsists" as="xs:boolean" slot="21" eval="8">
                                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                                   <varRef name="myContext" slot="20"/>
                                   <str val="@ref"/>
                                  </ifCall>
                                  <choose line="2065">
                                   <and op="and">
                                    <varRef name="refExsists" slot="21"/>
                                    <fn name="exists">
                                     <varRef name="dataRefForNewNode" slot="19"/>
                                    </fn>
                                   </and>
                                   <ifCall line="2068" name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                                    <varRef name="myContext" slot="20"/>
                                    <str val="@ref"/>
                                    <fn name="string">
                                     <varRef name="dataRefForNewNode" slot="19"/>
                                    </fn>
                                   </ifCall>
                                   <varRef line="2070" name="refExsists" slot="21"/>
                                   <ifCall line="2074" name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                                    <varRef name="myContext" slot="20"/>
                                    <str val="@ref"/>
                                    <fn line="2072" name="concat">
                                     <varRef name="path-updated" slot="15"/>
                                     <fn line="2071" name="substring">
                                      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|contextRef">
                                       <check card="1" diag="3|0|XTTE0570|contextRef">
                                        <cvUntyped to="xs:string">
                                         <data>
                                          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                                           <varRef name="myContext" slot="20"/>
                                           <str val="@ref"/>
                                          </ifCall>
                                         </data>
                                        </cvUntyped>
                                       </check>
                                      </treat>
                                      <arith line="2072" op="+" calc="i+i">
                                       <fn name="string-length">
                                        <varRef name="path-updated" slot="15"/>
                                       </fn>
                                       <int val="1"/>
                                      </arith>
                                     </fn>
                                    </fn>
                                   </ifCall>
                                   <true/>
                                   <dot line="2077" type="map(*)"/>
                                  </choose>
                                 </let>
                                </let>
                               </forEach>
                              </arrayBlock>
                             </ifCall>
                            </let>
                           </let>
                          </choose>
                         </let>
                        </forEach>
                       </sequence>
                      </let>
                     </let>
                    </let>
                   </let>
                  </let>
                 </sequence>
                </let>
               </let>
              </let>
             </let>
            </let>
           </let>
          </forEach>
         </let>
         <gc line="2093" op="=" card="1:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
          <dot type="xs:anyAtomicType"/>
          <str val="delete"/>
         </gc>
         <let line="2099" var="action-refi" as="xs:string?" slot="22" eval="7">
          <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|action-refi">
           <check card="?" diag="3|0|XTTE0570|action-refi">
            <cvUntyped to="xs:string">
             <data>
              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
               <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                <check card="1" diag="0|0||map:get">
                 <varRef name="action-map" slot="0"/>
                </check>
               </treat>
               <str val="@ref"/>
              </ifCall>
             </data>
            </cvUntyped>
           </check>
          </treat>
          <forEach line="2101">
           <ifCall line="2096" name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
             <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
              <check card="1" diag="0|0||map:get">
               <varRef name="action-map" slot="0"/>
              </check>
             </treat>
             <str val="delete"/>
            </ifCall>
           </ifCall>
           <let line="2102" var="if-clause" as="xs:string" slot="23" eval="7">
            <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|if-clause">
             <check card="1" diag="3|0|XTTE0570|if-clause">
              <cvUntyped to="xs:string">
               <let var="vv:LHS166239592" as="function(*)" slot="24" eval="7">
                <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS166239592">
                 <dot/>
                </treat>
                <choose>
                 <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                  <varRef name="vv:LHS166239592" slot="24"/>
                 </instance>
                 <data>
                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                   <treat module="saxon-xforms.xsl" line="2102" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                    <varRef name="vv:LHS166239592" slot="24"/>
                   </treat>
                   <str val="if"/>
                  </ifCall>
                 </data>
                 <true/>
                 <data>
                  <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                 </data>
                </choose>
               </let>
              </cvUntyped>
             </check>
            </treat>
            <let line="2103" var="delete-ref" as="xs:string" slot="25" eval="7">
             <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|delete-ref">
              <check card="1" diag="3|0|XTTE0570|delete-ref">
               <cvUntyped to="xs:string">
                <let var="vv:LHS991505714" as="function(*)" slot="26" eval="7">
                 <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS991505714">
                  <dot/>
                 </treat>
                 <choose>
                  <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                   <varRef name="vv:LHS991505714" slot="26"/>
                  </instance>
                  <data>
                   <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                    <treat module="saxon-xforms.xsl" line="2103" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                     <varRef name="vv:LHS991505714" slot="26"/>
                    </treat>
                    <str val="ref"/>
                   </ifCall>
                  </data>
                  <true/>
                  <data>
                   <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                  </data>
                 </choose>
                </let>
               </cvUntyped>
              </check>
             </treat>
             <let line="2105" var="if-statement" as="xs:boolean" slot="27" eval="7">
              <choose line="2107">
               <fn name="empty">
                <varRef name="if-clause" slot="23"/>
               </fn>
               <true/>
               <true/>
               <treat line="2110" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|if-statement">
                <check card="1" diag="3|0|XTTE0570|if-statement">
                 <cvUntyped to="xs:boolean">
                  <data>
                   <evaluate dxns="">
                    <varRef role="xpath" name="if-clause" slot="23"/>
                    <varRef role="cxt" name="updatedInstanceXML" slot="1"/>
                    <str role="sa" val="no"/>
                    <map role="wp" size="0"/>
                   </evaluate>
                  </data>
                 </cvUntyped>
                </check>
               </treat>
              </choose>
              <choose line="2119">
               <varRef name="if-statement" slot="27"/>
               <let line="2120" var="instance-with-delete" as="document-node()" slot="28" eval="7">
                <doc line="2122" validation="preserve">
                 <applyT mode="Q{}delete-node" bSlot="3">
                  <varRef role="select" name="updatedInstanceXML" slot="1"/>
                  <withParam name="Q{}path" as="xs:string">
                   <choose line="2116">
                    <vc op="eq" onEmpty="0" comp="CCC">
                     <varRef name="delete-ref" slot="25"/>
                     <str val="."/>
                    </vc>
                    <fn name="concat">
                     <str val="/"/>
                     <varRef name="action-refi" slot="22"/>
                    </fn>
                    <true/>
                    <fn name="concat">
                     <choose>
                      <fn name="exists">
                       <varRef name="action-refi" slot="22"/>
                      </fn>
                      <fn name="concat">
                       <str val="/"/>
                       <varRef name="action-refi" slot="22"/>
                      </fn>
                      <true/>
                      <str val=""/>
                     </choose>
                     <str val="/"/>
                     <varRef name="delete-ref" slot="25"/>
                    </fn>
                   </choose>
                  </withParam>
                 </applyT>
                </doc>
                <sequence line="2131">
                 <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                  <check card="1" diag="0|0||ixsl:call">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                  </check>
                  <str val="setInstance"/>
                  <arrayBlock>
                   <varRef name="instance-with-delete" slot="28"/>
                  </arrayBlock>
                 </ifCall>
                 <callT line="2144" name="xformsjs-main" bSlot="4">
                  <withParam name="Q{}xforms-doc" flags="c" as="document-node()?">
                   <treat line="2145" as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);" diag="8|0|XTTE0590|xforms-doc">
                    <varRef name="xforms-doc" slot="3"/>
                   </treat>
                  </withParam>
                  <withParam name="Q{}instance-xml" flags="c" as="document-node()">
                   <varRef line="2146" name="instance-with-delete" slot="28"/>
                  </withParam>
                  <withParam name="Q{}xFormsId" flags="c" as="xs:string">
                   <treat line="2147" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|xFormsId">
                    <check card="1" diag="8|0|XTTE0590|xFormsId">
                     <cvUntyped to="xs:string">
                      <data>
                       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                        <check card="1" diag="0|0||ixsl:call">
                         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                        </check>
                        <str val="getXFormsID"/>
                        <arrayBlock/>
                       </ifCall>
                      </data>
                     </cvUntyped>
                    </check>
                   </treat>
                  </withParam>
                 </callT>
                </sequence>
               </let>
              </choose>
             </let>
            </let>
           </let>
          </forEach>
         </let>
        </choose>
       </forEach>
      </let>
     </let>
    </let>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="0" rank="0" minImp="0" slots="4" flags="s" line="840" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}button)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='button';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="840" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-submit)" jsTest="return item.name==='data-submit'"/>
     </fn>
    </p.withPredicate>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="842" var="instanceXML" as="document-node(element(Q{}Document))" slot="0" eval="7">
     <treat as="document-node(element(Q{}Document))" jsTest="function e(item) {var q=SaxonJS.U.nameOfNode(item); return q.uri===''&amp;&amp;q.local==='Document';};return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9 || item.nodeType===11) &amp;&amp; SaxonJS.U.Axis.child(item).filter(e).next();" diag="3|0|XTTE0570|instanceXML">
      <check card="1" diag="3|0|XTTE0570|instanceXML">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getInstance"/>
        <arrayBlock/>
       </ifCall>
      </check>
     </treat>
     <let line="847" var="updatedInstanceXML" as="document-node(element(Q{}Document))" slot="1" eval="7">
      <treat line="849" as="document-node(element(Q{}Document))" jsTest="function e(item) {var q=SaxonJS.U.nameOfNode(item); return q.uri===''&amp;&amp;q.local==='Document';};return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9 || item.nodeType===11) &amp;&amp; SaxonJS.U.Axis.child(item).filter(e).next();" diag="3|0|XTTE0570|updatedInstanceXML">
       <doc>
        <applyT mode="Q{}form-check-initial" bSlot="5">
         <varRef role="select" name="instanceXML" slot="0"/>
        </applyT>
       </doc>
      </treat>
      <let line="855" var="required-fieldsi" as="element()*" slot="2" eval="8">
       <filter flags="b">
        <slash simple="1">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
         <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}data-required)" jsTest="return item.name==='data-required'"/>
        </fn>
       </filter>
       <let line="858" var="required-fields-check" as="item()*" slot="3" eval="3">
        <ufCall name="Q{http://www.w3.org/2002/xforms}check-required-fields" tailCall="false" bSlot="6" eval="6">
         <varRef name="updatedInstanceXML" slot="1"/>
        </ufCall>
        <choose line="877">
         <fn name="empty">
          <varRef name="required-fields-check" slot="3"/>
         </fn>
         <ifCall line="890" name="Q{http://saxonica.com/ns/interactiveXSLT}schedule-action" type="item()*">
          <int val="0"/>
          <empty/>
          <callT name="HTTPsubmit" bSlot="7"/>
          <ifCall line="885" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
           <sequence>
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="body"/>
             <treat line="870" as="document-node(element(Q{}submit))" jsTest="function e(item) {var q=SaxonJS.U.nameOfNode(item); return q.uri===''&amp;&amp;q.local==='submit';};return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9 || item.nodeType===11) &amp;&amp; SaxonJS.U.Axis.child(item).filter(e).next();" diag="3|0|XTTE0570|requestBody">
              <doc>
               <elem name="submit" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
                <slash simple="1">
                 <varRef name="updatedInstanceXML" slot="1"/>
                 <axis name="child" nodeTest="element(Q{}Document)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='Document';"/>
                </slash>
               </elem>
              </doc>
             </treat>
            </ifCall>
            <map size="1">
             <str val="method"/>
             <str val="POST"/>
            </map>
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
             <str val="href"/>
             <doc line="864" flags="t" validation="preserve">
              <valueOf flags="l">
               <fn name="serialize">
                <axis name="attribute" nodeTest="attribute(Q{}data-submit)" jsTest="return item.name==='data-submit'"/>
               </fn>
              </valueOf>
             </doc>
            </ifCall>
            <map size="1">
             <str val="media-type"/>
             <str val="application/xml"/>
            </map>
           </sequence>
           <map size="2">
            <str val="duplicates"/>
            <str val="reject"/>
            <str val="duplicates-error-code"/>
            <str val="XQDY0137"/>
           </map>
          </ifCall>
         </ifCall>
         <true/>
         <ifCall line="906" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="alert"/>
          <arrayBlock>
           <fn name="serialize">
            <doc line="897" flags="t" validation="preserve">
             <forEach>
              <varRef name="required-fields-check" slot="3"/>
              <valueOf line="901" flags="l">
               <fn name="concat">
                <str val="Value error see: "/>
                <fn name="serialize">
                 <slash simple="1">
                  <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
                   <dot line="898"/>
                  </treat>
                  <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
                 </slash>
                </fn>
                <str val="&#xA;"/>
               </fn>
              </valueOf>
             </forEach>
            </doc>
           </fn>
          </arrayBlock>
         </ifCall>
        </choose>
       </let>
      </let>
     </let>
    </let>
   </templateRule>
  </mode>
 </co>
 <co id="26" vis="PUBLIC" binds="">
  <globalParam name="Q{}xforms-cache-id" type="item()*" line="25" module="saxon-xforms.xsl" visibility="PUBLIC" jsAcceptor="return val;" jsCardCheck="function c() {return true;};">
   <str val="xforms-cache"/>
  </globalParam>
 </co>
 <co id="33" binds="34">
  <function name="Q{http://www.w3.org/2002/xforms}impose" line="19" module="xforms-function-library.xsl" eval="8" flags="pU" as="xs:string" slots="2">
   <arg name="input" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="25" var="vv:v0" as="xs:anyAtomicType*" slot="1" eval="4">
    <data>
     <gVarRef name="Q{}xform-functions" bSlot="0"/>
    </data>
    <fn line="40" name="string-join">
     <analyzeString line="22">
      <varRef role="select" name="input" slot="0"/>
      <str role="regex" val="\i\c*\("/>
      <str role="flags" val=""/>
      <choose role="matching" line="25">
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <varRef name="vv:v0" slot="1"/>
        <fn name="substring-before">
         <dot type="xs:string"/>
         <str val="("/>
        </fn>
       </gc>
       <fn line="26" name="concat">
        <str val="xforms:"/>
        <dot type="xs:string"/>
       </fn>
       <true/>
       <dot line="29" type="xs:string"/>
      </choose>
      <dot role="nonMatching" line="34" type="xs:string"/>
     </analyzeString>
    </fn>
   </let>
  </function>
 </co>
 <co id="34" binds="">
  <globalVariable name="Q{}xform-functions" type="item()+" line="17" module="xforms-function-library.xsl" visibility="PRIVATE" jsAcceptor="return val;" jsCardCheck="function c(n) {return n&gt;=1;};">
   <sequence ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="17">
    <literal count="4">
     <str val="index"/>
     <str val="avg"/>
     <str val="foo"/>
     <str val="current-date"/>
    </literal>
    <slash simple="1">
     <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
      <dot flags="a"/>
     </treat>
     <axis name="child" nodeTest="element(Q{}random)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='random';"/>
    </slash>
   </sequence>
  </globalVariable>
 </co>
 <co id="35" binds="">
  <globalVariable name="Q{}debugTiming" type="xs:boolean" line="28" module="saxon-xforms.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.boolean.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <false/>
  </globalVariable>
 </co>
 <co id="15" binds="15 15 15">
  <mode name="Q{}jxml-xml" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.25" seq="2" rank="0" minImp="0" slots="2" flags="s" line="2849" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:array" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='array'"/>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2850" var="keyVar" as="attribute(Q{}key)?" slot="0" eval="8">
     <axis name="attribute" nodeTest="attribute(Q{}key)" jsTest="return item.name==='key'"/>
     <let line="2853" var="vv:v0" as="xs:string" slot="1" eval="13">
      <fn name="string">
       <convert from="xs:untypedAtomic" to="xs:string">
        <data>
         <varRef name="keyVar" slot="0"/>
        </data>
       </convert>
      </fn>
      <forEach line="2852">
       <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       <compElem line="2853">
        <varRef role="name" name="vv:v0" slot="1"/>
        <applyT role="content" line="2854" mode="Q{}jxml-xml" bSlot="0">
         <dot role="select" type="element()"/>
        </applyT>
       </compElem>
      </forEach>
     </let>
    </let>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="1" rank="0" minImp="0" slots="0" flags="s" line="2835" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:number" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='number'"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2837">
     <fn name="starts-with">
      <cvUntyped to="xs:string">
       <attVal name="Q{}key" chk="0"/>
      </cvUntyped>
      <str val="@"/>
     </fn>
     <compAtt line="2838">
      <fn role="name" name="substring">
       <cvUntyped to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </cvUntyped>
       <int val="2"/>
      </fn>
      <fn role="select" name="string-join">
       <convert from="xs:untypedAtomic" to="xs:string">
        <data>
         <mergeAdj>
          <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
         </mergeAdj>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </compAtt>
     <true/>
     <compElem line="2841">
      <fn role="name" name="string">
       <convert from="xs:untypedAtomic" to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </convert>
      </fn>
      <valueOf role="content" line="2842" flags="l">
       <fn name="string-join">
        <convert from="xs:untypedAtomic" to="xs:string">
         <data>
          <mergeAdj>
           <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
          </mergeAdj>
         </data>
        </convert>
        <str val=" "/>
       </fn>
      </valueOf>
     </compElem>
    </choose>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="1" rank="0" minImp="0" slots="0" flags="s" line="2835" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:string" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='string'"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2837">
     <fn name="starts-with">
      <cvUntyped to="xs:string">
       <attVal name="Q{}key" chk="0"/>
      </cvUntyped>
      <str val="@"/>
     </fn>
     <compAtt line="2838">
      <fn role="name" name="substring">
       <cvUntyped to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </cvUntyped>
       <int val="2"/>
      </fn>
      <fn role="select" name="string-join">
       <convert from="xs:untypedAtomic" to="xs:string">
        <data>
         <mergeAdj>
          <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
         </mergeAdj>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </compAtt>
     <true/>
     <compElem line="2841">
      <fn role="name" name="string">
       <convert from="xs:untypedAtomic" to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </convert>
      </fn>
      <valueOf role="content" line="2842" flags="l">
       <fn name="string-join">
        <convert from="xs:untypedAtomic" to="xs:string">
         <data>
          <mergeAdj>
           <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
          </mergeAdj>
         </data>
        </convert>
        <str val=" "/>
       </fn>
      </valueOf>
     </compElem>
    </choose>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="0" rank="0" minImp="0" slots="0" flags="s" line="2811" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:map" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='map'"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2813">
     <fn name="empty">
      <axis name="attribute" nodeTest="attribute(Q{}key)" jsTest="return item.name==='key'"/>
     </fn>
     <applyT line="2815" mode="Q{}jxml-xml" flags="t" bSlot="1">
      <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </applyT>
     <fn line="2820" name="starts-with">
      <cvUntyped to="xs:string">
       <attVal name="Q{}key" chk="0"/>
      </cvUntyped>
      <str val="@"/>
     </fn>
     <compAtt line="2821">
      <fn role="name" name="substring">
       <cvUntyped to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </cvUntyped>
       <int val="2"/>
      </fn>
      <convert role="select" from="xs:untypedAtomic" to="xs:string">
       <data>
        <dot type="*:map"/>
       </data>
      </convert>
     </compAtt>
     <true/>
     <compElem line="2824">
      <fn role="name" name="string">
       <convert from="xs:untypedAtomic" to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </convert>
      </fn>
      <applyT role="content" line="2825" mode="Q{}jxml-xml" bSlot="2">
       <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      </applyT>
     </compElem>
    </choose>
   </templateRule>
  </mode>
 </co>
 <co id="36" binds="2 10">
  <template name="Q{}main" flags="os" line="22" module="sample2.xsl" slots="0">
   <ifCall role="body" ns="xsl=~ xforms=http://www.w3.org/2002/xforms array=http://www.w3.org/2005/xpath-functions/array f=http://www.saxonica.com/local/functions ixsl=~ js=~ xs=~ saxon=~ map=http://www.w3.org/2005/xpath-functions/map" line="25" name="Q{http://saxonica.com/ns/interactiveXSLT}schedule-action" type="item()*">
    <int val="0"/>
    <gVarRef name="Q{}bookingForm" bSlot="0"/>
    <callT line="26" name="main2" bSlot="1"/>
   </ifCall>
  </template>
 </co>
 <co id="32" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}check-required-fields" line="782" module="saxon-xforms.xsl" eval="8" flags="pU" as="item()*" slots="3">
   <arg name="updatedInstanceXML" as="document-node()"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="785" var="required-fieldsi" as="element()*" slot="1" eval="8">
    <filter flags="b">
     <slash simple="1">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
      <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </slash>
     <fn name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-required)" jsTest="return item.name==='data-required'"/>
     </fn>
    </filter>
    <forEach line="789">
     <varRef name="required-fieldsi" slot="1"/>
     <let line="791" var="resulti" as="document-node()" slot="2" eval="7">
      <doc line="794" validation="preserve">
       <evaluate dxns="">
        <fn role="xpath" name="concat">
         <str val="boolean(normalize-space("/>
         <attVal name="Q{}data-ref" chk="0"/>
         <str val="))"/>
         <str val="="/>
         <attVal name="Q{}data-ref" chk="0"/>
         <str val="/"/>
         <attVal name="Q{}data-required" chk="0"/>
        </fn>
        <varRef role="cxt" name="updatedInstanceXML" slot="0"/>
        <str role="sa" val="no"/>
        <map role="wp" size="0"/>
       </evaluate>
      </doc>
      <choose line="802">
       <vc op="eq" onEmpty="0" comp="CCC">
        <cast as="xs:string" emptiable="0">
         <data>
          <varRef name="resulti" slot="2"/>
         </data>
        </cast>
        <str val="false"/>
       </vc>
       <dot type="element()"/>
      </choose>
     </let>
    </forEach>
   </let>
  </function>
 </co>
 <co id="18" binds="18 18 18">
  <mode name="Q{}json-xml" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="0" flags="s" line="2731" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2736">
     <fn name="exists">
      <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </fn>
     <forEachGroup line="2737" algorithm="by">
      <sequence role="select">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
       <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      </sequence>
      <fn role="key" name="local-name">
       <dot type="node()"/>
      </fn>
      <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
      <choose role="content" line="2739">
       <fn name="exists">
        <tail start="2">
         <currentGroup/>
        </tail>
       </fn>
       <elem line="2742" name="array" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
        <sequence>
         <att name="key" flags="l">
          <fn name="string-join">
           <convert from="xs:anyAtomicType" to="xs:string">
            <currentGroupingKey/>
           </convert>
           <str val=" "/>
          </fn>
         </att>
         <forEach line="2743">
          <currentGroup/>
          <elem line="2746" name="map" nsuri="http://www.w3.org/2005/xpath-functions" flags="dl">
           <applyT mode="Q{}json-xml" bSlot="0">
            <dot role="select"/>
           </applyT>
          </elem>
         </forEach>
        </sequence>
       </elem>
       <filter line="2753" flags="b">
        <currentGroup/>
        <fn name="exists">
         <slash simple="1">
          <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|12|XPTY0020|">
           <dot/>
          </treat>
          <axis name="self" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
         </slash>
        </fn>
       </filter>
       <elem line="2758" name="string" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
        <sequence>
         <att name="key" flags="l">
          <fn name="concat">
           <str val="@"/>
           <check card="?" diag="0|1||fn:concat">
            <currentGroupingKey/>
           </check>
          </fn>
         </att>
         <valueOf line="2759" flags="l">
          <convert from="xs:anyAtomicType" to="xs:string">
           <data>
            <dot type="node()"/>
           </data>
          </convert>
         </valueOf>
        </sequence>
       </elem>
       <fn line="2764" name="exists">
        <slash>
         <currentGroup/>
         <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
       </fn>
       <elem line="2767" name="map" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
        <sequence>
         <att name="key" flags="l">
          <fn name="string-join">
           <convert from="xs:anyAtomicType" to="xs:string">
            <currentGroupingKey/>
           </convert>
           <str val=" "/>
          </fn>
         </att>
         <applyT line="2768" mode="Q{}json-xml" bSlot="1">
          <currentGroup role="select"/>
         </applyT>
        </sequence>
       </elem>
       <true/>
       <applyT line="2773" mode="Q{}json-xml" bSlot="2">
        <currentGroup role="select"/>
       </applyT>
      </choose>
     </forEachGroup>
     <fn line="2779" name="matches">
      <cvUntyped to="xs:string">
       <data>
        <dot type="element()"/>
       </data>
      </cvUntyped>
      <str val="^[0-9]+$"/>
      <str val=""/>
     </fn>
     <elem line="2781" name="number" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
      <sequence>
       <att name="key" flags="l">
        <fn name="local-name">
         <dot type="element()"/>
        </fn>
       </att>
       <valueOf line="2782" flags="l">
        <fn name="string-join">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <mergeAdj>
            <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
           </mergeAdj>
          </data>
         </convert>
         <str val=" "/>
        </fn>
       </valueOf>
      </sequence>
     </elem>
     <true/>
     <elem line="2787" name="string" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
      <sequence>
       <att name="key" flags="l">
        <fn name="local-name">
         <dot type="element()"/>
        </fn>
       </att>
       <valueOf line="2788" flags="l">
        <fn name="string-join">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <mergeAdj>
            <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
           </mergeAdj>
          </data>
         </convert>
         <str val=" "/>
        </fn>
       </valueOf>
      </sequence>
     </elem>
    </choose>
   </templateRule>
  </mode>
 </co>
 <co id="37" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}index" line="50" module="xforms-function-library.xsl" eval="7" flags="pU" as="xs:integer" slots="2">
   <arg name="repeatID" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="52" var="element" as="item()?" slot="1" eval="8">
    <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
     <check card="1" diag="0|0||ixsl:call">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
     </check>
     <str val="getElementById"/>
     <arrayBlock>
      <varRef name="repeatID" slot="0"/>
     </arrayBlock>
    </ifCall>
    <choose line="54">
     <fn name="empty">
      <varRef name="element" slot="1"/>
     </fn>
     <int val="0"/>
     <fn line="58" name="exists">
      <slash simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
        <varRef name="element" slot="1"/>
       </treat>
       <axis name="attribute" nodeTest="attribute(Q{}data-repeatable-context)" jsTest="return item.name==='data-repeatable-context'"/>
      </slash>
     </fn>
     <fn line="59" name="count">
      <slash simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
        <varRef name="element" slot="1"/>
       </treat>
       <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      </slash>
     </fn>
     <true/>
     <int val="0"/>
    </choose>
   </let>
  </function>
 </co>
 <co id="31" binds="31">
  <mode name="Q{}delete-node" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="7" flags="s" line="1853" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1854">
     <param name="Q{}path" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1855" name="Q{}current-path" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|current-path">
       <check card="1" diag="8|0|XTTE0590|current-path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1861" var="updatedPath2" as="document-node()" slot="2" eval="7">
      <doc line="1862" flags="t" validation="preserve">
       <sequence>
        <valueOf flags="l">
         <fn line="1856" name="concat">
          <varRef name="current-path" slot="1"/>
          <str val="/"/>
          <fn name="local-name">
           <dot type="element()"/>
          </fn>
         </fn>
        </valueOf>
        <choose line="1864">
         <fn name="exists">
          <let var="vv:current-28121473" as="element()" slot="3" eval="7">
           <dot type="element()"/>
           <let var="vv:v0" as="xs:string" slot="4" eval="13">
            <fn name="local-name">
             <varRef name="vv:current-28121473" slot="3"/>
            </fn>
            <filter flags="b">
             <union op="|">
              <fn name="reverse">
               <slash simple="1">
                <dot type="element()"/>
                <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
               </slash>
              </fn>
              <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </union>
             <vc op="eq" comp="CCC">
              <fn name="local-name">
               <dot type="element()"/>
              </fn>
              <varRef name="vv:v0" slot="4"/>
             </vc>
            </filter>
           </let>
          </let>
         </fn>
         <valueOf line="1865" flags="l">
          <fn name="concat">
           <str val="["/>
           <let line="1860" var="vv:current585323788" as="element()" slot="5" eval="7">
            <dot type="element()"/>
            <let var="vv:v1" as="xs:string" slot="6" eval="13">
             <fn name="local-name">
              <varRef name="vv:current585323788" slot="5"/>
             </fn>
             <arith op="+" calc="i+i">
              <fn name="count">
               <filter flags="b">
                <slash simple="1">
                 <dot type="element()"/>
                 <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                </slash>
                <vc op="eq" comp="CCC">
                 <fn name="local-name">
                  <dot type="element()"/>
                 </fn>
                 <varRef name="vv:v1" slot="6"/>
                </vc>
               </filter>
              </fn>
              <int val="1"/>
             </arith>
            </let>
           </let>
           <str val="]"/>
          </fn>
         </valueOf>
        </choose>
       </sequence>
      </doc>
      <choose line="1872">
       <vc op="eq" onEmpty="0" comp="CCC">
        <cast as="xs:string" emptiable="0">
         <data>
          <varRef name="updatedPath2" slot="2"/>
         </data>
        </cast>
        <varRef name="path" slot="0"/>
       </vc>
       <empty/>
       <true/>
       <copy line="1885" flags="cin">
        <applyT role="content" mode="Q{}delete-node" bSlot="0">
         <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
         <withParam name="Q{}path" as="xs:string">
          <varRef line="1886" name="path" slot="0"/>
         </withParam>
         <withParam name="Q{}current-path" as="document-node()">
          <varRef line="1887" name="updatedPath2" slot="2"/>
         </withParam>
        </applyT>
       </copy>
      </choose>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="5" binds="">
  <mode name="Q{}get-field" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.25" seq="2" rank="0" minImp="0" slots="0" flags="s" line="3038" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:textarea" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='textarea'"/>
    <ifCall role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3041" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
     <dot type="*:textarea"/>
     <str val="value"/>
    </ifCall>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="1" rank="0" minImp="0" slots="0" flags="s" line="3033" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:select" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='select'"/>
    <ifCall role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3035" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
     <check card="?" diag="0|0||ixsl:get">
      <filter flags="b">
       <axis name="child" nodeTest="element(Q{}option)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='option';"/>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
          <dot type="element(Q{}option)"/>
          <str val="selected"/>
         </ifCall>
        </data>
        <true/>
       </gc>
      </filter>
     </check>
     <str val="value"/>
    </ifCall>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="0" rank="0" minImp="0" slots="0" flags="s" line="3019" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:input" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='input'"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="3023">
     <and op="and">
      <fn name="exists">
       <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
      </fn>
      <gc op="=" card="1:1" comp="CCC">
       <attVal name="Q{}type" chk="0"/>
       <str val="checkbox"/>
      </gc>
     </and>
     <ifCall line="3024" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
      <dot type="*:input"/>
      <str val="checked"/>
     </ifCall>
     <true/>
     <ifCall line="3027" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
      <dot type="*:input"/>
      <str val="value"/>
     </ifCall>
    </choose>
   </templateRule>
  </mode>
 </co>
 <co id="27" binds="11 27 27 1 27 27 27 27 1 27 27 27 33 27 27 27 27 27 27 33 27 27 27">
  <mode onNo="TC" flags="dW" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="1" rank="0" minImp="0" slots="0" flags="s" line="945" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);"/>
    <callT role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="946" name="xformsjs-main" bSlot="0" flags="t">
     <withParam name="Q{}xforms-doc" flags="c" as="document-node()">
      <dot line="947" type="document-node()"/>
     </withParam>
     <withParam name="Q{}xFormsId" flags="c" as="xs:string">
      <str val="xForm"/>
     </withParam>
    </callT>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2168" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}trigger)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='trigger';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2169">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2170" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2171" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2172" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2173" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <let line="2182" var="innerbody" as="document-node()" slot="5" eval="7">
      <doc line="2184" validation="preserve">
       <choose>
        <fn name="exists">
         <filter flags="b">
          <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
          <vc op="eq" comp="CCC">
           <fn name="local-name">
            <dot type="element()"/>
           </fn>
           <str val="label"/>
          </vc>
         </filter>
        </fn>
        <applyT line="2186" bSlot="1">
         <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
         <withParam name="Q{}instance1" as="node()?">
          <varRef line="2187" name="instance1" slot="0"/>
         </withParam>
         <withParam name="Q{}bindings" as="map(xs:string, node())">
          <varRef line="2188" name="bindings" slot="1"/>
         </withParam>
        </applyT>
        <true/>
        <valueOf line="2192" flags="l">
         <str val=" "/>
        </valueOf>
       </choose>
      </doc>
      <let line="2200" var="myid" as="item()?" slot="6" eval="7">
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
        </fn>
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
        <true/>
        <fn name="concat">
         <fn name="generate-id">
          <dot type="element(Q{http://www.w3.org/2002/xforms}trigger)"/>
         </fn>
         <atomSing card="?" diag="0|1||fn:concat">
          <varRef name="position" slot="3"/>
         </atomSing>
        </fn>
       </choose>
       <let line="2210" var="actions" as="map(*)*" slot="7" eval="3">
        <treat line="2211" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
         <applyT bSlot="2">
          <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
          <withParam name="Q{}instance1" as="node()?">
           <varRef line="2212" name="instance1" slot="0"/>
          </withParam>
          <withParam name="Q{}nodeset">
           <varRef line="2213" name="nodeset" slot="4"/>
          </withParam>
          <withParam name="Q{}bindings" as="map(xs:string, node())">
           <varRef line="2214" name="bindings" slot="1"/>
          </withParam>
          <withParam name="Q{}position">
           <varRef line="2215" name="position" slot="3"/>
          </withParam>
          <withParam name="Q{}myid" flags="t" as="item()?">
           <varRef line="2216" name="myid" slot="6"/>
          </withParam>
         </applyT>
        </treat>
        <sequence line="2221">
         <choose>
          <fn name="exists">
           <varRef name="actions" slot="7"/>
          </fn>
          <ifCall line="2232" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
           <check card="1" diag="0|0||ixsl:call">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
           </check>
           <str val="addAction"/>
           <arrayBlock>
            <varRef name="myid" slot="6"/>
            <varRef name="actions" slot="7"/>
           </arrayBlock>
          </ifCall>
         </choose>
         <elem line="2236" name="span" nsuri="" namespaces="rdf xhtml js in fn map array ev">
          <sequence>
           <att name="style" flags="l">
            <str val="display:'inline'"/>
           </att>
           <choose line="2238">
            <gc op="=" card="1:1" comp="CCC">
             <attVal name="Q{}appearance" chk="0"/>
             <str val="minimal"/>
            </gc>
            <elem line="2240" name="a" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
             <sequence>
              <att name="data-action" flags="l">
               <fn name="string-join">
                <convert from="xs:anyAtomicType" to="xs:string">
                 <data>
                  <varRef name="myid" slot="6"/>
                 </data>
                </convert>
                <str val=" "/>
               </fn>
              </att>
              <copyOf line="2241" flags="vc">
               <varRef name="innerbody" slot="5"/>
              </copyOf>
             </sequence>
            </elem>
            <true/>
            <elem line="2245" name="button" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
             <sequence>
              <att name="type" flags="l">
               <str val="button"/>
              </att>
              <att line="2248" name="data-action" flags="l">
               <fn name="string-join">
                <convert from="xs:anyAtomicType" to="xs:string">
                 <data>
                  <varRef name="myid" slot="6"/>
                 </data>
                </convert>
                <str val=" "/>
               </fn>
              </att>
              <copyOf line="2253" flags="vc">
               <varRef name="innerbody" slot="5"/>
              </copyOf>
             </sequence>
            </elem>
           </choose>
          </sequence>
         </elem>
        </sequence>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}rebuild)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}delete)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}unload)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="15" rank="1" minImp="0" slots="4" flags="s" line="1768" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}submit)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='submit';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1769">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1770" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1771" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <let line="1772" var="innerbody" as="document-node()" slot="3" eval="7">
      <doc line="1774" validation="preserve">
       <choose>
        <fn name="exists">
         <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
        </fn>
        <applyT line="1775" bSlot="4">
         <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
         <withParam name="Q{}instance1" as="node()?">
          <varRef line="1776" name="instance1" slot="0"/>
         </withParam>
         <withParam name="Q{}bindings" as="map(xs:string, node())">
          <varRef line="1777" name="bindings" slot="1"/>
         </withParam>
        </applyT>
        <true/>
        <valueOf line="1781" flags="l">
         <str val=" "/>
        </valueOf>
       </choose>
      </doc>
      <choose line="1787">
       <gc op="=" card="1:1" comp="CCC">
        <attVal name="Q{}appearance" chk="0"/>
        <str val="minimal"/>
       </gc>
       <elem line="1789" name="a" nsuri="" namespaces="rdf xhtml js in fn map array ev">
        <copyOf flags="vc">
         <varRef name="innerbody" slot="3"/>
        </copyOf>
       </elem>
       <true/>
       <elem line="1793" name="button" nsuri="" namespaces="rdf xhtml js in fn map array ev">
        <sequence>
         <att name="type" flags="l">
          <str val="button"/>
         </att>
         <copyOf line="1794" flags="vc">
          <filter flags="b">
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
           <vc op="ne" comp="CCC">
            <fn name="local-name">
             <dot type="attribute()"/>
            </fn>
            <str val="ref"/>
           </vc>
          </filter>
         </copyOf>
         <choose line="1795">
          <and op="and">
           <fn name="exists">
            <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
           </fn>
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
            <varRef name="submissions" slot="2"/>
            <atomSing diag="0|1||map:contains">
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            </atomSing>
           </ifCall>
          </and>
          <att line="1796" name="data-submit" flags="l">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
            <varRef name="submissions" slot="2"/>
            <atomSing diag="0|1||map:get">
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            </atomSing>
           </ifCall>
          </att>
         </choose>
         <copyOf line="1798" flags="vc">
          <varRef name="innerbody" slot="3"/>
         </copyOf>
        </sequence>
       </elem>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}load)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="8" rank="1" minImp="0" slots="9" flags="s" line="1469" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}select1)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='select1';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1470">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1471" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1473" name="Q{}nodeset" slot="2" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1474" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <let line="1479" var="ref-binding" as="xs:string" slot="4" eval="7">
      <choose line="1481">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
       </fn>
       <cvUntyped line="1482" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}ref" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <fn line="1484" name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}bind)" jsTest="return item.name==='bind'"/>
       </fn>
       <cvUntyped line="1485" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}bind" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <true/>
       <str val=""/>
      </choose>
      <let line="1500" var="bindingi" as="node()?" slot="5" eval="7">
       <choose>
        <fn name="empty">
         <varRef name="ref-binding" slot="4"/>
        </fn>
        <empty/>
        <true/>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="bindings" slot="1"/>
         <varRef name="ref-binding" slot="4"/>
        </ifCall>
       </choose>
       <let line="1507" var="refi" as="xs:string" slot="6" eval="7">
        <choose>
         <fn name="not">
          <varRef name="nodeset" slot="2"/>
         </fn>
         <fn name="concat">
          <varRef name="nodeset" slot="2"/>
          <attVal name="Q{}ref" chk="0"/>
         </fn>
         <true/>
         <fn name="concat">
          <varRef name="nodeset" slot="2"/>
          <str val="/"/>
          <attVal name="Q{}ref" chk="0"/>
         </fn>
        </choose>
        <sequence line="1508">
         <applyT bSlot="5">
          <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
         </applyT>
         <let line="1510" var="actions" as="map(*)*" slot="7" eval="3">
          <treat line="1511" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
           <applyT bSlot="6">
            <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
            <withParam name="Q{}instance1" as="node()?">
             <varRef line="1512" name="instance1" slot="0"/>
            </withParam>
            <withParam name="Q{}nodeset" as="xs:string">
             <varRef line="1513" name="refi" slot="6"/>
            </withParam>
            <withParam name="Q{}bindings" as="map(xs:string, node())">
             <varRef line="1514" name="bindings" slot="1"/>
            </withParam>
            <withParam name="Q{}position">
             <varRef line="1515" name="position" slot="3"/>
            </withParam>
           </applyT>
          </treat>
          <let line="1524" var="myid" as="item()?" slot="8" eval="7">
           <choose>
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            </fn>
            <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            <true/>
            <fn name="concat">
             <fn name="generate-id">
              <dot type="element()"/>
             </fn>
             <atomSing card="?" diag="0|1||fn:concat">
              <varRef name="position" slot="3"/>
             </atomSing>
            </fn>
           </choose>
           <sequence line="1527">
            <choose>
             <fn name="exists">
              <varRef name="actions" slot="7"/>
             </fn>
             <ifCall line="1536" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
              <check card="1" diag="0|0||ixsl:call">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
              </check>
              <str val="addAction"/>
              <arrayBlock>
               <varRef name="myid" slot="8"/>
               <varRef name="actions" slot="7"/>
              </arrayBlock>
             </ifCall>
            </choose>
            <elem line="1542" name="span" nsuri="" namespaces="rdf xhtml js in fn map array ev">
             <sequence>
              <att name="style" flags="l">
               <str val="display:inline"/>
              </att>
              <elem line="1544" name="select" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
               <sequence>
                <copyOf flags="vc">
                 <filter flags="b">
                  <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
                  <vc op="ne" comp="CCC">
                   <fn name="local-name">
                    <dot type="attribute()"/>
                   </fn>
                   <str val="ref"/>
                  </vc>
                 </filter>
                </copyOf>
                <choose line="1545">
                 <and op="and">
                  <fn name="exists">
                   <varRef name="instance1" slot="0"/>
                  </fn>
                  <fn name="exists">
                   <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                  </fn>
                 </and>
                 <att line="1552" name="data-ref" flags="l">
                  <choose>
                   <fn name="not">
                    <varRef name="nodeset" slot="2"/>
                   </fn>
                   <fn name="concat">
                    <varRef name="nodeset" slot="2"/>
                    <attVal name="Q{}ref" chk="0"/>
                   </fn>
                   <true/>
                   <fn name="concat">
                    <varRef name="nodeset" slot="2"/>
                    <str val="/"/>
                    <attVal name="Q{}ref" chk="0"/>
                   </fn>
                  </choose>
                 </att>
                </choose>
                <att line="1554" name="data-element" flags="l">
                 <lastOf line="1540">
                  <fn name="tokenize">
                   <varRef name="refi" slot="6"/>
                   <str val="/"/>
                   <str val=""/>
                  </fn>
                 </lastOf>
                </att>
                <choose line="1555">
                 <and op="and">
                  <fn name="exists">
                   <varRef name="bindingi" slot="5"/>
                  </fn>
                  <fn name="exists">
                   <slash simple="1">
                    <varRef name="bindingi" slot="5"/>
                    <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                   </slash>
                  </fn>
                 </and>
                 <att line="1556" name="data-constraint" flags="l">
                  <convert from="xs:untypedAtomic" to="xs:string">
                   <data>
                    <slash simple="1">
                     <varRef name="bindingi" slot="5"/>
                     <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                    </slash>
                   </data>
                  </convert>
                 </att>
                </choose>
                <choose line="1558">
                 <vc op="eq" onEmpty="0" comp="CCC">
                  <fn name="local-name">
                   <dot type="element()"/>
                  </fn>
                  <str val="select"/>
                 </vc>
                 <sequence line="1561">
                  <att name="multiple" flags="l">
                   <str val="true"/>
                  </att>
                  <att name="size" flags="l">
                   <convert from="xs:integer" to="xs:string">
                    <fn name="count">
                     <axis name="descendant" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                    </fn>
                   </convert>
                  </att>
                 </sequence>
                </choose>
                <choose line="1564">
                 <fn name="exists">
                  <varRef name="actions" slot="7"/>
                 </fn>
                 <att line="1565" name="data-action" flags="l">
                  <fn name="string-join">
                   <convert from="xs:anyAtomicType" to="xs:string">
                    <data>
                     <varRef name="myid" slot="8"/>
                    </data>
                   </convert>
                   <str val=" "/>
                  </fn>
                 </att>
                </choose>
                <applyT line="1568" bSlot="7">
                 <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                 <withParam name="Q{}instance1" as="node()?">
                  <varRef line="1569" name="instance1" slot="0"/>
                 </withParam>
                 <withParam name="Q{}nodeset" as="xs:string">
                  <varRef line="1570" name="refi" slot="6"/>
                 </withParam>
                 <withParam name="Q{}bindings" as="map(xs:string, node())">
                  <varRef line="1571" name="bindings" slot="1"/>
                 </withParam>
                 <withParam name="Q{}position">
                  <varRef line="1572" name="position" slot="3"/>
                 </withParam>
                </applyT>
               </sequence>
              </elem>
             </sequence>
            </elem>
           </sequence>
          </let>
         </let>
        </sequence>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="17" rank="1" minImp="0" slots="7" flags="s" line="2261" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}action)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2262">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2263" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2264" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2265" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2266" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2272" name="Q{}myid" slot="5" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element(Q{http://www.w3.org/2002/xforms}action)"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="5"/>
     </param>
     <let line="2279" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="6" eval="8">
      <ifCall line="2283" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
       <sequence>
        <choose>
         <fn name="exists">
          <varRef name="nodeset" slot="4"/>
         </fn>
         <ifCall line="2284" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@ref"/>
          <cast as="xs:string" emptiable="1">
           <atomSing card="?" diag="2|0||cast as">
            <varRef name="nodeset" slot="4"/>
           </atomSing>
          </cast>
         </ifCall>
        </choose>
        <choose line="2287">
         <fn name="exists">
          <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
         </fn>
         <ifCall line="2288" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@event"/>
          <cast as="xs:string" emptiable="1">
           <atomSing card="?" diag="2|0||cast as">
            <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
           </atomSing>
          </cast>
         </ifCall>
        </choose>
        <choose line="2291">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
         </fn>
         <ifCall line="2292" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@position"/>
          <fn name="string">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
         </ifCall>
        </choose>
        <choose line="2294">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
         </fn>
         <ifCall line="2295" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@at"/>
          <fn name="string">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
         </ifCall>
        </choose>
        <choose line="2297">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
         </fn>
         <ifCall line="2298" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@if"/>
          <fn name="string">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
         </ifCall>
        </choose>
        <choose line="2300">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
         </fn>
         <ifCall line="2301" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@while"/>
          <fn name="string">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
         </ifCall>
        </choose>
        <treat line="2305" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
         <forEachGroup algorithm="by">
          <axis role="select" name="child" nodeTest="(((((((((((((((element(Q{http://www.w3.org/2002/xforms}setvalue) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
          <fn role="key" name="local-name">
           <dot type="element()"/>
          </fn>
          <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
          <applyT role="content" line="2307" mode="Q{}xforms-action-map" bSlot="8">
           <dot role="select" type="(((((((((((((((element(Q{http://www.w3.org/2002/xforms}setvalue) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))"/>
           <withParam name="Q{}nodeset">
            <varRef line="2308" name="nodeset" slot="4"/>
           </withParam>
          </applyT>
         </forEachGroup>
        </treat>
       </sequence>
       <map size="2">
        <str val="duplicates"/>
        <str val="reject"/>
        <str val="duplicates-error-code"/>
        <str val="XTDE3365"/>
       </map>
      </ifCall>
      <choose line="2324">
       <and op="and">
        <fn name="exists">
         <varRef name="action-map" slot="6"/>
        </fn>
        <fn name="exists">
         <varRef name="myid" slot="5"/>
        </fn>
       </and>
       <varRef line="2326" name="action-map" slot="6"/>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}show)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="14" rank="1" minImp="0" slots="8" flags="s" line="1671" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}repeat)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='repeat';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1672">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1673" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1674" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="1675" name="Q{}nodeset" slot="3" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="3"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1678" var="context" as="element(Q{http://www.w3.org/2002/xforms}repeat)" slot="4" eval="7">
      <dot type="element(Q{http://www.w3.org/2002/xforms}repeat)"/>
      <let line="1681" var="refi" as="xs:string" slot="5" eval="7">
       <choose line="1683">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <cvUntyped line="1690" to="xs:string">
         <cast as="xs:untypedAtomic" emptiable="0">
          <choose>
           <fn name="not">
            <varRef name="nodeset" slot="3"/>
           </fn>
           <fn name="concat">
            <varRef name="nodeset" slot="3"/>
            <attVal name="Q{}ref" chk="0"/>
           </fn>
           <true/>
           <fn name="concat">
            <varRef name="nodeset" slot="3"/>
            <str val="/"/>
            <attVal name="Q{}ref" chk="0"/>
           </fn>
          </choose>
         </cast>
        </cvUntyped>
        <fn line="1692" name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <cvUntyped line="1699" to="xs:string">
         <cast as="xs:untypedAtomic" emptiable="0">
          <choose>
           <fn name="not">
            <varRef name="nodeset" slot="3"/>
           </fn>
           <fn name="concat">
            <varRef name="nodeset" slot="3"/>
            <attVal name="Q{}nodeset" chk="0"/>
           </fn>
           <true/>
           <fn name="concat">
            <varRef name="nodeset" slot="3"/>
            <str val="/"/>
            <attVal name="Q{}nodeset" chk="0"/>
           </fn>
          </choose>
         </cast>
        </cvUntyped>
        <true/>
        <str val=""/>
       </choose>
       <choose line="1717">
        <fn name="exists">
         <varRef name="instance1" slot="0"/>
        </fn>
        <let line="1724" var="selectedRepeatVar" as="node()*" slot="6" eval="8">
         <treat line="1726" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|selectedRepeatVar">
          <evaluate dxns="">
           <varRef role="xpath" name="refi" slot="5"/>
           <varRef role="cxt" name="instance1" slot="0"/>
           <str role="sa" val="no"/>
           <map role="wp" size="0"/>
          </evaluate>
         </treat>
         <choose line="1740">
          <fn name="exists">
           <varRef name="selectedRepeatVar" slot="6"/>
          </fn>
          <let line="1750" var="vv:v0" as="element()*" slot="7" eval="4">
           <slash simple="1">
            <varRef name="context" slot="4"/>
            <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </slash>
           <elem line="1741" name="div" nsuri="" namespaces="rdf xhtml js in fn map array ev">
            <sequence>
             <att name="data-repeatable-context" flags="l">
              <varRef name="refi" slot="5"/>
             </att>
             <att name="data-count" flags="l">
              <convert from="xs:integer" to="xs:string">
               <fn name="count">
                <varRef name="selectedRepeatVar" slot="6"/>
               </fn>
              </convert>
             </att>
             <choose line="1742">
              <fn name="exists">
               <varRef name="refi" slot="5"/>
              </fn>
              <att line="1743" name="data-repeatable-context" flags="l">
               <varRef name="refi" slot="5"/>
              </att>
             </choose>
             <choose line="1745">
              <fn name="exists">
               <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
              </fn>
              <att line="1746" name="id" flags="l">
               <convert from="xs:untypedAtomic" to="xs:string">
                <attVal name="Q{}id" chk="0"/>
               </convert>
              </att>
             </choose>
             <forEach line="1748">
              <varRef name="selectedRepeatVar" slot="6"/>
              <elem line="1749" name="div" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
               <sequence>
                <att name="data-repeat-item" flags="l">
                 <str val="true"/>
                </att>
                <applyT line="1750" bSlot="9">
                 <varRef role="select" name="vv:v0" slot="7"/>
                 <withParam name="Q{}instance1" as="node()?">
                  <varRef line="1751" name="instance1" slot="0"/>
                 </withParam>
                 <withParam name="Q{}position" as="xs:integer">
                  <fn line="1752" name="position"/>
                 </withParam>
                 <withParam name="Q{}nodeset" as="xs:string">
                  <fn line="1754" name="concat">
                   <varRef name="refi" slot="5"/>
                   <str val="["/>
                   <fn name="position"/>
                   <str val="]"/>
                  </fn>
                 </withParam>
                 <withParam name="Q{}bindings" as="map(xs:string, node())">
                  <varRef line="1755" name="bindings" slot="1"/>
                 </withParam>
                 <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
                  <varRef line="1756" name="submissions" slot="2"/>
                 </withParam>
                </applyT>
               </sequence>
              </elem>
             </forEach>
            </sequence>
           </elem>
          </let>
         </choose>
        </let>
       </choose>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="0" rank="1" minImp="0" slots="0" flags="s" line="943" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}send)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="7" rank="1" minImp="0" slots="0" flags="s" line="1467" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}hint)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';"/>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}dispatch)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="12" rank="1" minImp="0" slots="3" flags="s" line="1619" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1620">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1621" name="Q{}nodeset" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1622" var="selectedVar" as="document-node()" slot="2" eval="7">
      <doc line="1623" validation="preserve">
       <evaluate dxns="">
        <varRef role="xpath" name="nodeset" slot="1"/>
        <varRef role="cxt" name="instance1" slot="0"/>
        <str role="sa" val="no"/>
        <map role="wp" size="0"/>
       </evaluate>
      </doc>
      <elem line="1626" name="option" nsuri="" namespaces="rdf xhtml js in fn map array ev">
       <sequence>
        <att name="value" flags="l">
         <fn name="string-join">
          <convert from="xs:untypedAtomic" to="xs:string">
           <data>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}value)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='value';"/>
           </data>
          </convert>
          <str val=" "/>
         </fn>
        </att>
        <choose line="1627">
         <and op="and">
          <fn name="exists">
           <varRef name="instance1" slot="0"/>
          </fn>
          <gc op="=" card="N:1" comp="CCC">
           <data>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}value)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='value';"/>
           </data>
           <data>
            <varRef name="selectedVar" slot="2"/>
           </data>
          </gc>
         </and>
         <att line="1628" name="selected" flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <data>
            <varRef name="selectedVar" slot="2"/>
           </data>
          </convert>
         </att>
        </choose>
        <valueOf line="1631" flags="l">
         <fn name="string-join">
          <convert from="xs:untypedAtomic" to="xs:string">
           <data>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
           </data>
          </convert>
          <str val=" "/>
         </fn>
        </valueOf>
       </sequence>
      </elem>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}insert)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}setindex)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="2.0" seq="6" rank="3" minImp="0" slots="7" flags="s" line="1354" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}textarea)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='textarea';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1355">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1356" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1357" name="Q{}nodeset" slot="2" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <applyT line="1358" bSlot="10">
      <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </applyT>
     <let line="1360" var="hints" as="text()*" slot="3" eval="3">
      <slash>
       <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}hint)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';"/>
       <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
      </slash>
      <let line="1362" var="actions" as="map(*)*" slot="4" eval="3">
       <treat line="1363" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
        <applyT bSlot="11">
         <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
         <withParam name="Q{}instance1" as="node()?">
          <varRef line="1364" name="instance1" slot="0"/>
         </withParam>
         <withParam name="Q{}nodeset" as="xs:string">
          <varRef line="1365" name="nodeset" slot="2"/>
         </withParam>
         <withParam name="Q{}bindings" as="map(xs:string, node())">
          <varRef line="1366" name="bindings" slot="1"/>
         </withParam>
        </applyT>
       </treat>
       <let line="1370" var="ref-binding" as="xs:string" slot="5" eval="7">
        <choose line="1372">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
         </fn>
         <cvUntyped line="1373" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <fn name="string">
            <convert from="xs:untypedAtomic" to="xs:string">
             <attVal name="Q{}ref" chk="0"/>
            </convert>
           </fn>
          </cast>
         </cvUntyped>
         <fn line="1375" name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}bind)" jsTest="return item.name==='bind'"/>
         </fn>
         <cvUntyped line="1376" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <fn name="string">
            <convert from="xs:untypedAtomic" to="xs:string">
             <attVal name="Q{}bind" chk="0"/>
            </convert>
           </fn>
          </cast>
         </cvUntyped>
         <true/>
         <str val=""/>
        </choose>
        <let line="1391" var="bindingi" as="node()?" slot="6" eval="7">
         <choose>
          <fn name="empty">
           <varRef name="ref-binding" slot="5"/>
          </fn>
          <empty/>
          <true/>
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
           <varRef name="bindings" slot="1"/>
           <varRef name="ref-binding" slot="5"/>
          </ifCall>
         </choose>
         <sequence line="1421">
          <choose>
           <fn name="exists">
            <varRef name="actions" slot="4"/>
           </fn>
           <ifCall line="1437" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="addAction"/>
            <arrayBlock>
             <choose line="1427">
              <fn name="exists">
               <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
              </fn>
              <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
              <true/>
              <fn name="generate-id">
               <dot type="element(Q{http://www.w3.org/2002/xforms}textarea)"/>
              </fn>
             </choose>
             <varRef name="actions" slot="4"/>
            </arrayBlock>
           </ifCall>
          </choose>
          <elem line="1444" name="textarea" nsuri="" namespaces="rdf xhtml js in fn map array ev">
           <sequence>
            <copyOf flags="vc">
             <filter flags="b">
              <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
              <vc op="ne" comp="CCC">
               <fn name="local-name">
                <dot type="attribute()"/>
               </fn>
               <str val="ref"/>
              </vc>
             </filter>
            </copyOf>
            <att line="1445" name="data-element" flags="l">
             <lastOf line="1395">
              <fn name="tokenize">
               <choose>
                <fn name="exists">
                 <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                </fn>
                <cvUntyped line="1402" to="xs:string">
                 <cast as="xs:untypedAtomic" emptiable="0">
                  <choose>
                   <fn name="not">
                    <varRef name="nodeset" slot="2"/>
                   </fn>
                   <fn name="concat">
                    <varRef name="nodeset" slot="2"/>
                    <attVal name="Q{}ref" chk="0"/>
                   </fn>
                   <true/>
                   <fn name="concat">
                    <varRef name="nodeset" slot="2"/>
                    <str val="/"/>
                    <attVal name="Q{}ref" chk="0"/>
                   </fn>
                  </choose>
                 </cast>
                </cvUntyped>
                <fn line="1404" name="exists">
                 <varRef name="bindingi" slot="6"/>
                </fn>
                <cvUntyped line="1411" to="xs:string">
                 <cast as="xs:untypedAtomic" emptiable="0">
                  <fn name="string-join">
                   <convert from="xs:anyAtomicType" to="xs:string">
                    <choose>
                     <fn name="exists">
                      <slash simple="1">
                       <varRef name="bindingi" slot="6"/>
                       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                      </slash>
                     </fn>
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="6"/>
                       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                      </slash>
                     </data>
                     <true/>
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="6"/>
                       <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                      </slash>
                     </data>
                    </choose>
                   </convert>
                   <str val=" "/>
                  </fn>
                 </cast>
                </cvUntyped>
                <true/>
                <str val=""/>
               </choose>
               <str val="/"/>
               <str val=""/>
              </fn>
             </lastOf>
            </att>
            <att line="1451" name="data-ref" flags="l">
             <choose>
              <fn name="not">
               <varRef name="nodeset" slot="2"/>
              </fn>
              <fn name="concat">
               <varRef name="nodeset" slot="2"/>
               <attVal name="Q{}ref" chk="0"/>
              </fn>
              <true/>
              <fn name="concat">
               <varRef name="nodeset" slot="2"/>
               <str val="/"/>
               <attVal name="Q{}ref" chk="0"/>
              </fn>
             </choose>
            </att>
            <choose line="1453">
             <and op="and">
              <fn name="exists">
               <varRef name="instance1" slot="0"/>
              </fn>
              <fn name="exists">
               <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
              </fn>
             </and>
             <evaluate line="1456" dxns="">
              <fn role="xpath" name="concat">
               <attVal name="Q{}ref" chk="0"/>
               <str val="/text()"/>
              </fn>
              <varRef role="cxt" name="instance1" slot="0"/>
              <str role="sa" val="no"/>
              <map role="wp" size="0"/>
             </evaluate>
             <true/>
             <sequence line="1458">
              <valueOf flags="Sl">
               <str val=""/>
              </valueOf>
              <valueOf flags="l">
               <str val="  "/>
              </valueOf>
             </sequence>
            </choose>
            <choose line="1461">
             <fn name="exists">
              <varRef name="hints" slot="3"/>
             </fn>
             <att line="1462" name="title" flags="l">
              <fn name="string-join">
               <convert from="xs:untypedAtomic" to="xs:string">
                <data>
                 <mergeAdj>
                  <varRef name="hints" slot="3"/>
                 </mergeAdj>
                </data>
               </convert>
               <str val=" "/>
              </fn>
             </att>
            </choose>
           </sequence>
          </elem>
         </sequence>
        </let>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="5" rank="1" minImp="0" slots="13" flags="s" line="1105" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}input)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='input';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1106">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1107" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1109" name="Q{}nodeset" slot="2" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1110" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <let line="1117" var="ref-binding" as="xs:string" slot="4" eval="7">
      <choose line="1119">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
       </fn>
       <cvUntyped line="1120" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}ref" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <fn line="1122" name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}bind)" jsTest="return item.name==='bind'"/>
       </fn>
       <cvUntyped line="1123" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}bind" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <true/>
       <str val=""/>
      </choose>
      <let line="1139" var="bindingi" as="node()?" slot="5" eval="7">
       <choose>
        <fn name="empty">
         <varRef name="ref-binding" slot="4"/>
        </fn>
        <empty/>
        <true/>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="bindings" slot="1"/>
         <varRef name="ref-binding" slot="4"/>
        </ifCall>
       </choose>
       <let line="1142" var="refi" as="xs:string" slot="6" eval="7">
        <choose line="1144">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
         </fn>
         <cvUntyped line="1151" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <choose>
            <fn name="not">
             <varRef name="nodeset" slot="2"/>
            </fn>
            <fn name="concat">
             <varRef name="nodeset" slot="2"/>
             <attVal name="Q{}ref" chk="0"/>
            </fn>
            <true/>
            <fn name="concat">
             <varRef name="nodeset" slot="2"/>
             <str val="/"/>
             <attVal name="Q{}ref" chk="0"/>
            </fn>
           </choose>
          </cast>
         </cvUntyped>
         <fn line="1153" name="exists">
          <varRef name="bindingi" slot="5"/>
         </fn>
         <cvUntyped line="1160" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <choose>
              <fn name="exists">
               <slash simple="1">
                <varRef name="bindingi" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </fn>
              <data>
               <slash simple="1">
                <varRef name="bindingi" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </data>
              <true/>
              <data>
               <slash simple="1">
                <varRef name="bindingi" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
               </slash>
              </data>
             </choose>
            </convert>
            <str val=" "/>
           </fn>
          </cast>
         </cvUntyped>
         <true/>
         <str val=""/>
        </choose>
        <let line="1175" var="instanceForBinding" as="node()?" slot="7" eval="7">
         <choose line="1177">
          <and op="and">
           <fn name="exists">
            <varRef name="bindingi" slot="5"/>
           </fn>
           <fn name="exists">
            <slash simple="1">
             <varRef name="bindingi" slot="5"/>
             <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
            </slash>
           </fn>
          </and>
          <treat line="1181" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|instanceForBinding">
           <check card="?" diag="3|0|XTTE0570|instanceForBinding">
            <evaluate dxns="">
             <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
              <cvUntyped to="xs:string">
               <data>
                <slash simple="1">
                 <varRef name="bindingi" slot="5"/>
                 <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                </slash>
               </data>
              </cvUntyped>
             </check>
             <varRef role="cxt" name="instance1" slot="0"/>
             <str role="sa" val="no"/>
             <map role="wp" size="0"/>
            </evaluate>
           </check>
          </treat>
          <true/>
          <varRef line="1184" name="instance1" slot="0"/>
         </choose>
         <let line="1189" var="relevantVar" as="xs:boolean" slot="8" eval="7">
          <choose line="1191">
           <and op="and">
            <and op="and">
             <fn name="exists">
              <varRef name="bindingi" slot="5"/>
             </fn>
             <fn name="exists">
              <slash simple="1">
               <varRef name="bindingi" slot="5"/>
               <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
              </slash>
             </fn>
            </and>
            <fn name="exists">
             <varRef name="instanceForBinding" slot="7"/>
            </fn>
           </and>
           <treat line="1192" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|relevantVar">
            <check card="1" diag="3|0|XTTE0570|relevantVar">
             <cvUntyped to="xs:boolean">
              <data>
               <evaluate dxns="">
                <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="12" eval="4">
                 <check card="1" diag="0|0||xforms:impose">
                  <cvUntyped to="xs:string">
                   <data>
                    <slash simple="1">
                     <varRef name="bindingi" slot="5"/>
                     <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                    </slash>
                   </data>
                  </cvUntyped>
                 </check>
                </ufCall>
                <varRef role="cxt" name="instanceForBinding" slot="7"/>
                <str role="sa" val="no"/>
                <map role="wp" size="0"/>
               </evaluate>
              </data>
             </cvUntyped>
            </check>
           </treat>
           <true/>
           <true/>
          </choose>
          <let line="1200" var="actions" as="map(*)*" slot="9" eval="3">
           <treat line="1201" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
            <applyT bSlot="13">
             <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
             <withParam name="Q{}instance1" as="node()?">
              <varRef line="1202" name="instance1" slot="0"/>
             </withParam>
             <withParam name="Q{}nodeset" as="xs:string">
              <varRef line="1203" name="refi" slot="6"/>
             </withParam>
             <withParam name="Q{}bindings" as="map(xs:string, node())">
              <varRef line="1204" name="bindings" slot="1"/>
             </withParam>
             <withParam name="Q{}position">
              <varRef line="1205" name="position" slot="3"/>
             </withParam>
            </applyT>
           </treat>
           <let line="1214" var="myid" as="item()?" slot="10" eval="7">
            <choose>
             <fn name="exists">
              <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
             </fn>
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
             <true/>
             <fn name="concat">
              <fn name="generate-id">
               <dot type="element(Q{http://www.w3.org/2002/xforms}input)"/>
              </fn>
              <atomSing card="?" diag="0|1||fn:concat">
               <varRef name="position" slot="3"/>
              </atomSing>
             </fn>
            </choose>
            <sequence line="1215">
             <choose>
              <fn name="exists">
               <varRef name="actions" slot="9"/>
              </fn>
              <ifCall line="1218" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
               <check card="1" diag="0|0||ixsl:call">
                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
               </check>
               <str val="addAction"/>
               <arrayBlock>
                <varRef name="myid" slot="10"/>
                <varRef name="actions" slot="9"/>
               </arrayBlock>
              </ifCall>
             </choose>
             <elem line="1228" name="span" nsuri="" namespaces="rdf xhtml js in fn map array ev">
              <sequence>
               <att name="style" flags="l">
                <choose>
                 <varRef name="relevantVar" slot="8"/>
                 <str val="display:inline"/>
                 <true/>
                 <str val="display:none"/>
                </choose>
               </att>
               <applyT line="1231" bSlot="14">
                <axis role="select" name="child" nodeTest="(element(Q{http://www.w3.org/2002/xforms}label) | element(Q{http://www.w3.org/2002/xforms}hint))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';};return a()||b();"/>
                <withParam name="Q{}instance1" as="node()?">
                 <varRef line="1232" name="instance1" slot="0"/>
                </withParam>
                <withParam name="Q{}nodeset" as="xs:string">
                 <varRef line="1233" name="refi" slot="6"/>
                </withParam>
                <withParam name="Q{}bindings" as="map(xs:string, node())">
                 <varRef line="1234" name="bindings" slot="1"/>
                </withParam>
                <withParam name="Q{}position">
                 <varRef line="1235" name="position" slot="3"/>
                </withParam>
               </applyT>
               <let line="1241" var="hints" as="text()*" slot="11" eval="3">
                <slash>
                 <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}hint)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';"/>
                 <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
                </slash>
                <elem line="1246" name="input" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
                 <sequence>
                  <att name="data-element" flags="l">
                   <lastOf line="1243">
                    <fn name="tokenize">
                     <varRef name="refi" slot="6"/>
                     <str val="/"/>
                     <str val=""/>
                    </fn>
                   </lastOf>
                  </att>
                  <choose line="1247">
                   <and op="and">
                    <fn name="exists">
                     <varRef name="bindingi" slot="5"/>
                    </fn>
                    <fn name="exists">
                     <slash simple="1">
                      <varRef name="bindingi" slot="5"/>
                      <axis name="attribute" nodeTest="attribute(Q{}required)" jsTest="return item.name==='required'"/>
                     </slash>
                    </fn>
                   </and>
                   <att line="1248" name="data-required" flags="l">
                    <convert from="xs:untypedAtomic" to="xs:string">
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="5"/>
                       <axis name="attribute" nodeTest="attribute(Q{}required)" jsTest="return item.name==='required'"/>
                      </slash>
                     </data>
                    </convert>
                   </att>
                  </choose>
                  <choose line="1250">
                   <and op="and">
                    <fn name="exists">
                     <varRef name="bindingi" slot="5"/>
                    </fn>
                    <fn name="exists">
                     <slash simple="1">
                      <varRef name="bindingi" slot="5"/>
                      <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                     </slash>
                    </fn>
                   </and>
                   <att line="1251" name="data-constraint" flags="l">
                    <convert from="xs:untypedAtomic" to="xs:string">
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="5"/>
                       <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                      </slash>
                     </data>
                    </convert>
                   </att>
                  </choose>
                  <choose line="1253">
                   <fn name="exists">
                    <varRef name="actions" slot="9"/>
                   </fn>
                   <att line="1254" name="data-action" flags="l">
                    <fn name="string-join">
                     <convert from="xs:anyAtomicType" to="xs:string">
                      <data>
                       <varRef name="myid" slot="10"/>
                      </data>
                     </convert>
                     <str val=" "/>
                    </fn>
                   </att>
                  </choose>
                  <choose line="1257">
                   <and op="and">
                    <fn name="exists">
                     <varRef name="bindingi" slot="5"/>
                    </fn>
                    <fn name="exists">
                     <slash simple="1">
                      <varRef name="bindingi" slot="5"/>
                      <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                     </slash>
                    </fn>
                   </and>
                   <att line="1258" name="data-relevant" flags="l">
                    <convert from="xs:untypedAtomic" to="xs:string">
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="5"/>
                       <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                      </slash>
                     </data>
                    </convert>
                   </att>
                  </choose>
                  <choose line="1272">
                   <choose>
                    <fn name="exists">
                     <varRef name="bindingi" slot="5"/>
                    </fn>
                    <vc op="eq" comp="EQC">
                     <cast as="xs:QName" emptiable="1">
                      <data>
                       <slash simple="1">
                        <varRef name="bindingi" slot="5"/>
                        <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
                       </slash>
                      </data>
                     </cast>
                     <qName pre="xs" uri="http://www.w3.org/2001/XMLSchema" loc="date"/>
                    </vc>
                    <true/>
                    <false/>
                   </choose>
                   <sequence line="1273">
                    <att name="data-type" flags="l">
                     <str val="date"/>
                    </att>
                    <att line="1275" name="type" flags="l">
                     <str val="date"/>
                    </att>
                    <att line="1278" name="value" flags="l">
                     <fn name="string-join">
                      <convert from="xs:anyAtomicType" to="xs:string">
                       <choose>
                        <and op="and">
                         <fn name="exists">
                          <varRef name="instance1" slot="0"/>
                         </fn>
                         <fn name="exists">
                          <varRef name="refi" slot="6"/>
                         </fn>
                        </and>
                        <data line="1280">
                         <mergeAdj>
                          <evaluate dxns="">
                           <fn role="xpath" name="concat">
                            <varRef name="refi" slot="6"/>
                            <str val="/text()"/>
                           </fn>
                           <varRef role="cxt" name="instance1" slot="0"/>
                           <str role="sa" val="no"/>
                           <map role="wp" size="0"/>
                          </evaluate>
                         </mergeAdj>
                        </data>
                       </choose>
                      </convert>
                      <str val=""/>
                     </fn>
                    </att>
                   </sequence>
                   <choose line="1289">
                    <fn name="exists">
                     <varRef name="bindingi" slot="5"/>
                    </fn>
                    <vc op="eq" comp="EQC">
                     <cast as="xs:QName" emptiable="1">
                      <data>
                       <slash simple="1">
                        <varRef name="bindingi" slot="5"/>
                        <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
                       </slash>
                      </data>
                     </cast>
                     <qName pre="xs" uri="http://www.w3.org/2001/XMLSchema" loc="time"/>
                    </vc>
                    <true/>
                    <false/>
                   </choose>
                   <sequence line="1290">
                    <att name="data-type" flags="l">
                     <str val="time"/>
                    </att>
                    <att line="1292" name="type" flags="l">
                     <str val="time"/>
                    </att>
                    <att line="1296" name="value" flags="l">
                     <fn name="string-join">
                      <convert from="xs:anyAtomicType" to="xs:string">
                       <choose>
                        <and op="and">
                         <fn name="exists">
                          <varRef name="instance1" slot="0"/>
                         </fn>
                         <fn name="exists">
                          <varRef name="refi" slot="6"/>
                         </fn>
                        </and>
                        <data line="1298">
                         <mergeAdj>
                          <evaluate dxns="">
                           <fn role="xpath" name="concat">
                            <varRef name="refi" slot="6"/>
                            <str val="/text()"/>
                           </fn>
                           <varRef role="cxt" name="instance1" slot="0"/>
                           <str role="sa" val="no"/>
                           <map role="wp" size="0"/>
                          </evaluate>
                         </mergeAdj>
                        </data>
                       </choose>
                      </convert>
                      <str val=""/>
                     </fn>
                    </att>
                   </sequence>
                   <choose line="1307">
                    <fn name="exists">
                     <varRef name="bindingi" slot="5"/>
                    </fn>
                    <vc op="eq" comp="EQC">
                     <cast as="xs:QName" emptiable="1">
                      <data>
                       <slash simple="1">
                        <varRef name="bindingi" slot="5"/>
                        <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
                       </slash>
                      </data>
                     </cast>
                     <qName pre="xs" uri="http://www.w3.org/2001/XMLSchema" loc="boolean"/>
                    </vc>
                    <true/>
                    <false/>
                   </choose>
                   <sequence line="1308">
                    <att name="data-type" flags="l">
                     <str val="checkbox"/>
                    </att>
                    <att line="1310" name="type" flags="l">
                     <str val="checkbox"/>
                    </att>
                    <choose line="1314">
                     <and op="and">
                      <fn name="exists">
                       <varRef name="instance1" slot="0"/>
                      </fn>
                      <fn name="exists">
                       <slash simple="1">
                        <varRef name="bindingi" slot="5"/>
                        <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                       </slash>
                      </fn>
                     </and>
                     <let line="1316" var="checkedi" as="document-node()" slot="12" eval="7">
                      <doc line="1317" validation="preserve">
                       <evaluate dxns="">
                        <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
                         <cvUntyped to="xs:string">
                          <data>
                           <slash simple="1">
                            <varRef name="bindingi" slot="5"/>
                            <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                           </slash>
                          </data>
                         </cvUntyped>
                        </check>
                        <varRef role="cxt" name="instance1" slot="0"/>
                        <str role="sa" val="no"/>
                        <map role="wp" size="0"/>
                       </evaluate>
                      </doc>
                      <choose line="1320">
                       <and op="and">
                        <and op="and">
                         <fn name="exists">
                          <varRef name="checkedi" slot="12"/>
                         </fn>
                         <cvUntyped to="xs:string">
                          <data>
                           <varRef name="checkedi" slot="12"/>
                          </data>
                         </cvUntyped>
                        </and>
                        <cast as="xs:boolean" emptiable="0">
                         <data>
                          <varRef name="checkedi" slot="12"/>
                         </data>
                        </cast>
                       </and>
                       <att line="1321" name="checked" flags="l">
                        <convert from="xs:untypedAtomic" to="xs:string">
                         <data>
                          <varRef name="checkedi" slot="12"/>
                         </data>
                        </convert>
                       </att>
                      </choose>
                     </let>
                    </choose>
                   </sequence>
                   <true/>
                   <sequence line="1328">
                    <choose>
                     <varRef name="relevantVar" slot="8"/>
                     <att line="1329" name="type" flags="l">
                      <str val="text"/>
                     </att>
                    </choose>
                    <att line="1332" name="value" flags="l">
                     <fn name="string-join">
                      <convert from="xs:anyAtomicType" to="xs:string">
                       <choose>
                        <and op="and">
                         <fn name="exists">
                          <varRef name="instance1" slot="0"/>
                         </fn>
                         <fn name="exists">
                          <varRef name="refi" slot="6"/>
                         </fn>
                        </and>
                        <data line="1334">
                         <mergeAdj>
                          <evaluate dxns="">
                           <fn role="xpath" name="concat">
                            <varRef name="refi" slot="6"/>
                            <str val="/text()"/>
                           </fn>
                           <varRef role="cxt" name="instance1" slot="0"/>
                           <str role="sa" val="no"/>
                           <map role="wp" size="0"/>
                          </evaluate>
                         </mergeAdj>
                        </data>
                       </choose>
                      </convert>
                      <str val=""/>
                     </fn>
                    </att>
                   </sequence>
                  </choose>
                  <choose line="1341">
                   <fn name="exists">
                    <varRef name="hints" slot="11"/>
                   </fn>
                   <att line="1342" name="title" flags="l">
                    <fn name="string-join">
                     <convert from="xs:untypedAtomic" to="xs:string">
                      <data>
                       <mergeAdj>
                        <varRef name="hints" slot="11"/>
                       </mergeAdj>
                      </data>
                     </convert>
                     <str val=" "/>
                    </fn>
                   </att>
                  </choose>
                  <choose line="1344">
                   <fn name="exists">
                    <axis name="attribute" nodeTest="attribute(Q{}size)" jsTest="return item.name==='size'"/>
                   </fn>
                   <att line="1345" name="size" flags="l">
                    <convert from="xs:untypedAtomic" to="xs:string">
                     <attVal name="Q{}size" chk="0"/>
                    </convert>
                   </att>
                  </choose>
                  <att line="1347" name="data-ref" flags="l">
                   <varRef name="refi" slot="6"/>
                  </att>
                 </sequence>
                </elem>
               </let>
              </sequence>
             </elem>
            </sequence>
           </let>
          </let>
         </let>
        </let>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}reset)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="13" rank="1" minImp="0" slots="5" flags="s" line="1636" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}group)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='group';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1637">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1638" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1639" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <let line="1642" var="context" as="element(Q{http://www.w3.org/2002/xforms}group)" slot="3" eval="7">
      <dot type="element(Q{http://www.w3.org/2002/xforms}group)"/>
      <let line="1643" var="refi" as="xs:string?" slot="4" eval="7">
       <choose line="1645">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <cvUntyped to="xs:string">
         <data>
          <slash simple="1">
           <varRef name="context" slot="3"/>
           <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
          </slash>
         </data>
        </cvUntyped>
        <fn line="1646" name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <cvUntyped line="1646" to="xs:string">
         <data>
          <slash simple="1">
           <varRef name="context" slot="3"/>
           <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
          </slash>
         </data>
        </cvUntyped>
       </choose>
       <elem line="1652" name="div" nsuri="" namespaces="rdf xhtml js in fn map array ev">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="refi" slot="4"/>
          </fn>
          <att line="1653" name="data-group-ref" flags="l">
           <varRef name="refi" slot="4"/>
          </att>
         </choose>
         <choose line="1655">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
          </fn>
          <att line="1656" name="id" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}id" chk="0"/>
           </convert>
          </att>
         </choose>
         <applyT line="1659" bSlot="15">
          <slash role="select" simple="1">
           <varRef name="context" slot="3"/>
           <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
          </slash>
          <withParam name="Q{}instance1" as="node()?">
           <varRef line="1660" name="instance1" slot="0"/>
          </withParam>
          <withParam name="Q{}position" as="xs:integer">
           <fn line="1661" name="position"/>
          </withParam>
          <withParam name="Q{}nodeset" as="xs:string?">
           <choose line="1662">
            <fn name="exists">
             <varRef name="refi" slot="4"/>
            </fn>
            <varRef name="refi" slot="4"/>
            <true/>
            <str val=""/>
           </choose>
          </withParam>
          <withParam name="Q{}bindings" as="map(xs:string, node())">
           <varRef line="1663" name="bindings" slot="1"/>
          </withParam>
          <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
           <varRef line="1664" name="submissions" slot="2"/>
          </withParam>
         </applyT>
        </sequence>
       </elem>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="2" rank="1" minImp="0" slots="3" flags="s" line="959" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="960">
     <param name="Q{}instance1" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <param line="961" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="962" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <applyT line="964" flags="t" bSlot="16">
      <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      <withParam name="Q{}instance1">
       <varRef line="965" name="instance1" slot="0"/>
      </withParam>
      <withParam name="Q{}bindings" as="map(xs:string, node())">
       <varRef line="966" name="bindings" slot="1"/>
      </withParam>
      <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
       <varRef line="967" name="submissions" slot="2"/>
      </withParam>
     </applyT>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}toggle)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="11" rank="1" minImp="0" slots="1" flags="s" line="1607" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1608">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <elem line="1611" name="label" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <choose>
       <fn name="exists">
        <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
       </fn>
       <applyT line="1612" bSlot="17">
        <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
       </applyT>
       <true/>
       <sequence line="1614">
        <valueOf flags="l">
         <str val=" "/>
        </valueOf>
        <valueOf flags="Sl">
         <str val=""/>
        </valueOf>
       </sequence>
      </choose>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}message)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="3" rank="1" minImp="0" slots="0" flags="s" line="971" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/1999/xhtml}html)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='html';"/>
    <elem role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="973" name="html" nsuri="" namespaces="rdf xhtml js in fn map array ev">
     <sequence>
      <copyOf flags="vc">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
      </copyOf>
      <elem line="975" name="head" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
       <sequence>
        <copyOf flags="vc">
         <union op="|">
          <slash>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
          <slash>
           <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
         </union>
        </copyOf>
        <elem line="976" name="meta" nsuri="" flags="l">
         <sequence>
          <att name="http-equiv" flags="l">
           <str val="Content-Type"/>
          </att>
          <att name="content" flags="l">
           <str val="text/html;charset=utf-8"/>
          </att>
         </sequence>
        </elem>
        <forEach line="978">
         <union op="|">
          <filter flags="b">
           <slash>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
          <filter flags="b">
           <slash>
            <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
         </union>
         <elem line="980" name="meta" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
          <copyOf flags="vc">
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </copyOf>
         </elem>
        </forEach>
        <copyOf line="985" flags="vc">
         <axis name="child" nodeTest="element(Q{}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='script';"/>
        </copyOf>
       </sequence>
      </elem>
      <elem line="988" name="body" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
       <applyT bSlot="18">
        <slash role="select">
         <axis name="child" nodeTest="element(Q{}body)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='body';"/>
         <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
       </applyT>
      </elem>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="8" rank="1" minImp="0" slots="9" flags="s" line="1469" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}select)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='select';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1470">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1471" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1473" name="Q{}nodeset" slot="2" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1474" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <let line="1479" var="ref-binding" as="xs:string" slot="4" eval="7">
      <choose line="1481">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
       </fn>
       <cvUntyped line="1482" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}ref" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <fn line="1484" name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}bind)" jsTest="return item.name==='bind'"/>
       </fn>
       <cvUntyped line="1485" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}bind" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <true/>
       <str val=""/>
      </choose>
      <let line="1500" var="bindingi" as="node()?" slot="5" eval="7">
       <choose>
        <fn name="empty">
         <varRef name="ref-binding" slot="4"/>
        </fn>
        <empty/>
        <true/>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="bindings" slot="1"/>
         <varRef name="ref-binding" slot="4"/>
        </ifCall>
       </choose>
       <let line="1507" var="refi" as="xs:string" slot="6" eval="7">
        <choose>
         <fn name="not">
          <varRef name="nodeset" slot="2"/>
         </fn>
         <fn name="concat">
          <varRef name="nodeset" slot="2"/>
          <attVal name="Q{}ref" chk="0"/>
         </fn>
         <true/>
         <fn name="concat">
          <varRef name="nodeset" slot="2"/>
          <str val="/"/>
          <attVal name="Q{}ref" chk="0"/>
         </fn>
        </choose>
        <sequence line="1508">
         <applyT bSlot="5">
          <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
         </applyT>
         <let line="1510" var="actions" as="map(*)*" slot="7" eval="3">
          <treat line="1511" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
           <applyT bSlot="6">
            <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
            <withParam name="Q{}instance1" as="node()?">
             <varRef line="1512" name="instance1" slot="0"/>
            </withParam>
            <withParam name="Q{}nodeset" as="xs:string">
             <varRef line="1513" name="refi" slot="6"/>
            </withParam>
            <withParam name="Q{}bindings" as="map(xs:string, node())">
             <varRef line="1514" name="bindings" slot="1"/>
            </withParam>
            <withParam name="Q{}position">
             <varRef line="1515" name="position" slot="3"/>
            </withParam>
           </applyT>
          </treat>
          <let line="1524" var="myid" as="item()?" slot="8" eval="7">
           <choose>
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            </fn>
            <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            <true/>
            <fn name="concat">
             <fn name="generate-id">
              <dot type="element()"/>
             </fn>
             <atomSing card="?" diag="0|1||fn:concat">
              <varRef name="position" slot="3"/>
             </atomSing>
            </fn>
           </choose>
           <sequence line="1527">
            <choose>
             <fn name="exists">
              <varRef name="actions" slot="7"/>
             </fn>
             <ifCall line="1536" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
              <check card="1" diag="0|0||ixsl:call">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
              </check>
              <str val="addAction"/>
              <arrayBlock>
               <varRef name="myid" slot="8"/>
               <varRef name="actions" slot="7"/>
              </arrayBlock>
             </ifCall>
            </choose>
            <elem line="1542" name="span" nsuri="" namespaces="rdf xhtml js in fn map array ev">
             <sequence>
              <att name="style" flags="l">
               <str val="display:inline"/>
              </att>
              <elem line="1544" name="select" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
               <sequence>
                <copyOf flags="vc">
                 <filter flags="b">
                  <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
                  <vc op="ne" comp="CCC">
                   <fn name="local-name">
                    <dot type="attribute()"/>
                   </fn>
                   <str val="ref"/>
                  </vc>
                 </filter>
                </copyOf>
                <choose line="1545">
                 <and op="and">
                  <fn name="exists">
                   <varRef name="instance1" slot="0"/>
                  </fn>
                  <fn name="exists">
                   <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                  </fn>
                 </and>
                 <att line="1552" name="data-ref" flags="l">
                  <choose>
                   <fn name="not">
                    <varRef name="nodeset" slot="2"/>
                   </fn>
                   <fn name="concat">
                    <varRef name="nodeset" slot="2"/>
                    <attVal name="Q{}ref" chk="0"/>
                   </fn>
                   <true/>
                   <fn name="concat">
                    <varRef name="nodeset" slot="2"/>
                    <str val="/"/>
                    <attVal name="Q{}ref" chk="0"/>
                   </fn>
                  </choose>
                 </att>
                </choose>
                <att line="1554" name="data-element" flags="l">
                 <lastOf line="1540">
                  <fn name="tokenize">
                   <varRef name="refi" slot="6"/>
                   <str val="/"/>
                   <str val=""/>
                  </fn>
                 </lastOf>
                </att>
                <choose line="1555">
                 <and op="and">
                  <fn name="exists">
                   <varRef name="bindingi" slot="5"/>
                  </fn>
                  <fn name="exists">
                   <slash simple="1">
                    <varRef name="bindingi" slot="5"/>
                    <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                   </slash>
                  </fn>
                 </and>
                 <att line="1556" name="data-constraint" flags="l">
                  <convert from="xs:untypedAtomic" to="xs:string">
                   <data>
                    <slash simple="1">
                     <varRef name="bindingi" slot="5"/>
                     <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                    </slash>
                   </data>
                  </convert>
                 </att>
                </choose>
                <choose line="1558">
                 <vc op="eq" onEmpty="0" comp="CCC">
                  <fn name="local-name">
                   <dot type="element()"/>
                  </fn>
                  <str val="select"/>
                 </vc>
                 <sequence line="1561">
                  <att name="multiple" flags="l">
                   <str val="true"/>
                  </att>
                  <att name="size" flags="l">
                   <convert from="xs:integer" to="xs:string">
                    <fn name="count">
                     <axis name="descendant" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                    </fn>
                   </convert>
                  </att>
                 </sequence>
                </choose>
                <choose line="1564">
                 <fn name="exists">
                  <varRef name="actions" slot="7"/>
                 </fn>
                 <att line="1565" name="data-action" flags="l">
                  <fn name="string-join">
                   <convert from="xs:anyAtomicType" to="xs:string">
                    <data>
                     <varRef name="myid" slot="8"/>
                    </data>
                   </convert>
                   <str val=" "/>
                  </fn>
                 </att>
                </choose>
                <applyT line="1568" bSlot="7">
                 <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                 <withParam name="Q{}instance1" as="node()?">
                  <varRef line="1569" name="instance1" slot="0"/>
                 </withParam>
                 <withParam name="Q{}nodeset" as="xs:string">
                  <varRef line="1570" name="refi" slot="6"/>
                 </withParam>
                 <withParam name="Q{}bindings" as="map(xs:string, node())">
                  <varRef line="1571" name="bindings" slot="1"/>
                 </withParam>
                 <withParam name="Q{}position">
                  <varRef line="1572" name="position" slot="3"/>
                 </withParam>
                </applyT>
               </sequence>
              </elem>
             </sequence>
            </elem>
           </sequence>
          </let>
         </let>
        </sequence>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}setvalue)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}hide)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="4" rank="1" minImp="0" slots="10" flags="s" line="995" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}output)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='output';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="996">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="997" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="999" name="Q{}nodeset" slot="2" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1000" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <let line="1007" var="ref-binding" as="xs:string" slot="4" eval="7">
      <choose line="1009">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
       </fn>
       <cvUntyped line="1010" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}ref" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <fn line="1012" name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}bind)" jsTest="return item.name==='bind'"/>
       </fn>
       <cvUntyped line="1013" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}bind" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <true/>
       <str val=""/>
      </choose>
      <let line="1028" var="bindingi" as="node()?" slot="5" eval="7">
       <choose>
        <fn name="empty">
         <varRef name="ref-binding" slot="4"/>
        </fn>
        <empty/>
        <true/>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="bindings" slot="1"/>
         <varRef name="ref-binding" slot="4"/>
        </ifCall>
       </choose>
       <let line="1029" var="refi" as="xs:string" slot="6" eval="7">
        <choose line="1031">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
         </fn>
         <cvUntyped line="1038" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <choose>
            <fn name="not">
             <varRef name="nodeset" slot="2"/>
            </fn>
            <fn name="concat">
             <varRef name="nodeset" slot="2"/>
             <attVal name="Q{}ref" chk="0"/>
            </fn>
            <true/>
            <fn name="concat">
             <varRef name="nodeset" slot="2"/>
             <str val="/"/>
             <attVal name="Q{}ref" chk="0"/>
            </fn>
           </choose>
          </cast>
         </cvUntyped>
         <fn line="1040" name="exists">
          <varRef name="bindingi" slot="5"/>
         </fn>
         <cvUntyped line="1047" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <choose>
              <fn name="exists">
               <slash simple="1">
                <varRef name="bindingi" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </fn>
              <data>
               <slash simple="1">
                <varRef name="bindingi" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </data>
              <true/>
              <data>
               <slash simple="1">
                <varRef name="bindingi" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
               </slash>
              </data>
             </choose>
            </convert>
            <str val=" "/>
           </fn>
          </cast>
         </cvUntyped>
         <true/>
         <str val=""/>
        </choose>
        <let line="1056" var="instanceForBinding" as="node()?" slot="7" eval="7">
         <choose line="1058">
          <and op="and">
           <fn name="exists">
            <varRef name="bindingi" slot="5"/>
           </fn>
           <fn name="exists">
            <slash simple="1">
             <varRef name="bindingi" slot="5"/>
             <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
            </slash>
           </fn>
          </and>
          <treat line="1062" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|instanceForBinding">
           <check card="?" diag="3|0|XTTE0570|instanceForBinding">
            <evaluate dxns="">
             <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
              <cvUntyped to="xs:string">
               <data>
                <slash simple="1">
                 <varRef name="bindingi" slot="5"/>
                 <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                </slash>
               </data>
              </cvUntyped>
             </check>
             <varRef role="cxt" name="instance1" slot="0"/>
             <str role="sa" val="no"/>
             <map role="wp" size="0"/>
            </evaluate>
           </check>
          </treat>
          <true/>
          <varRef line="1065" name="instance1" slot="0"/>
         </choose>
         <let line="1070" var="valueExecuted" as="xs:string" slot="8" eval="8">
          <evaluate line="1071" as="xs:string" dxns="">
           <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
            <cvUntyped to="xs:string">
             <attVal name="Q{}value" chk="0"/>
            </cvUntyped>
           </check>
           <varRef role="cxt" name="instance1" slot="0"/>
           <str role="sa" val="no"/>
           <map role="wp" size="0"/>
          </evaluate>
          <let line="1074" var="relevantVar" as="xs:boolean" slot="9" eval="7">
           <choose line="1076">
            <and op="and">
             <and op="and">
              <fn name="exists">
               <varRef name="bindingi" slot="5"/>
              </fn>
              <fn name="exists">
               <slash simple="1">
                <varRef name="bindingi" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
               </slash>
              </fn>
             </and>
             <fn name="exists">
              <varRef name="instanceForBinding" slot="7"/>
             </fn>
            </and>
            <treat line="1077" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|relevantVar">
             <check card="1" diag="3|0|XTTE0570|relevantVar">
              <cvUntyped to="xs:boolean">
               <data>
                <evaluate dxns="">
                 <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="19" eval="4">
                  <check card="1" diag="0|0||xforms:impose">
                   <cvUntyped to="xs:string">
                    <data>
                     <slash simple="1">
                      <varRef name="bindingi" slot="5"/>
                      <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                     </slash>
                    </data>
                   </cvUntyped>
                  </check>
                 </ufCall>
                 <varRef role="cxt" name="instanceForBinding" slot="7"/>
                 <str role="sa" val="no"/>
                 <map role="wp" size="0"/>
                </evaluate>
               </data>
              </cvUntyped>
             </check>
            </treat>
            <true/>
            <true/>
           </choose>
           <sequence line="1085">
            <applyT bSlot="20">
             <axis role="select" name="child" nodeTest="(element(Q{http://www.w3.org/2002/xforms}label) | element(Q{http://www.w3.org/2002/xforms}hint))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';};return a()||b();"/>
             <withParam name="Q{}instance1" as="node()?">
              <varRef line="1086" name="instance1" slot="0"/>
             </withParam>
             <withParam name="Q{}nodeset" as="xs:string">
              <varRef line="1087" name="refi" slot="6"/>
             </withParam>
             <withParam name="Q{}bindings" as="map(xs:string, node())">
              <varRef line="1088" name="bindings" slot="1"/>
             </withParam>
             <withParam name="Q{}position">
              <varRef line="1089" name="position" slot="3"/>
             </withParam>
            </applyT>
            <elem line="1092" name="span" nsuri="" namespaces="rdf xhtml js in fn map array ev">
             <sequence>
              <att name="style" flags="l">
               <choose>
                <varRef name="relevantVar" slot="9"/>
                <str val="display:inline"/>
                <true/>
                <str val="display:none"/>
               </choose>
              </att>
              <att line="1093" name="data-ref" flags="l">
               <varRef name="refi" slot="6"/>
              </att>
              <choose line="1095">
               <fn name="exists">
                <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
               </fn>
               <att line="1096" name="class" flags="l">
                <convert from="xs:untypedAtomic" to="xs:string">
                 <attVal name="Q{}class" chk="0"/>
                </convert>
               </att>
              </choose>
              <varRef line="1100" name="valueExecuted" slot="8"/>
             </sequence>
            </elem>
           </sequence>
          </let>
         </let>
        </let>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="18" rank="1" minImp="0" slots="8" flags="s" line="2334" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}setfocus)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2335">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2336" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2337" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2338" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2339" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2340" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2346" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2351">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2359" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2363" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2364" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2367">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2368" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2371">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2372" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2374">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2375" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2377">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2378" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2380">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2381" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2384" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2385" mode="Q{}xforms-action-map" bSlot="3">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2386" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2427" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="3" rank="1" minImp="0" slots="0" flags="s" line="971" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{}html)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='html';"/>
    <elem role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="973" name="html" nsuri="" namespaces="rdf xhtml js in fn map array ev">
     <sequence>
      <copyOf flags="vc">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
      </copyOf>
      <elem line="975" name="head" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
       <sequence>
        <copyOf flags="vc">
         <union op="|">
          <slash>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
          <slash>
           <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
         </union>
        </copyOf>
        <elem line="976" name="meta" nsuri="" flags="l">
         <sequence>
          <att name="http-equiv" flags="l">
           <str val="Content-Type"/>
          </att>
          <att name="content" flags="l">
           <str val="text/html;charset=utf-8"/>
          </att>
         </sequence>
        </elem>
        <forEach line="978">
         <union op="|">
          <filter flags="b">
           <slash>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
          <filter flags="b">
           <slash>
            <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
         </union>
         <elem line="980" name="meta" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
          <copyOf flags="vc">
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </copyOf>
         </elem>
        </forEach>
        <copyOf line="985" flags="vc">
         <axis name="child" nodeTest="element(Q{}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='script';"/>
        </copyOf>
       </sequence>
      </elem>
      <elem line="988" name="body" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
       <applyT bSlot="18">
        <slash role="select">
         <axis name="child" nodeTest="element(Q{}body)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='body';"/>
         <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
       </applyT>
      </elem>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="9" rank="0" minImp="0" slots="4" flags="s" line="1582" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1583">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1584" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1585" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="1587" name="Q{}nodeset" slot="3" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="3"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <copy line="1589" flags="cin">
      <sequence role="content">
       <applyT bSlot="21">
        <axis role="select" name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
       </applyT>
       <applyT line="1590" bSlot="22">
        <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
        <withParam name="Q{}instance1" as="node()?">
         <varRef line="1591" name="instance1" slot="0"/>
        </withParam>
        <withParam name="Q{}bindings" as="map(xs:string, node())">
         <varRef line="1592" name="bindings" slot="1"/>
        </withParam>
        <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
         <varRef line="1594" name="submissions" slot="2"/>
        </withParam>
        <withParam name="Q{}nodeset" as="xs:string">
         <varRef line="1595" name="nodeset" slot="3"/>
        </withParam>
       </applyT>
      </sequence>
     </copy>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="10" rank="2" minImp="0" slots="0" flags="s" line="1603" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="text()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;"/>
     <axis ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1603" name="ancestor" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
    </p.withPredicate>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="9" rank="0" minImp="0" slots="4" flags="s" line="1582" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array sfl=http://saxonica.com/ns/forms-local ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1583">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1584" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1585" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="1587" name="Q{}nodeset" slot="3" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="3"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <copy line="1589" flags="cin">
      <sequence role="content">
       <applyT bSlot="21">
        <axis role="select" name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
       </applyT>
       <applyT line="1590" bSlot="22">
        <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
        <withParam name="Q{}instance1" as="node()?">
         <varRef line="1591" name="instance1" slot="0"/>
        </withParam>
        <withParam name="Q{}bindings" as="map(xs:string, node())">
         <varRef line="1592" name="bindings" slot="1"/>
        </withParam>
        <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
         <varRef line="1594" name="submissions" slot="2"/>
        </withParam>
        <withParam name="Q{}nodeset" as="xs:string">
         <varRef line="1595" name="nodeset" slot="3"/>
        </withParam>
       </applyT>
      </sequence>
     </copy>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <overridden/>
 <output>
  <property name="indent" value="no"/>
  <property name="doctype-system" value="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"/>
  <property name="encoding" value="utf-8"/>
  <property name="doctype-public" value="-//W3C//DTD XHTML 1.0 Transitional//EN"/>
  <property name="omit-xml-declaration" value="no"/>
  <property name="{http://saxon.sf.net/}stylesheet-version" value="30"/>
  <property name="method" value="html"/>
 </output>
 <decimalFormat/>
</package>
<?Σ 16e876e0?>
