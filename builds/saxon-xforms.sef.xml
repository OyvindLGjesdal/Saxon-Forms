<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://ns.saxonica.com/xslt/export" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vv="http://saxon.sf.net/generated-variable" xmlns:java-type="http://saxon.sf.net/java-type" dmk="TGljZW5zb3I9U2F4b25pY2EKTGljZW5zZWU9TydOZWlsIERlbHByYXR0CkNvbXBhbnk9U2F4b25pY2EKRW1haWw9b25laWxAc2F4b25pY2EuY29tCkVkaXRpb249REUKU0FUPXllcwpTQVE9eWVzClNBVj15ZXMKSXNzdWVkPTIwMTctMTEtMjIKU2VyaWVzPUQKU2VyaWFsPUQwMDY0MDgKVXNlcj1QMDAwMQpFdmFsdWF0aW9uPW5vCkV4cGlyYXRpb249bmV2ZXIKVXBncmFkZURheXM9MzY2Ck1haW50ZW5hbmNlRGF5cz0zNjYKU2lnbmF0dXJlPTMwMkMwMjE0NjU1REM4QzZFRDM3NDBDOTg4MkFERkYzRUFBQzVGNDlDRTcwOTFGRDAyMTQzRjQ0N0Y4OEY1MTIxQTQxMUM3MTQwRThEMzMyQzQ3Q0E4RUZDQjE1Cg==" version="30" packageVersion="1" saxonVersion="9.8.0.7" target="JS" targetVersion="1" relocatable="true">
 <co id="0" binds="">
  <mode name="Q{}xforms-action" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.0" seq="3" rank="0" minImp="0" slots="1" flags="s" line="2351" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}reset)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2352">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <elem line="2354" name="reset" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <sequence>
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <elem line="2357" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2358" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2361" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}ref" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2366">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <elem line="2369" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2370" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2373" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}nodeset" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2379">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
        </fn>
        <elem line="2381" name="position" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}position" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2384">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
        </fn>
        <elem line="2386" name="at" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}at" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2389">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
        </fn>
        <elem line="2391" name="if" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}if" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2394">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
        </fn>
        <elem line="2396" name="while" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}while" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2399">
        <fn name="exists">
         <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
        </fn>
        <elem line="2401" name="event" nsuri="" flags="l">
         <valueOf flags="l">
          <fn name="string-join">
           <convert from="xs:untypedAtomic" to="xs:string">
            <data>
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </data>
           </convert>
           <str val=" "/>
          </fn>
         </valueOf>
        </elem>
       </choose>
      </sequence>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="2" rank="0" minImp="0" slots="1" flags="s" line="2286" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}setvalue)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2287">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <elem line="2291" name="setvalue" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <sequence>
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
        </fn>
        <att line="2293" name="value" flags="l">
         <convert from="xs:untypedAtomic" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <fn name="string">
            <convert from="xs:untypedAtomic" to="xs:string">
             <attVal name="Q{}value" chk="0"/>
            </convert>
           </fn>
          </cast>
         </convert>
        </att>
       </choose>
       <choose line="2296">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <elem line="2299" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2300" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2303" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}ref" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2308">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <elem line="2311" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2312" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2315" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}nodeset" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2321">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
        </fn>
        <elem line="2323" name="position" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}position" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2326">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
        </fn>
        <elem line="2328" name="at" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}at" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2331">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
        </fn>
        <elem line="2333" name="if" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}if" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2336">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
        </fn>
        <elem line="2338" name="while" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}while" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2342">
        <fn name="exists">
         <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
        </fn>
        <elem line="2344" name="value" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <data>
            <dot type="element(Q{http://www.w3.org/2002/xforms}setvalue)"/>
           </data>
          </convert>
         </valueOf>
        </elem>
       </choose>
      </sequence>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="1" rank="0" minImp="0" slots="1" flags="s" line="2235" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}delete)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2236">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <elem line="2238" name="delete" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <sequence>
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <elem line="2241" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2242" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2245" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}ref" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2250">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <elem line="2253" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2254" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2257" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}nodeset" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2263">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
        </fn>
        <elem line="2265" name="position" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}position" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2268">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
        </fn>
        <elem line="2270" name="at" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}at" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2273">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
        </fn>
        <elem line="2275" name="if" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}if" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2278">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
        </fn>
        <elem line="2280" name="while" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}while" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
      </sequence>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="0" rank="0" minImp="0" slots="1" flags="s" line="2184" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}insert)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2185">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <elem line="2187" name="insert" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <sequence>
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
        </fn>
        <elem line="2190" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2191" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2194" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}ref" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2199">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
        </fn>
        <elem line="2202" name="ref" nsuri="" flags="l">
         <choose>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}nodeset" chk="0"/>
           <str val="."/>
          </gc>
          <valueOf line="2203" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="nodeset" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <true/>
          <valueOf line="2206" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <attVal name="Q{}nodeset" chk="0"/>
           </convert>
          </valueOf>
         </choose>
        </elem>
       </choose>
       <choose line="2212">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
        </fn>
        <elem line="2214" name="position" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}position" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2217">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
        </fn>
        <elem line="2219" name="at" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}at" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2222">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
        </fn>
        <elem line="2224" name="if" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}if" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
       <choose line="2227">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
        </fn>
        <elem line="2229" name="while" nsuri="" flags="l">
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}while" chk="0"/>
          </convert>
         </valueOf>
        </elem>
       </choose>
      </sequence>
     </elem>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="1" binds="">
  <mode name="Q{}xforms-action-map" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.25" seq="0" rank="0" minImp="0" slots="2" flags="s" line="2413" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="Q{http://www.w3.org/2002/xforms}*" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.uri==='http://www.w3.org/2002/xforms'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2414">
     <param name="Q{}nodeset" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <ifCall line="2415" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
      <fn name="local-name">
       <dot type="Q{http://www.w3.org/2002/xforms}*"/>
      </fn>
      <let line="2417" var="array" as="map(xs:string, xs:string)*" slot="1" eval="8">
       <forEach line="2418">
        <currentGroup/>
        <ifCall line="2422" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
         <sequence>
          <choose>
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
            </slash>
           </fn>
           <ifCall line="2423" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="@value"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2426">
           <and op="and">
            <fn name="empty">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}value)" jsTest="return item.name==='value'"/>
             </slash>
            </fn>
            <fn name="exists">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
               <dot/>
              </treat>
              <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
             </slash>
            </fn>
           </and>
           <ifCall line="2427" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="value"/>
            <fn name="string">
             <dot/>
            </fn>
           </ifCall>
          </choose>
          <choose line="2430">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
            </slash>
           </fn>
           <ifCall line="2431" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="ref"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2434">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
            </slash>
           </fn>
           <ifCall line="2435" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="ref"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2438">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
            </slash>
           </fn>
           <ifCall line="2439" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="position"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2443">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
            </slash>
           </fn>
           <ifCall line="2444" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="at"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2447">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
            </slash>
           </fn>
           <ifCall line="2448" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="if"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2451">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
            </slash>
           </fn>
           <ifCall line="2452" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="while"/>
            <fn name="string">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
             </slash>
            </fn>
           </ifCall>
          </choose>
          <choose line="2456">
           <fn name="exists">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot/>
             </treat>
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </slash>
           </fn>
           <ifCall line="2457" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
            <str val="event"/>
            <fn name="string">
             <check card="?" diag="0|0||fn:string">
              <slash simple="1">
               <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
                <dot/>
               </treat>
               <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
              </slash>
             </check>
            </fn>
           </ifCall>
          </choose>
         </sequence>
         <map size="2">
          <str val="duplicates"/>
          <str val="reject"/>
          <str val="duplicates-error-code"/>
          <str val="XTDE3365"/>
         </map>
        </ifCall>
       </forEach>
       <ifCall line="2464" name="Q{http://www.w3.org/2005/xpath-functions/array}_from-sequence" type="array(*)">
        <varRef name="array" slot="1"/>
       </ifCall>
      </let>
     </ifCall>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="2" binds="3">
  <mode name="Q{}form-check-initial" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="1" flags="s" line="2615" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2616">
     <param name="Q{}pendingUpdates" slot="0" as="map(xs:string, xs:string)?">
      <empty role="select"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
       <check card="?" diag="8|0|XTTE0590|pendingUpdates">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <copy line="2622" flags="cin">
      <applyT role="content" mode="Q{}form-check" bSlot="0">
       <dot role="select" type="element()"/>
       <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
        <varRef line="2623" name="pendingUpdates" slot="0"/>
       </withParam>
      </applyT>
     </copy>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="3" binds="3 4 3 3 4">
  <mode name="Q{}form-check" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="9" flags="s" line="2628" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2629">
     <param name="Q{}curPath" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <param line="2630" name="Q{}position" slot="1">
      <int role="select" val="0"/>
      <supplied role="conversion" slot="1"/>
     </param>
     <param line="2631" name="Q{}pendingUpdates" slot="2" as="map(xs:string, xs:string)?">
      <empty role="select"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
       <check card="?" diag="8|0|XTTE0590|pendingUpdates">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <let line="2638" var="updatedPath" as="xs:string" slot="3" eval="7">
      <choose>
       <gc op="&gt;" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="position" slot="1"/>
        </data>
        <int val="0"/>
       </gc>
       <fn name="concat">
        <atomSing card="?" diag="0|0||fn:concat">
         <varRef name="curPath" slot="0"/>
        </atomSing>
        <fn name="local-name">
         <dot type="element()"/>
        </fn>
        <str val="["/>
        <atomSing card="?" diag="0|3||fn:concat">
         <varRef name="position" slot="1"/>
        </atomSing>
        <str val="]"/>
       </fn>
       <true/>
       <fn name="concat">
        <atomSing card="?" diag="0|0||fn:concat">
         <varRef name="curPath" slot="0"/>
        </atomSing>
        <fn name="local-name">
         <dot type="element()"/>
        </fn>
       </fn>
      </choose>
      <sequence line="2646">
       <applyT mode="Q{}form-check" bSlot="0">
        <axis role="select" name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
        <withParam name="Q{}curPath" as="xs:string">
         <fn line="2647" name="concat">
          <varRef name="updatedPath" slot="3"/>
          <str val="/"/>
         </fn>
        </withParam>
        <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
         <varRef line="2648" name="pendingUpdates" slot="2"/>
        </withParam>
       </applyT>
       <let line="2654" var="associated-form-control" as="node()*" slot="4" eval="3">
        <slash>
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
         <fn name="key">
          <str val="Q{http://saxon.sf.net/}kk101"/>
          <varRef name="updatedPath" slot="3"/>
          <dot type="document-node()"/>
         </fn>
        </slash>
        <sequence line="2657">
         <choose>
          <fn name="exists">
           <varRef name="associated-form-control" slot="4"/>
          </fn>
          <valueOf line="2661">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <applyT mode="Q{}get-field" bSlot="1">
                <varRef role="select" name="associated-form-control" slot="4"/>
               </applyT>
              </mergeAdj>
             </data>
            </convert>
            <str val=""/>
           </fn>
          </valueOf>
          <and line="2664" op="and">
           <fn name="exists">
            <varRef name="pendingUpdates" slot="2"/>
           </fn>
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
            <check card="1" diag="0|0||map:contains">
             <varRef name="pendingUpdates" slot="2"/>
            </check>
            <varRef name="updatedPath" slot="3"/>
           </ifCall>
          </and>
          <valueOf line="2672">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
            <check card="1" diag="0|0||map:get">
             <varRef name="pendingUpdates" slot="2"/>
            </check>
            <varRef name="updatedPath" slot="3"/>
           </ifCall>
          </valueOf>
          <true/>
          <valueOf line="2682">
           <fn name="normalize-space">
            <fn name="string-join">
             <data>
              <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
             </data>
             <str val=""/>
            </fn>
           </fn>
          </valueOf>
         </choose>
         <forEachGroup line="2689" algorithm="by">
          <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
          <fn role="key" name="local-name">
           <dot type="element()"/>
          </fn>
          <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
          <let role="content" line="2691" var="updatedChildPath" as="xs:string" slot="5" eval="8">
           <fn name="concat">
            <varRef name="updatedPath" slot="3"/>
            <str val="/"/>
            <check card="?" diag="0|2||fn:concat">
             <currentGroupingKey/>
            </check>
           </fn>
           <let line="2696" var="vv:v0" as="xs:string" slot="6" eval="13">
            <fn name="concat">
             <varRef name="updatedChildPath" slot="5"/>
             <str val="["/>
            </fn>
            <choose line="2699">
             <or op="or">
              <fn name="exists">
               <tail start="2">
                <currentGroup/>
               </tail>
              </fn>
              <fn name="exists">
               <filter line="2696" flags="b">
                <slash simple="1">
                 <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                 <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                </slash>
                <fn name="starts-with">
                 <cvUntyped to="xs:string">
                  <attVal name="Q{}data-ref" chk="0"/>
                 </cvUntyped>
                 <varRef name="vv:v0" slot="6"/>
                </fn>
               </filter>
              </fn>
             </or>
             <let line="2704" var="vv:v1" as="xs:string" slot="7" eval="13">
              <fn name="concat">
               <varRef name="updatedPath" slot="3"/>
               <str val="/"/>
              </fn>
              <forEach line="2701">
               <currentGroup/>
               <copy line="2703" flags="cin">
                <applyT role="content" mode="Q{}form-check" bSlot="2">
                 <dot role="select"/>
                 <withParam name="Q{}curPath" as="xs:string">
                  <varRef line="2704" name="vv:v1" slot="7"/>
                 </withParam>
                 <withParam name="Q{}position" as="xs:integer">
                  <fn line="2705" name="position"/>
                 </withParam>
                 <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
                  <varRef line="2706" name="pendingUpdates" slot="2"/>
                 </withParam>
                </applyT>
               </copy>
              </forEach>
             </let>
             <true/>
             <let line="2718" var="vv:v2" as="xs:string" slot="8" eval="13">
              <fn name="concat">
               <varRef name="updatedPath" slot="3"/>
               <str val="/"/>
              </fn>
              <forEach line="2715">
               <currentGroup/>
               <copy line="2717" flags="cin">
                <applyT role="content" mode="Q{}form-check" bSlot="3">
                 <dot role="select"/>
                 <withParam name="Q{}curPath" as="xs:string">
                  <varRef line="2718" name="vv:v2" slot="8"/>
                 </withParam>
                 <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
                  <varRef line="2719" name="pendingUpdates" slot="2"/>
                 </withParam>
                </applyT>
               </copy>
              </forEach>
             </let>
            </choose>
           </let>
          </let>
         </forEachGroup>
        </sequence>
       </let>
      </sequence>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="1" rank="0" minImp="0" slots="4" flags="s" line="2732" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2733">
     <param name="Q{}curPath" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <param line="2734" name="Q{}pendingUpdates" slot="1" as="map(xs:string, xs:string)?">
      <empty role="select"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
       <check card="?" diag="8|0|XTTE0590|pendingUpdates">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <let line="2735" var="updatedPath" as="xs:string" slot="2" eval="8">
      <fn name="concat">
       <atomSing card="?" diag="0|0||fn:concat">
        <varRef name="curPath" slot="0"/>
       </atomSing>
       <str val="@"/>
       <fn name="local-name">
        <dot type="attribute()"/>
       </fn>
      </fn>
      <let line="2744" var="associated-form-control" as="node()*" slot="3" eval="3">
       <slash>
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
        <fn name="key">
         <str val="Q{http://saxon.sf.net/}kk101"/>
         <varRef name="updatedPath" slot="2"/>
         <dot type="document-node()"/>
        </fn>
       </slash>
       <choose line="2747">
        <fn name="exists">
         <varRef name="associated-form-control" slot="3"/>
        </fn>
        <compAtt line="2750">
         <fn role="name" name="local-name">
          <dot type="attribute()"/>
         </fn>
         <fn role="select" line="2752" name="string-join">
          <convert from="xs:anyAtomicType" to="xs:string">
           <data>
            <mergeAdj>
             <applyT mode="Q{}get-field" bSlot="4">
              <varRef role="select" name="associated-form-control" slot="3"/>
             </applyT>
            </mergeAdj>
           </data>
          </convert>
          <str val=""/>
         </fn>
        </compAtt>
        <and line="2755" op="and">
         <fn name="exists">
          <varRef name="pendingUpdates" slot="1"/>
         </fn>
         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
          <check card="1" diag="0|0||map:contains">
           <varRef name="pendingUpdates" slot="1"/>
          </check>
          <varRef name="updatedPath" slot="2"/>
         </ifCall>
        </and>
        <compAtt line="2756">
         <fn role="name" name="local-name">
          <dot type="attribute()"/>
         </fn>
         <ifCall role="select" line="2757" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
          <check card="1" diag="0|0||map:get">
           <varRef name="pendingUpdates" slot="1"/>
          </check>
          <varRef name="updatedPath" slot="2"/>
         </ifCall>
        </compAtt>
        <true/>
        <forEach line="2761">
         <dot type="attribute()"/>
         <copy flags="cin">
          <empty role="content"/>
         </copy>
        </forEach>
       </choose>
      </let>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="5" binds="5">
  <mode name="Q{}update-ref" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="2" rank="0" minImp="0" slots="2" flags="s" line="1683" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1684">
     <param name="Q{}path" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1685" name="Q{}position" slot="1">
      <int role="select" val="0"/>
      <supplied role="conversion" slot="1"/>
     </param>
     <copy line="1688" flags="cin">
      <applyT role="content" mode="Q{}update-ref" bSlot="0">
       <sequence role="select">
        <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
        <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
       </sequence>
       <withParam name="Q{}path" as="xs:string">
        <varRef line="1689" name="path" slot="0"/>
       </withParam>
       <withParam name="Q{}position">
        <varRef line="1690" name="position" slot="1"/>
       </withParam>
      </applyT>
     </copy>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="1" rank="0" minImp="0" slots="3" flags="s" line="1664" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1665">
     <param name="Q{}path" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1666" name="Q{}position" slot="1">
      <int role="select" val="0"/>
      <supplied role="conversion" slot="1"/>
     </param>
     <let line="1668" var="path-updated" as="xs:string" slot="2" eval="7">
      <choose>
       <gc op="&gt;" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="position" slot="1"/>
        </data>
        <int val="0"/>
       </gc>
       <fn name="concat">
        <varRef name="path" slot="0"/>
        <str val="["/>
        <atomSing card="?" diag="0|2||fn:concat">
         <varRef name="position" slot="1"/>
        </atomSing>
        <str val="]"/>
       </fn>
       <true/>
       <varRef name="path" slot="0"/>
      </choose>
      <choose line="1672">
       <vc op="eq" onEmpty="0" comp="CCC">
        <fn name="substring">
         <cvUntyped to="xs:string">
          <data>
           <dot type="attribute()"/>
          </data>
         </cvUntyped>
         <int val="1"/>
         <fn line="1669" name="string-length">
          <varRef name="path" slot="0"/>
         </fn>
        </fn>
        <varRef name="path" slot="0"/>
       </vc>
       <compAtt line="1673">
        <fn role="name" line="1667" name="name">
         <dot type="attribute()"/>
        </fn>
        <convert role="select" line="1674" from="xs:untypedAtomic" to="xs:string">
         <cast as="xs:untypedAtomic" emptiable="0">
          <fn name="concat">
           <varRef name="path-updated" slot="2"/>
           <fn name="substring">
            <cvUntyped to="xs:string">
             <data>
              <dot type="attribute()"/>
             </data>
            </cvUntyped>
            <arith op="+" calc="i+i">
             <fn name="string-length">
              <varRef name="path-updated" slot="2"/>
             </fn>
             <int val="1"/>
            </arith>
           </fn>
          </fn>
         </cast>
        </convert>
       </compAtt>
       <true/>
       <copyOf line="1678" flags="vc">
        <dot type="attribute()"/>
       </copyOf>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="2.0" seq="0" rank="1" minImp="0" slots="3" flags="s" line="1650" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="attribute(Q{}data-action)" jsTest="return SaxonJS.U.isAttr(item) &amp;&amp; item.name==='data-action'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1651">
     <param name="Q{}path" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1652" name="Q{}position" slot="1">
      <int role="select" val="0"/>
      <supplied role="conversion" slot="1"/>
     </param>
     <let line="1654" var="myid" as="xs:string" slot="2" eval="8">
      <fn name="concat">
       <fn name="generate-id">
        <dot type="attribute(Q{}data-action)"/>
       </fn>
       <atomSing card="?" diag="0|1||fn:concat">
        <varRef name="position" slot="1"/>
       </atomSing>
      </fn>
      <sequence line="1656">
       <att name="data-old-action">
        <convert from="xs:untypedAtomic" to="xs:string">
         <data>
          <dot type="attribute(Q{}data-action)"/>
         </data>
        </convert>
       </att>
       <att line="1659" name="data-action">
        <convert from="xs:untypedAtomic" to="xs:string">
         <cast as="xs:untypedAtomic" emptiable="0">
          <choose>
           <fn name="exists">
            <slash>
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
             <fn name="key">
              <str val="Q{http://saxon.sf.net/}kk102"/>
              <varRef name="myid" slot="2"/>
              <dot type="document-node()"/>
             </fn>
            </slash>
           </fn>
           <fn name="concat">
            <fn name="generate-id">
             <dot type="attribute(Q{}data-action)"/>
            </fn>
            <fn name="generate-id">
             <dot type="attribute(Q{}data-action)"/>
            </fn>
           </fn>
           <true/>
           <varRef name="myid" slot="2"/>
          </choose>
         </cast>
        </convert>
       </att>
      </sequence>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="6" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}resolveXPathStrings" line="563" module="saxon-xforms.xsl" eval="7" flags="pU" as="xs:string" slots="5">
   <arg name="base" as="xs:string"/>
   <arg name="relative" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="568" var="parentCallCount" as="xs:integer" slot="2" eval="7">
    <choose>
     <fn name="contains">
      <varRef name="relative" slot="1"/>
      <str val="/"/>
     </fn>
     <fn name="count">
      <filter flags="b">
       <fn name="tokenize">
        <varRef name="relative" slot="1"/>
        <str val="/"/>
        <str val=""/>
       </fn>
       <vc op="eq" comp="CCC">
        <dot type="xs:string"/>
        <str val=".."/>
       </vc>
      </filter>
     </fn>
     <fn name="contains">
      <varRef name="relative" slot="1"/>
      <str val=".."/>
     </fn>
     <int val="1"/>
     <true/>
     <int val="0"/>
    </choose>
    <let line="571" var="slashes" as="xs:integer*" slot="3" eval="3">
     <choose>
      <fn name="contains">
       <varRef name="base" slot="0"/>
       <str val="/"/>
      </fn>
      <fn name="index-of">
       <fn name="string-to-codepoints">
        <varRef name="base" slot="0"/>
       </fn>
       <int val="47"/>
      </fn>
      <true/>
      <int val="0"/>
     </choose>
     <choose line="601">
      <compareToInt op="gt" val="0">
       <varRef name="parentCallCount" slot="2"/>
      </compareToInt>
      <fn line="605" name="concat">
       <fn name="substring">
        <varRef name="base" slot="0"/>
        <int val="1"/>
        <choose line="582">
         <and op="and">
          <vc op="ge" onEmpty="0" comp="CAVC">
           <fn name="count">
            <varRef name="slashes" slot="3"/>
           </fn>
           <varRef name="parentCallCount" slot="2"/>
          </vc>
          <compareToInt op="gt" val="0">
           <varRef name="parentCallCount" slot="2"/>
          </compareToInt>
         </and>
         <let line="583" var="vv:v0" as="xs:integer" slot="4" eval="13">
          <arith op="-" calc="i-i">
           <varRef name="parentCallCount" slot="2"/>
           <int val="1"/>
          </arith>
          <check card="1" diag="3|0|XTTE0570|parentSlash">
           <filter flags="p">
            <varRef name="slashes" slot="3"/>
            <arith op="-" calc="i-i">
             <fn name="last"/>
             <varRef name="vv:v0" slot="4"/>
            </arith>
           </filter>
          </check>
         </let>
         <true/>
         <check line="586" card="1" diag="3|0|XTTE0570|parentSlash">
          <lastOf>
           <varRef name="slashes" slot="3"/>
          </lastOf>
         </check>
        </choose>
       </fn>
       <fn name="replace">
        <varRef name="relative" slot="1"/>
        <str val="\.\./"/>
        <str val=""/>
        <str val=""/>
       </fn>
      </fn>
      <true/>
      <fn line="608" name="concat">
       <varRef name="base" slot="0"/>
       <str val="/"/>
       <varRef name="relative" slot="1"/>
      </fn>
     </choose>
    </let>
   </let>
  </function>
 </co>
 <co id="7" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}current-date" line="68" module="xforms-function-library.xsl" eval="7" flags="pU" as="xs:string" slots="0">
   <treat role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="69" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|today">
    <check card="1" diag="3|0|XTTE0570|today">
     <cvUntyped to="xs:string">
      <data>
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getCurrentDate"/>
        <arrayBlock/>
       </ifCall>
      </data>
     </cvUntyped>
    </check>
   </treat>
  </function>
 </co>
 <co id="8" binds="">
  <globalVariable name="Q{}debugMode" type="xs:boolean" line="26" module="saxon-xforms.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.boolean.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <false/>
  </globalVariable>
 </co>
 <co id="9" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}getWhileStatement" line="549" module="saxon-xforms.xsl" eval="7" flags="pU" as="xs:string?" slots="3">
   <arg name="map" as="map(*)"/>
   <choose role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="552">
    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
     <varRef name="map" slot="0"/>
     <str val="@while"/>
    </ifCall>
    <treat line="553" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getWhileStatement">
     <check card="?" diag="5|0|XTTE0780|xforms:getWhileStatement">
      <cvUntyped to="xs:string">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="map" slot="0"/>
         <str val="@while"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
    <true/>
    <treat line="556" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getWhileStatement">
     <check card="?" diag="5|0|XTTE0780|xforms:getWhileStatement">
      <cvUntyped to="xs:string">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
          <check card="1" diag="0|0||map:get">
           <let var="vv:LHS991505714" as="map(*)" slot="1" eval="1">
            <varRef name="map" slot="0"/>
            <for var="vv:STAR385242642" as="xs:anyAtomicType" slot="2">
             <ifCall role="in" name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
              <varRef name="vv:LHS991505714" slot="1"/>
             </ifCall>
             <ifCall role="return" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
              <varRef name="vv:LHS991505714" slot="1"/>
              <varRef name="vv:STAR385242642" slot="2"/>
             </ifCall>
            </for>
           </let>
          </check>
         </treat>
         <str val="@while"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
   </choose>
  </function>
 </co>
 <co id="10" binds="10 10">
  <mode name="Q{}insert-node" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="11" flags="s" line="1561" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1562">
     <param name="Q{}insert-node" slot="0" flags="i" as="node()">
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|insert-node">
       <check card="1" diag="8|0|XTTE0590|insert-node">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1563" name="Q{}path" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1564" name="Q{}current-path" slot="2" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|current-path">
       <check card="1" diag="8|0|XTTE0590|current-path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1565" var="updatedPath" as="xs:string" slot="3" eval="8">
      <fn name="concat">
       <varRef name="current-path" slot="2"/>
       <str val="/"/>
       <fn name="local-name">
        <dot type="element()"/>
       </fn>
      </fn>
      <let line="1567" var="name" as="xs:string" slot="4" eval="8">
       <fn name="local-name">
        <dot type="element()"/>
       </fn>
       <let line="1569" var="currentPosition" as="xs:integer" slot="5" eval="7">
        <let var="vv:current585323788" as="element()" slot="6" eval="7">
         <dot type="element()"/>
         <let var="vv:v0" as="xs:string" slot="7" eval="13">
          <fn name="local-name">
           <varRef name="vv:current585323788" slot="6"/>
          </fn>
          <arith op="+" calc="i+i">
           <fn name="count">
            <filter flags="b">
             <slash simple="1">
              <dot type="element()"/>
              <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </slash>
             <vc op="eq" comp="CCC">
              <fn name="local-name">
               <dot type="element()"/>
              </fn>
              <varRef name="vv:v0" slot="7"/>
             </vc>
            </filter>
           </fn>
           <int val="1"/>
          </arith>
         </let>
        </let>
        <let line="1572" var="updatedPath2" as="document-node()" slot="8" eval="7">
         <doc line="1573" flags="t" validation="preserve">
          <sequence>
           <valueOf flags="l">
            <varRef name="updatedPath" slot="3"/>
           </valueOf>
           <choose line="1575">
            <fn name="exists">
             <let var="vv:current-28121473" as="element()" slot="9" eval="7">
              <dot type="element()"/>
              <let var="vv:v1" as="xs:string" slot="10" eval="13">
               <fn name="local-name">
                <varRef name="vv:current-28121473" slot="9"/>
               </fn>
               <filter flags="b">
                <union op="|">
                 <fn name="reverse">
                  <slash simple="1">
                   <dot type="element()"/>
                   <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                  </slash>
                 </fn>
                 <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                </union>
                <vc op="eq" comp="CCC">
                 <fn name="local-name">
                  <dot type="element()"/>
                 </fn>
                 <varRef name="vv:v1" slot="10"/>
                </vc>
               </filter>
              </let>
             </let>
            </fn>
            <valueOf line="1576" flags="l">
             <fn name="concat">
              <str val="["/>
              <varRef name="currentPosition" slot="5"/>
              <str val="]"/>
             </fn>
            </valueOf>
           </choose>
          </sequence>
         </doc>
         <choose line="1582">
          <and op="and">
           <vc op="eq" onEmpty="0" comp="CCC">
            <varRef name="updatedPath" slot="3"/>
            <varRef name="path" slot="1"/>
           </vc>
           <vc line="1571" op="eq" onEmpty="0" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
            <fn name="count">
             <filter flags="b">
              <slash>
               <axis name="parent" nodeTest="element()" jsTest="return item.nodeType===1;"/>
               <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
              </slash>
              <vc op="eq" comp="CCC">
               <fn name="local-name">
                <dot type="element()"/>
               </fn>
               <varRef name="name" slot="4"/>
              </vc>
             </filter>
            </fn>
            <varRef name="currentPosition" slot="5"/>
           </vc>
          </and>
          <sequence line="1586">
           <copy flags="cin">
            <applyT role="content" mode="Q{}insert-node" bSlot="0">
             <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
             <withParam name="Q{}insert-node" as="node()">
              <varRef line="1588" name="insert-node" slot="0"/>
             </withParam>
             <withParam name="Q{}path" as="xs:string">
              <varRef line="1589" name="path" slot="1"/>
             </withParam>
             <withParam name="Q{}current-path" as="document-node()">
              <varRef line="1590" name="updatedPath2" slot="8"/>
             </withParam>
            </applyT>
           </copy>
           <copyOf line="1593" flags="vc">
            <varRef name="insert-node" slot="0"/>
           </copyOf>
          </sequence>
          <true/>
          <copy line="1598" flags="cin">
           <applyT role="content" mode="Q{}insert-node" bSlot="1">
            <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
            <withParam name="Q{}insert-node" as="node()">
             <varRef line="1599" name="insert-node" slot="0"/>
            </withParam>
            <withParam name="Q{}path" as="xs:string">
             <varRef line="1600" name="path" slot="1"/>
            </withParam>
            <withParam name="Q{}current-path" as="document-node()">
             <varRef line="1601" name="updatedPath2" slot="8"/>
            </withParam>
           </applyT>
          </copy>
         </choose>
        </let>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="11" binds="12">
  <function name="Q{http://www.w3.org/2002/xforms}convert-json-to-xml" line="2548" module="saxon-xforms.xsl" eval="7" flags="pU" as="node()" slots="2">
   <arg name="jinstance" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2554" var="result" as="document-node()" slot="1" eval="7">
    <doc line="2556" validation="preserve">
     <applyT mode="Q{}jxml-xml" bSlot="0">
      <doc role="select" line="2551" validation="preserve">
       <fn name="json-to-xml">
        <varRef name="jinstance" slot="0"/>
       </fn>
      </doc>
     </applyT>
    </doc>
    <varRef line="2559" name="result" slot="1"/>
   </let>
  </function>
 </co>
 <co id="13" binds="14">
  <function name="Q{http://www.w3.org/2002/xforms}convert-xml-to-jxml" line="2471" module="saxon-xforms.xsl" eval="7" flags="pU" as="node()" slots="2">
   <arg name="xinstance" as="node()"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2473" var="rep-xml" as="document-node()" slot="1" eval="7">
    <doc line="2475" validation="preserve">
     <elem name="map" nsuri="http://www.w3.org/2005/xpath-functions" flags="dl">
      <applyT mode="Q{}json-xml" bSlot="0">
       <varRef role="select" name="xinstance" slot="0"/>
      </applyT>
     </elem>
    </doc>
    <varRef line="2478" name="rep-xml" slot="1"/>
   </let>
  </function>
 </co>
 <co id="15" vis="PUBLIC" binds="">
  <globalParam name="Q{}xforms-instance-id" type="item()*" line="23" module="saxon-xforms.xsl" visibility="PUBLIC" jsAcceptor="return val;" jsCardCheck="function c() {return true;};">
   <str val="xforms-jinstance"/>
  </globalParam>
 </co>
 <co id="16" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}getIfStatement" line="537" module="saxon-xforms.xsl" eval="7" flags="pU" as="xs:string?" slots="1">
   <arg name="map" as="map(*)"/>
   <choose role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="540">
    <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
     <varRef name="map" slot="0"/>
     <str val="@if"/>
    </ifCall>
    <treat line="541" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getIfStatement">
     <check card="?" diag="5|0|XTTE0780|xforms:getIfStatement">
      <cvUntyped to="xs:string">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="map" slot="0"/>
         <str val="@if"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
    <true/>
    <treat line="544" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="5|0|XTTE0780|xforms:getIfStatement">
     <check card="?" diag="5|0|XTTE0780|xforms:getIfStatement">
      <cvUntyped to="xs:string">
       <data>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="map" slot="0"/>
         <str val="@if"/>
        </ifCall>
       </data>
      </cvUntyped>
     </check>
    </treat>
   </choose>
  </function>
 </co>
 <co id="17" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}check-constraints-on-fields" line="813" module="saxon-xforms.xsl" eval="8" flags="pU" as="item()*" slots="3">
   <arg name="updatedInstanceXML" as="document-node()"/>
   <forEach role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="820">
    <filter line="816" flags="b">
     <slash simple="1">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
      <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </slash>
     <fn name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-constraint)" jsTest="return item.name==='data-constraint'"/>
     </fn>
    </filter>
    <let line="821" var="contexti" as="node()" slot="1" eval="7">
     <treat line="822" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|contexti">
      <check card="1" diag="3|0|XTTE0570|contexti">
       <evaluate dxns="">
        <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
         <cvUntyped to="xs:string">
          <attVal name="Q{}data-ref" chk="0"/>
         </cvUntyped>
        </check>
        <varRef role="cxt" name="updatedInstanceXML" slot="0"/>
        <str role="sa" val="no"/>
        <map role="wp" size="0"/>
       </evaluate>
      </check>
     </treat>
     <let line="825" var="resulti" as="xs:boolean" slot="2" eval="7">
      <treat line="828" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|resulti">
       <check card="1" diag="3|0|XTTE0570|resulti">
        <cvUntyped to="xs:boolean">
         <data>
          <evaluate dxns="">
           <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
            <cvUntyped to="xs:string">
             <attVal name="Q{}data-constraint" chk="0"/>
            </cvUntyped>
           </check>
           <varRef role="cxt" name="contexti" slot="1"/>
           <str role="sa" val="no"/>
           <map role="wp" size="0"/>
          </evaluate>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <choose line="836">
       <fn name="not">
        <varRef name="resulti" slot="2"/>
       </fn>
       <dot type="element()"/>
      </choose>
     </let>
    </let>
   </forEach>
  </function>
 </co>
 <co id="18" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}checkRelevantFields" line="270" module="saxon-xforms.xsl" eval="8" flags="pU" as="item()*" slots="13">
   <arg name="refElement" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="273" var="pendingUpdatesi" as="map(xs:string, xs:string)?" slot="1" eval="7">
    <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|pendingUpdatesi">
     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
      <check card="1" diag="0|0||ixsl:call">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
      </check>
      <str val="getPendingUpdates"/>
      <arrayBlock/>
     </ifCall>
    </treat>
    <let line="276" var="updatesi" as="map(xs:string, xs:string)?" slot="2" eval="7">
     <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|updatesi">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
       <check card="1" diag="0|0||ixsl:call">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
       </check>
       <str val="getUpdates"/>
       <arrayBlock/>
      </ifCall>
     </treat>
     <let line="287" var="relevantMap" as="map(xs:string, xs:string)" slot="3" eval="7">
      <treat as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|relevantMap">
       <check card="1" diag="3|0|XTTE0570|relevantMap">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="getRelevantMap"/>
         <arrayBlock/>
        </ifCall>
       </check>
      </treat>
      <let line="288" var="mapKeys" as="xs:anyAtomicType*" slot="4" eval="3">
       <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
        <varRef name="relevantMap" slot="3"/>
       </ifCall>
       <let line="330" var="updatedInstanceXML4" as="item()?" slot="5" eval="8">
        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="getInstance"/>
         <arrayBlock/>
        </ifCall>
        <sequence line="332">
         <forEach>
          <sequence line="291">
           <forEach>
            <varRef name="mapKeys" slot="4"/>
            <choose line="292">
             <fn name="matches">
              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
               <varRef name="relevantMap" slot="3"/>
               <dot type="xs:anyAtomicType"/>
              </ifCall>
              <varRef name="refElement" slot="0"/>
              <str val=""/>
             </fn>
             <dot line="293" type="xs:anyAtomicType"/>
            </choose>
           </forEach>
           <forEach line="274">
            <choose>
             <fn name="exists">
              <varRef name="pendingUpdatesi" slot="1"/>
             </fn>
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
              <check card="1" diag="0|0||map:keys">
               <varRef name="pendingUpdatesi" slot="1"/>
              </check>
             </ifCall>
            </choose>
            <let line="299" var="keyi" as="xs:string?" slot="6" eval="7">
             <lastOf>
              <fn name="tokenize">
               <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:tokenize">
                <cvUntyped to="xs:string">
                 <dot type="xs:anyAtomicType"/>
                </cvUntyped>
               </treat>
               <str val="/"/>
               <str val=""/>
              </fn>
             </lastOf>
             <let line="302" var="vv:v0" as="xs:string" slot="7" eval="13">
              <check card="1" diag="0|1||fn:matches">
               <varRef name="keyi" slot="6"/>
              </check>
              <forEach line="300">
               <varRef name="mapKeys" slot="4"/>
               <choose line="302">
                <fn name="matches">
                 <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                  <varRef name="relevantMap" slot="3"/>
                  <dot type="xs:anyAtomicType"/>
                 </ifCall>
                 <varRef name="vv:v0" slot="7"/>
                 <str val=""/>
                </fn>
                <dot line="303" type="xs:anyAtomicType"/>
               </choose>
              </forEach>
             </let>
            </let>
           </forEach>
           <forEach line="277">
            <choose>
             <fn name="exists">
              <varRef name="updatesi" slot="2"/>
             </fn>
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
              <check card="1" diag="0|0||map:keys">
               <varRef name="updatesi" slot="2"/>
              </check>
             </ifCall>
            </choose>
            <let line="311" var="keyi" as="xs:string?" slot="8" eval="7">
             <lastOf>
              <fn name="tokenize">
               <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:tokenize">
                <cvUntyped to="xs:string">
                 <dot type="xs:anyAtomicType"/>
                </cvUntyped>
               </treat>
               <str val="/"/>
               <str val=""/>
              </fn>
             </lastOf>
             <let line="314" var="vv:v1" as="xs:string" slot="9" eval="13">
              <check card="1" diag="0|1||fn:matches">
               <varRef name="keyi" slot="8"/>
              </check>
              <forEach line="312">
               <varRef name="mapKeys" slot="4"/>
               <choose line="314">
                <fn name="matches">
                 <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                  <varRef name="relevantMap" slot="3"/>
                  <dot type="xs:anyAtomicType"/>
                 </ifCall>
                 <varRef name="vv:v1" slot="9"/>
                 <str val=""/>
                </fn>
                <dot line="315" type="xs:anyAtomicType"/>
               </choose>
              </forEach>
             </let>
            </let>
           </forEach>
          </sequence>
          <let line="333" var="keyi" as="xs:anyAtomicType" slot="10" eval="7">
           <dot type="xs:anyAtomicType"/>
           <let line="334" var="context" as="node()*" slot="11" eval="3">
            <slash>
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
             <fn name="key">
              <str val="Q{http://saxon.sf.net/}kk101"/>
              <varRef name="keyi" slot="10"/>
              <dot type="document-node()"/>
             </fn>
            </slash>
            <let line="335" var="relevantCheck" as="xs:boolean" slot="12" eval="7">
             <treat line="336" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|relevantCheck">
              <check card="1" diag="3|0|XTTE0570|relevantCheck">
               <cvUntyped to="xs:boolean">
                <data>
                 <evaluate dxns="">
                  <fn role="xpath" name="concat">
                   <dot type="xs:anyAtomicType"/>
                   <str val="/"/>
                   <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                    <varRef name="relevantMap" slot="3"/>
                    <dot type="xs:anyAtomicType"/>
                   </ifCall>
                  </fn>
                  <varRef role="cxt" name="updatedInstanceXML4" slot="5"/>
                  <str role="sa" val="no"/>
                  <map role="wp" size="0"/>
                 </evaluate>
                </data>
               </cvUntyped>
              </check>
             </treat>
             <choose line="339">
              <varRef name="relevantCheck" slot="12"/>
              <ifCall line="346" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
               <str val="style.display"/>
               <str val="inline"/>
               <check card="1" diag="0|2||ixsl:set-property">
                <conditionalSort>
                 <fn name="exists">
                  <tail start="2">
                   <varRef name="context" slot="11"/>
                  </tail>
                 </fn>
                 <docOrder intra="1">
                  <slash>
                   <varRef name="context" slot="11"/>
                   <axis name="parent" nodeTest="(element()|document-node())" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);"/>
                  </slash>
                 </docOrder>
                </conditionalSort>
               </check>
              </ifCall>
              <true/>
              <ifCall line="349" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
               <str val="style.display"/>
               <str val="none"/>
               <check card="1" diag="0|2||ixsl:set-property">
                <conditionalSort>
                 <fn name="exists">
                  <tail start="2">
                   <varRef name="context" slot="11"/>
                  </tail>
                 </fn>
                 <docOrder intra="1">
                  <slash>
                   <varRef name="context" slot="11"/>
                   <axis name="parent" nodeTest="(element()|document-node())" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);"/>
                  </slash>
                 </docOrder>
                </conditionalSort>
               </check>
              </ifCall>
             </choose>
            </let>
           </let>
          </let>
         </forEach>
         <ifCall line="355" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="clearPendingUpdates"/>
          <arrayBlock/>
         </ifCall>
         <ifCall line="356" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="clearUpdates"/>
          <arrayBlock/>
         </ifCall>
        </sequence>
       </let>
      </let>
     </let>
    </let>
   </let>
  </function>
 </co>
 <co id="19" vis="PUBLIC" binds="">
  <globalParam name="Q{}xforms-doc-id" type="item()*" line="24" module="saxon-xforms.xsl" visibility="PUBLIC" jsAcceptor="return val;" jsCardCheck="function c() {return true;};">
   <str val="xforms-doc"/>
  </globalParam>
 </co>
 <co id="20" binds="2 6 21 2 18 2 16 6 21 2 18">
  <mode name="Q{http://saxonica.com/ns/interactiveXSLT}onchange" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.5" seq="1" rank="0" minImp="0" slots="16" flags="s" line="614" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}select)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='select';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="614" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
     </fn>
    </p.withPredicate>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="616" var="refi" as="attribute(Q{}data-ref)?" slot="0" eval="8">
     <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
     <let line="626" var="updatedInstanceXML" as="document-node()" slot="1" eval="7">
      <doc line="627" validation="preserve">
       <applyT line="628" mode="Q{}form-check-initial" bSlot="0">
        <ifCall role="select" line="627" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="getInstance"/>
         <arrayBlock/>
        </ifCall>
       </applyT>
      </doc>
      <sequence line="634">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="setPendingUpdates"/>
        <arrayBlock>
         <treat line="631" as="map(°)" jsTest="function k(item) {return SaxonJS.U.Atomic.anyAtomicType.matches(item);};function v(item) {return true;};function c() {return true;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||pendingInstanceUpdates">
          <map size="0"/>
         </treat>
        </arrayBlock>
       </ifCall>
       <ifCall line="635" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="setUpdates"/>
        <arrayBlock>
         <treat line="632" as="map(°)" jsTest="function k(item) {return SaxonJS.U.Atomic.anyAtomicType.matches(item);};function v(item) {return true;};function c() {return true;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||instanceUpdates">
          <map size="0"/>
         </treat>
        </arrayBlock>
       </ifCall>
       <forEach line="641">
        <treat line="622" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|xforms-actions">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="getAction"/>
          <arrayBlock>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
           </fn>
          </arrayBlock>
         </ifCall>
        </treat>
        <let line="642" var="action-map" as="map(*)" slot="2" eval="7">
         <dot type="map(*)"/>
         <let line="650" var="context" as="node()?" slot="3" eval="7">
          <treat line="651" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|context">
           <check card="?" diag="3|0|XTTE0570|context">
            <evaluate dxns="">
             <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
              <check card="1" diag="4|0||xsl:evaluate/xpath">
               <cvUntyped to="xs:string">
                <data>
                 <ifCall line="646" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                  <varRef name="action-map" slot="2"/>
                  <str val="@ref"/>
                 </ifCall>
                </data>
               </cvUntyped>
              </check>
             </treat>
             <varRef role="cxt" name="updatedInstanceXML" slot="1"/>
             <str role="sa" val="no"/>
             <map role="wp" size="0"/>
            </evaluate>
           </check>
          </treat>
          <let line="654" var="ifVar" as="item()*" slot="4" eval="3">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
            <varRef name="action-map" slot="2"/>
            <str val="@if"/>
           </ifCall>
           <let line="665" var="ifExecuted" as="xs:boolean" slot="5" eval="7">
            <choose line="667">
             <fn name="exists">
              <varRef name="ifVar" slot="4"/>
             </fn>
             <treat as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|ifExecuted">
              <check card="1" diag="3|0|XTTE0570|ifExecuted">
               <cvUntyped to="xs:boolean">
                <data>
                 <evaluate dxns="">
                  <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
                   <check card="1" diag="4|0||xsl:evaluate/xpath">
                    <cvUntyped to="xs:string">
                     <data>
                      <varRef name="ifVar" slot="4"/>
                     </data>
                    </cvUntyped>
                   </check>
                  </treat>
                  <varRef role="cxt" name="context" slot="3"/>
                  <str role="sa" val="no"/>
                  <map role="wp" size="0"/>
                 </evaluate>
                </data>
               </cvUntyped>
              </check>
             </treat>
             <true/>
             <true/>
            </choose>
            <choose line="675">
             <varRef name="ifExecuted" slot="5"/>
             <choose line="682">
              <fn name="exists">
               <ifCall line="681" name="Q{http://www.w3.org/2005/xpath-functions/map}find" type="function(*)">
                <varRef name="action-map" slot="2"/>
                <str val="setvalue"/>
               </ifCall>
              </fn>
              <let line="703" var="vv:v0" as="xs:string" slot="6" eval="13">
               <check card="1" diag="0|0||xforms:resolveXPathStrings">
                <cvUntyped to="xs:string">
                 <data>
                  <varRef name="refi" slot="0"/>
                 </data>
                </cvUntyped>
               </check>
               <forEach line="690">
                <ifCall line="685" name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                 <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                  <varRef name="action-map" slot="2"/>
                  <str val="setvalue"/>
                 </ifCall>
                </ifCall>
                <let line="691" var="ifVari" as="item()*" slot="7" eval="3">
                 <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                  <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                   <dot/>
                  </treat>
                  <str val="@if"/>
                 </ifCall>
                 <let line="692" var="ifExecutedi" as="xs:boolean" slot="8" eval="7">
                  <choose line="694">
                   <fn name="exists">
                    <varRef name="ifVari" slot="7"/>
                   </fn>
                   <treat as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|ifExecutedi">
                    <check card="1" diag="3|0|XTTE0570|ifExecutedi">
                     <cvUntyped to="xs:boolean">
                      <data>
                       <evaluate dxns="">
                        <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
                         <check card="1" diag="4|0||xsl:evaluate/xpath">
                          <cvUntyped to="xs:string">
                           <data>
                            <varRef name="ifVari" slot="7"/>
                           </data>
                          </cvUntyped>
                         </check>
                        </treat>
                        <varRef role="cxt" name="context" slot="3"/>
                        <str role="sa" val="no"/>
                        <map role="wp" size="0"/>
                       </evaluate>
                      </data>
                     </cvUntyped>
                    </check>
                   </treat>
                   <true/>
                   <true/>
                  </choose>
                  <let line="703" var="refz" as="xs:string" slot="9" eval="7">
                   <ufCall name="Q{http://www.w3.org/2002/xforms}resolveXPathStrings" tailCall="false" bSlot="1" eval="6 4">
                    <varRef name="vv:v0" slot="6"/>
                    <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||xforms:resolveXPathStrings">
                     <check card="1" diag="0|1||xforms:resolveXPathStrings">
                      <cvUntyped to="xs:string">
                       <let var="vv:LHS2085857771" as="function(*)" slot="10" eval="7">
                        <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS2085857771">
                         <dot/>
                        </treat>
                        <choose>
                         <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                          <varRef name="vv:LHS2085857771" slot="10"/>
                         </instance>
                         <data>
                          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                           <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                            <varRef name="vv:LHS2085857771" slot="10"/>
                           </treat>
                           <str val="ref"/>
                          </ifCall>
                         </data>
                         <true/>
                         <data>
                          <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                         </data>
                        </choose>
                       </let>
                      </cvUntyped>
                     </check>
                    </treat>
                   </ufCall>
                   <let line="704" var="valuez" as="xs:string" slot="11" eval="7">
                    <choose line="707">
                     <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                      <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:contains">
                       <dot/>
                      </treat>
                      <str val="@value"/>
                     </ifCall>
                     <let line="711" var="contexti" as="node()" slot="12" eval="8">
                      <evaluate line="712" as="node()" dxns="">
                       <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
                        <cvUntyped to="xs:string">
                         <data>
                          <varRef name="refi" slot="0"/>
                         </data>
                        </cvUntyped>
                       </check>
                       <varRef role="cxt" name="updatedInstanceXML" slot="1"/>
                       <str role="sa" val="no"/>
                       <map role="wp" size="0"/>
                      </evaluate>
                      <evaluate line="715" as="xs:string" dxns="">
                       <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
                        <check card="1" diag="4|0||xsl:evaluate/xpath">
                         <cvUntyped to="xs:string">
                          <data>
                           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                            <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                             <dot/>
                            </treat>
                            <str val="@value"/>
                           </ifCall>
                          </data>
                         </cvUntyped>
                        </check>
                       </treat>
                       <varRef role="cxt" name="contexti" slot="12"/>
                       <str role="sa" val="no"/>
                       <map role="wp" size="0"/>
                      </evaluate>
                     </let>
                     <ifCall line="718" name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                      <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:contains">
                       <dot/>
                      </treat>
                      <str val="value"/>
                     </ifCall>
                     <check line="719" card="1" diag="3|0|XTTE0570|valuez">
                      <cast as="xs:string" emptiable="1">
                       <atomSing card="?" diag="2|0||cast as">
                        <let var="vv:LHS248609774" as="function(*)" slot="13" eval="7">
                         <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS248609774">
                          <dot/>
                         </treat>
                         <choose>
                          <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                           <varRef name="vv:LHS248609774" slot="13"/>
                          </instance>
                          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                           <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                            <varRef name="vv:LHS248609774" slot="13"/>
                           </treat>
                           <str val="value"/>
                          </ifCall>
                          <true/>
                          <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                         </choose>
                        </let>
                       </atomSing>
                      </cast>
                     </check>
                     <true/>
                     <str val=""/>
                    </choose>
                    <choose line="731">
                     <and op="and">
                      <fn name="exists">
                       <varRef name="refz" slot="9"/>
                      </fn>
                      <varRef name="ifExecutedi" slot="8"/>
                     </and>
                     <let line="733" var="associated-form-control" as="node()?" slot="14" eval="7">
                      <check card="?" diag="3|0|XTTE0570|associated-form-control">
                       <slash>
                        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                        <fn name="key">
                         <str val="Q{http://saxon.sf.net/}kk101"/>
                         <varRef name="refz" slot="9"/>
                         <dot type="document-node()"/>
                        </fn>
                       </slash>
                      </check>
                      <choose line="736">
                       <fn name="exists">
                        <varRef name="associated-form-control" slot="14"/>
                       </fn>
                       <sequence line="738">
                        <applyT mode="Q{}set-field" bSlot="2">
                         <varRef role="select" name="associated-form-control" slot="14"/>
                         <withParam name="Q{}value" flags="t" as="xs:string">
                          <varRef line="739" name="valuez" slot="11"/>
                         </withParam>
                        </applyT>
                        <ifCall line="741" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                         <check card="1" diag="0|0||ixsl:call">
                          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                         </check>
                         <str val="setUpdates"/>
                         <arrayBlock>
                          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                           <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:put">
                            <check card="1" diag="0|0||map:put">
                             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                              <check card="1" diag="0|0||ixsl:call">
                               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                              </check>
                              <str val="getUpdates"/>
                              <arrayBlock/>
                             </ifCall>
                            </check>
                           </treat>
                           <varRef name="refz" slot="9"/>
                           <varRef name="valuez" slot="11"/>
                          </ifCall>
                         </arrayBlock>
                        </ifCall>
                       </sequence>
                       <true/>
                       <ifCall line="750" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                        <check card="1" diag="0|0||ixsl:call">
                         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                        </check>
                        <str val="setPendingUpdates"/>
                        <arrayBlock>
                         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                          <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:put">
                           <check card="1" diag="0|0||map:put">
                            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                             <check card="1" diag="0|0||ixsl:call">
                              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                             </check>
                             <str val="getPendingUpdates"/>
                             <arrayBlock/>
                            </ifCall>
                           </check>
                          </treat>
                          <varRef name="refz" slot="9"/>
                          <varRef name="valuez" slot="11"/>
                         </ifCall>
                        </arrayBlock>
                       </ifCall>
                      </choose>
                     </let>
                    </choose>
                   </let>
                  </let>
                 </let>
                </let>
               </forEach>
              </let>
             </choose>
            </choose>
           </let>
          </let>
         </let>
        </let>
       </forEach>
       <let line="770" var="updatedInstanceXML2" as="document-node()" slot="15" eval="7">
        <doc line="771" validation="preserve">
         <applyT line="772" mode="Q{}form-check-initial" bSlot="3">
          <ifCall role="select" line="771" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
           <check card="1" diag="0|0||ixsl:call">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
           </check>
           <str val="getInstance"/>
           <arrayBlock/>
          </ifCall>
          <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
           <treat line="773" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|pendingUpdates">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
             <check card="1" diag="0|0||ixsl:call">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
             </check>
             <str val="getPendingUpdates"/>
             <arrayBlock/>
            </ifCall>
           </treat>
          </withParam>
         </applyT>
        </doc>
        <sequence line="776">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <str val="setInstance"/>
          <arrayBlock>
           <varRef name="updatedInstanceXML2" slot="15"/>
          </arrayBlock>
         </ifCall>
         <ufCall line="780" name="Q{http://www.w3.org/2002/xforms}checkRelevantFields" tailCall="false" bSlot="4" eval="7">
          <check card="1" diag="0|0||xforms:checkRelevantFields">
           <cvUntyped to="xs:string">
            <attVal name="Q{}data-element" chk="0"/>
           </cvUntyped>
          </check>
         </ufCall>
        </sequence>
       </let>
      </sequence>
     </let>
    </let>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="0" rank="0" minImp="0" slots="15" flags="s" line="361" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}input)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='input';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="361" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
     </fn>
    </p.withPredicate>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="362" var="refi" as="attribute(Q{}data-ref)?" slot="0" eval="8">
     <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
     <let line="368" var="updatedInstanceXML" as="document-node()" slot="1" eval="7">
      <doc line="369" validation="preserve">
       <applyT line="370" mode="Q{}form-check-initial" bSlot="5">
        <ifCall role="select" line="369" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="getInstance"/>
         <arrayBlock/>
        </ifCall>
       </applyT>
      </doc>
      <sequence line="372">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="setInstance"/>
        <arrayBlock>
         <varRef name="updatedInstanceXML" slot="1"/>
        </arrayBlock>
       </ifCall>
       <ifCall line="378" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="setPendingUpdates"/>
        <arrayBlock>
         <treat line="374" as="map(°)" jsTest="function k(item) {return SaxonJS.U.Atomic.anyAtomicType.matches(item);};function v(item) {return true;};function c() {return true;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||pendingInstanceUpdates">
          <map size="0"/>
         </treat>
        </arrayBlock>
       </ifCall>
       <ifCall line="379" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="setUpdates"/>
        <arrayBlock>
         <treat line="376" as="map(°)" jsTest="function k(item) {return SaxonJS.U.Atomic.anyAtomicType.matches(item);};function v(item) {return true;};function c() {return true;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0||instanceUpdates">
          <map size="0"/>
         </treat>
        </arrayBlock>
       </ifCall>
       <forEach line="386">
        <ifCall line="366" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="getAction"/>
         <arrayBlock>
          <fn name="string">
           <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
          </fn>
         </arrayBlock>
        </ifCall>
        <let line="387" var="action-map" as="item()" slot="2" eval="7">
         <dot/>
         <let line="398" var="context" as="node()?" slot="3" eval="7">
          <treat line="399" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|context">
           <check card="?" diag="3|0|XTTE0570|context">
            <evaluate dxns="">
             <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
              <check card="1" diag="4|0||xsl:evaluate/xpath">
               <cvUntyped to="xs:string">
                <data>
                 <ifCall line="389" name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                  <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                   <varRef name="action-map" slot="2"/>
                  </treat>
                  <str val="@ref"/>
                 </ifCall>
                </data>
               </cvUntyped>
              </check>
             </treat>
             <varRef role="cxt" name="updatedInstanceXML" slot="1"/>
             <str role="sa" val="no"/>
             <map role="wp" size="0"/>
            </evaluate>
           </check>
          </treat>
          <let line="404" var="ifVar" as="xs:string?" slot="4" eval="7">
           <ufCall name="Q{http://www.w3.org/2002/xforms}getIfStatement" tailCall="false" bSlot="6" eval="7">
            <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||xforms:getIfStatement">
             <varRef name="action-map" slot="2"/>
            </treat>
           </ufCall>
           <let line="410" var="ifExecuted" as="xs:boolean" slot="5" eval="7">
            <choose line="412">
             <fn name="exists">
              <varRef name="ifVar" slot="4"/>
             </fn>
             <treat as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|ifExecuted">
              <check card="1" diag="3|0|XTTE0570|ifExecuted">
               <cvUntyped to="xs:boolean">
                <data>
                 <evaluate dxns="">
                  <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
                   <varRef name="ifVar" slot="4"/>
                  </check>
                  <varRef role="cxt" name="context" slot="3"/>
                  <str role="sa" val="no"/>
                  <map role="wp" size="0"/>
                 </evaluate>
                </data>
               </cvUntyped>
              </check>
             </treat>
             <true/>
             <true/>
            </choose>
            <choose line="420">
             <varRef name="ifExecuted" slot="5"/>
             <choose line="424">
              <fn name="exists">
               <ifCall line="423" name="Q{http://www.w3.org/2005/xpath-functions/map}find" type="function(*)">
                <varRef name="action-map" slot="2"/>
                <str val="setvalue"/>
               </ifCall>
              </fn>
              <let line="438" var="vv:v0" as="xs:string" slot="6" eval="13">
               <check card="1" diag="0|0||xforms:resolveXPathStrings">
                <cvUntyped to="xs:string">
                 <data>
                  <varRef name="refi" slot="0"/>
                 </data>
                </cvUntyped>
               </check>
               <let line="425" var="setValues" as="item()*" slot="7" eval="3">
                <sequence line="427">
                 <ifCall name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                   <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                    <varRef name="action-map" slot="2"/>
                   </treat>
                   <str val="setvalue"/>
                  </ifCall>
                 </ifCall>
                 <ifCall line="428" name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                   <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                    <varRef name="action-map" slot="2"/>
                   </treat>
                   <str val="setvalue"/>
                  </ifCall>
                 </ifCall>
                </sequence>
                <sequence line="434">
                 <forEach>
                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                   <varRef name="setValues" slot="7"/>
                  </ifCall>
                  <let line="438" var="refz" as="xs:string" slot="8" eval="7">
                   <ufCall name="Q{http://www.w3.org/2002/xforms}resolveXPathStrings" tailCall="false" bSlot="7" eval="6 4">
                    <varRef name="vv:v0" slot="6"/>
                    <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||xforms:resolveXPathStrings">
                     <check card="1" diag="0|1||xforms:resolveXPathStrings">
                      <cvUntyped to="xs:string">
                       <let var="vv:LHS914504136" as="function(*)" slot="9" eval="7">
                        <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS914504136">
                         <dot/>
                        </treat>
                        <choose>
                         <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                          <varRef name="vv:LHS914504136" slot="9"/>
                         </instance>
                         <data>
                          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                           <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                            <varRef name="vv:LHS914504136" slot="9"/>
                           </treat>
                           <str val="ref"/>
                          </ifCall>
                         </data>
                         <true/>
                         <data>
                          <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                         </data>
                        </choose>
                       </let>
                      </cvUntyped>
                     </check>
                    </treat>
                   </ufCall>
                   <let line="439" var="valuez" as="document-node()" slot="10" eval="7">
                    <doc line="442" validation="preserve">
                     <choose>
                      <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                       <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:contains">
                        <dot/>
                       </treat>
                       <str val="@value"/>
                      </ifCall>
                      <let line="447" var="contexti" as="node()" slot="11" eval="8">
                       <evaluate line="448" as="node()" dxns="">
                        <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
                         <cvUntyped to="xs:string">
                          <data>
                           <varRef name="refi" slot="0"/>
                          </data>
                         </cvUntyped>
                        </check>
                        <varRef role="cxt" name="updatedInstanceXML" slot="1"/>
                        <str role="sa" val="no"/>
                        <map role="wp" size="0"/>
                       </evaluate>
                       <evaluate line="451" dxns="">
                        <treat role="xpath" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="4|0||xsl:evaluate/xpath">
                         <check card="1" diag="4|0||xsl:evaluate/xpath">
                          <cvUntyped to="xs:string">
                           <data>
                            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                             <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                              <dot/>
                             </treat>
                             <str val="@value"/>
                            </ifCall>
                           </data>
                          </cvUntyped>
                         </check>
                        </treat>
                        <varRef role="cxt" name="contexti" slot="11"/>
                        <str role="sa" val="no"/>
                        <map role="wp" size="0"/>
                       </evaluate>
                      </let>
                      <ifCall line="454" name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                       <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:contains">
                        <dot/>
                       </treat>
                       <str val="value"/>
                      </ifCall>
                      <cast line="455" as="xs:string" emptiable="1">
                       <atomSing card="?" diag="2|0||cast as">
                        <let var="vv:LHS166239592" as="function(*)" slot="12" eval="7">
                         <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS166239592">
                          <dot/>
                         </treat>
                         <choose>
                          <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                           <varRef name="vv:LHS166239592" slot="12"/>
                          </instance>
                          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                           <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                            <varRef name="vv:LHS166239592" slot="12"/>
                           </treat>
                           <str val="value"/>
                          </ifCall>
                          <true/>
                          <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                         </choose>
                        </let>
                       </atomSing>
                      </cast>
                      <true/>
                      <str val=""/>
                     </choose>
                    </doc>
                    <choose line="469">
                     <fn name="exists">
                      <varRef name="refz" slot="8"/>
                     </fn>
                     <let line="471" var="associated-form-control" as="node()?" slot="13" eval="7">
                      <check card="?" diag="3|0|XTTE0570|associated-form-control">
                       <slash>
                        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                        <fn name="key">
                         <str val="Q{http://saxon.sf.net/}kk101"/>
                         <varRef name="refz" slot="8"/>
                         <dot type="document-node()"/>
                        </fn>
                       </slash>
                      </check>
                      <choose line="474">
                       <fn name="exists">
                        <varRef name="associated-form-control" slot="13"/>
                       </fn>
                       <sequence line="476">
                        <applyT mode="Q{}set-field" bSlot="8">
                         <varRef role="select" name="associated-form-control" slot="13"/>
                         <withParam name="Q{}value" flags="t" as="xs:string">
                          <cast line="477" as="xs:string" emptiable="0">
                           <data>
                            <varRef name="valuez" slot="10"/>
                           </data>
                          </cast>
                         </withParam>
                        </applyT>
                        <ifCall line="480" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                         <check card="1" diag="0|0||ixsl:call">
                          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                         </check>
                         <str val="setUpdates"/>
                         <arrayBlock>
                          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                           <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:put">
                            <check card="1" diag="0|0||map:put">
                             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                              <check card="1" diag="0|0||ixsl:call">
                               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                              </check>
                              <str val="getUpdates"/>
                              <arrayBlock/>
                             </ifCall>
                            </check>
                           </treat>
                           <varRef name="refz" slot="8"/>
                           <cast as="xs:string" emptiable="0">
                            <data>
                             <varRef name="valuez" slot="10"/>
                            </data>
                           </cast>
                          </ifCall>
                         </arrayBlock>
                        </ifCall>
                       </sequence>
                       <true/>
                       <ifCall line="489" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                        <check card="1" diag="0|0||ixsl:call">
                         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                        </check>
                        <str val="setPendingUpdates"/>
                        <arrayBlock>
                         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                          <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:put">
                           <check card="1" diag="0|0||map:put">
                            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                             <check card="1" diag="0|0||ixsl:call">
                              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                             </check>
                             <str val="getPendingUpdates"/>
                             <arrayBlock/>
                            </ifCall>
                           </check>
                          </treat>
                          <varRef name="refz" slot="8"/>
                          <cast as="xs:string" emptiable="0">
                           <data>
                            <varRef name="valuez" slot="10"/>
                           </data>
                          </cast>
                         </ifCall>
                        </arrayBlock>
                       </ifCall>
                      </choose>
                     </let>
                    </choose>
                   </let>
                  </let>
                 </forEach>
                 <choose line="499">
                  <fn name="exists">
                   <ifCall name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
                    <varRef name="setValues" slot="7"/>
                   </ifCall>
                  </fn>
                  <let line="502" var="updatedInstanceXML3" as="document-node()" slot="14" eval="7">
                   <doc line="504" validation="preserve">
                    <applyT mode="Q{}form-check-initial" bSlot="9">
                     <varRef role="select" name="updatedInstanceXML" slot="1"/>
                     <withParam name="Q{}pendingUpdates" as="map(xs:string, xs:string)?">
                      <treat line="500" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|pendingUpdates">
                       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                        <check card="1" diag="0|0||ixsl:call">
                         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                        </check>
                        <str val="getPendingUpdates"/>
                        <arrayBlock/>
                       </ifCall>
                      </treat>
                     </withParam>
                    </applyT>
                   </doc>
                   <ifCall line="509" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                    <check card="1" diag="0|0||ixsl:call">
                     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                    </check>
                    <str val="setInstance"/>
                    <arrayBlock>
                     <varRef name="updatedInstanceXML3" slot="14"/>
                    </arrayBlock>
                   </ifCall>
                  </let>
                 </choose>
                </sequence>
               </let>
              </let>
             </choose>
            </choose>
           </let>
          </let>
         </let>
        </let>
       </forEach>
       <ufCall line="520" name="Q{http://www.w3.org/2002/xforms}checkRelevantFields" tailCall="false" bSlot="10" eval="7">
        <check card="1" diag="0|0||xforms:checkRelevantFields">
         <cvUntyped to="xs:string">
          <attVal name="Q{}data-element" chk="0"/>
         </cvUntyped>
        </check>
       </ufCall>
      </sequence>
     </let>
    </let>
   </templateRule>
  </mode>
 </co>
 <co id="22" binds="19 19 23">
  <template name="Q{}xformsjs-main" flags="os" line="30" module="saxon-xforms.xsl" slots="9">
   <sequence role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="31">
    <param name="Q{}xforms-doc" slot="0" as="document-node()?">
     <empty role="select"/>
     <treat role="conversion" as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);" diag="8|0|XTTE0590|xforms-doc">
      <check card="?" diag="8|0|XTTE0590|xforms-doc">
       <supplied slot="0"/>
      </check>
     </treat>
    </param>
    <param line="32" name="Q{}xforms-file" slot="1" as="xs:string?">
     <empty role="select"/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|xforms-file">
      <check card="?" diag="8|0|XTTE0590|xforms-file">
       <cvUntyped to="xs:string">
        <data>
         <supplied slot="1"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <param line="33" name="Q{}instance-xml" slot="2" as="document-node()?">
     <empty role="select"/>
     <treat role="conversion" as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);" diag="8|0|XTTE0590|instance-xml">
      <check card="?" diag="8|0|XTTE0590|instance-xml">
       <supplied slot="2"/>
      </check>
     </treat>
    </param>
    <param line="34" name="Q{}xFormsId" slot="3" as="xs:string">
     <str role="select" val="xForm"/>
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|xFormsId">
      <check card="1" diag="8|0|XTTE0590|xFormsId">
       <cvUntyped to="xs:string">
        <data>
         <supplied slot="3"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <let line="42" var="xforms-doci" as="document-node()?" slot="4" eval="7">
     <choose>
      <fn name="empty">
       <varRef name="xforms-doc" slot="0"/>
      </fn>
      <fn name="doc">
       <varRef name="xforms-file" slot="1"/>
      </fn>
      <true/>
      <varRef name="xforms-doc" slot="0"/>
     </choose>
     <let line="44" var="instance-doc" as="document-node()" slot="5" eval="7">
      <doc line="46" validation="preserve">
       <choose>
        <fn name="empty">
         <varRef name="instance-xml" slot="2"/>
        </fn>
        <copyOf line="47" flags="vc">
         <slash>
          <slash>
           <slash>
            <slash simple="1">
             <varRef name="xforms-doci" slot="4"/>
             <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
            </slash>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
           </slash>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}instance)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='instance';"/>
          </slash>
          <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
         </slash>
        </copyOf>
        <true/>
        <copyOf line="50" flags="vc">
         <varRef name="instance-xml" slot="2"/>
        </copyOf>
       </choose>
      </doc>
      <let line="57" var="bindings" as="map(xs:string, element(Q{http://www.w3.org/2002/xforms}bind))" slot="6" eval="8">
       <ifCall line="59" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <forEach>
         <slash>
          <slash>
           <slash simple="1">
            <varRef name="xforms-doci" slot="4"/>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
           </slash>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
          </slash>
          <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}bind)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='bind';"/>
         </slash>
         <ifCall line="75" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <check card="1" diag="0|0||map:entry">
           <cast as="xs:string" emptiable="1">
            <choose>
             <fn name="exists">
              <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
             </fn>
             <attVal name="Q{}id" chk="0"/>
             <true/>
             <attVal name="Q{}nodeset" chk="0"/>
            </choose>
           </cast>
          </check>
          <dot type="element(Q{http://www.w3.org/2002/xforms}bind)"/>
         </ifCall>
        </forEach>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <let line="99" var="RelevantBindings" as="map(xs:string, xs:string)" slot="7" eval="7">
        <treat line="101" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|RelevantBindings">
         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
          <forEach>
           <ifCall line="97" name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
            <varRef name="bindings" slot="6"/>
           </ifCall>
           <let line="102" var="bindingNode" as="element(Q{http://www.w3.org/2002/xforms}bind)" slot="8" eval="7">
            <check card="1" diag="3|0|XTTE0570|bindingNode">
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
              <varRef name="bindings" slot="6"/>
              <cast as="xs:string" emptiable="0">
               <dot type="xs:anyAtomicType"/>
              </cast>
             </ifCall>
            </check>
            <choose line="104">
             <fn name="exists">
              <filter flags="b">
               <varRef name="bindingNode" slot="8"/>
               <fn name="exists">
                <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
               </fn>
              </filter>
             </fn>
             <ifCall line="106" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
              <check line="105" card="1" diag="3|0|XTTE0570|keyi">
               <cast as="xs:string" emptiable="1">
                <data>
                 <slash simple="1">
                  <varRef name="bindingNode" slot="8"/>
                  <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                 </slash>
                </data>
               </cast>
              </check>
              <cast as="xs:string" emptiable="1">
               <data>
                <slash simple="1">
                 <varRef name="bindingNode" slot="8"/>
                 <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                </slash>
               </data>
              </cast>
             </ifCall>
            </choose>
           </let>
          </forEach>
          <map size="2">
           <str val="duplicates"/>
           <str val="reject"/>
           <str val="duplicates-error-code"/>
           <str val="XTDE3365"/>
          </map>
         </ifCall>
        </treat>
        <sequence line="119">
         <choose>
          <gc op="=" card="M:N" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
           <data>
            <slash>
             <slash simple="1">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
              <axis name="descendant" nodeTest="element(Q{}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='script';"/>
             </slash>
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            </slash>
           </data>
           <data>
            <gVarRef name="Q{}xforms-doc-id" bSlot="0"/>
           </data>
          </gc>
          <sequence line="120">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setXFormsDoc"/>
            <arrayBlock>
             <varRef name="xforms-doc" slot="0"/>
            </arrayBlock>
           </ifCall>
           <ifCall line="121" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setXFormsID"/>
            <arrayBlock>
             <varRef name="xFormsId" slot="3"/>
            </arrayBlock>
           </ifCall>
           <ifCall line="122" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setRelevantMap"/>
            <arrayBlock>
             <varRef name="RelevantBindings" slot="7"/>
            </arrayBlock>
           </ifCall>
          </sequence>
          <true/>
          <sequence line="126">
           <forEach>
            <slash simple="1">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
             <axis name="descendant" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
            </slash>
            <resultDoc line="127" global="#&#xA;#Tue Jan 23 10:15:35 GMT 2018&#xA;indent=no&#xA;doctype-system=http\://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#xA;encoding=utf-8&#xA;doctype-public=-//W3C//DTD XHTML 1.0 Transitional//EN&#xA;omit-xml-declaration=no&#xA;method=html&#xA;" local="#&#xA;#Tue Jan 23 10:15:35 GMT 2018&#xA;">
             <str role="href" val="?."/>
             <elem role="content" line="128" name="script" nsuri="" namespaces="rdf xhtml js in fn map array ev">
              <sequence>
               <att name="type" flags="l">
                <str val="text/javascript"/>
               </att>
               <att name="id" flags="l">
                <fn name="string-join">
                 <convert from="xs:anyAtomicType" to="xs:string">
                  <data>
                   <mergeAdj>
                    <gVarRef name="Q{}xforms-doc-id" bSlot="1"/>
                   </mergeAdj>
                  </data>
                 </convert>
                 <str val=" "/>
                </fn>
               </att>
               <valueOf flags="l">
                <str val="                &#xA;                            var XFormsDoc = null;&#xA;                            var defaultInstanceDoc = null;&#xA;                            var instanceDoc = null;&#xA;                            var pendingUpdatesMap = null;&#xA;                            var updatesMap = null;&#xA;                            var XFormsID= 'xForm';&#xA;                            var actions = {};&#xA;                            var relevantMap = {};&#xA;                            &#xA;                            var getCurrentDate = function(){&#xA;                            var today = new Date();&#xA;                            var dd = today.getDate();&#xA;                            var mm = today.getMonth()+1; //January is 0!&#xA;                            var yyyy = today.getFullYear();&#xA;                            &#xA;                            if(dd &lt; 10) {&#xA;                            dd = '0'+dd&#xA;                            } &#xA;                            &#xA;                            if(mm &lt; 10) {&#xA;                            mm = '0'+mm&#xA;                            } &#xA;                            &#xA;                            today = yyyy + '-' + mm + '-' + dd;&#xA;                            return today;&#xA;                            }&#xA;                            &#xA;                            &#xA;                            var setXFormsDoc = function(doc) {&#xA;                                XFormsDoc = doc;&#xA;                            }&#xA;                            &#xA;                            var getXFormsDoc = function() {&#xA;                                return XFormsDoc;&#xA;                            }&#xA;                            var setXFormsID = function(id) {&#xA;                                XFormsID = id;&#xA;                            }&#xA;                            &#xA;                            var getXFormsID = function() {&#xA;                                return XFormsID;&#xA;                            }&#xA;                            &#xA;                            var setInstance = function(doc) {&#xA;                            instanceDoc = doc;&#xA;                            }&#xA;                            &#xA;                            var getInstance = function() {&#xA;                            return instanceDoc;&#xA;                            }&#xA;                            &#xA;                            var setDefaultInstance = function(doc) {&#xA;                            defaultInstanceDoc = doc;&#xA;                            }&#xA;                            &#xA;                            var getDefaultInstance = function() {&#xA;                            return defaultInstanceDoc;&#xA;                            }&#xA;                            &#xA;                            var setPendingUpdates = function(map1) {&#xA;                            pendingUpdatesMap = map1;&#xA;                            }&#xA;                            &#xA;                            var clearPendingUpdates = function() {&#xA;                            pendingUpdatesMap = null;&#xA;                            }&#xA;                            &#xA;                            var getPendingUpdates = function() {&#xA;                            return pendingUpdatesMap;&#xA;                            }&#xA;                            &#xA;                            var setUpdates = function(map1) {&#xA;                                updatesMap = map1;&#xA;                            }&#xA;                            &#xA;                            var clearUpdates = function() {&#xA;                                updatesMap = null;&#xA;                            }&#xA;                            &#xA;                            var getUpdates = function() {&#xA;                            return updatesMap;&#xA;                            }&#xA;                            &#xA;                            var addAction = function(name, value){&#xA;                                actions[name] = value;&#xA;                            }&#xA;&#xA;                            var getAction = function(name){&#xA;                                return actions[name];&#xA;                            }&#xA;                            &#xA;                            var updateAction = function(actioni, key, value){&#xA;                                actioni[key] = value;&#xA;                                return actioni;&#xA;                            }&#xA;                            &#xA;                            var setRelevantMap = function(map1) {&#xA;                                relevantMap = map1;                            &#xA;                            }&#xA;                            &#xA;                            var getRelevantMap = function() {&#xA;                                return relevantMap;&#xA;                            }&#xA;                            &#xA;  &#xA;                            var startTime = function(name) {&#xA;                                console.time(name);&#xA;                            }&#xA;                            &#xA;                            var endTime = function(name) {&#xA;                            console.timeEnd(name);&#xA;                            }&#xA;                            &#xA;                        "/>
               </valueOf>
              </sequence>
             </elem>
            </resultDoc>
           </forEach>
           <ifCall line="246" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setXFormsDoc"/>
            <arrayBlock>
             <varRef name="xforms-doc" slot="0"/>
            </arrayBlock>
           </ifCall>
           <ifCall line="247" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="setRelevantMap"/>
            <arrayBlock>
             <varRef name="RelevantBindings" slot="7"/>
            </arrayBlock>
           </ifCall>
          </sequence>
         </choose>
         <choose line="252">
          <fn name="exists">
           <varRef name="instance-doc" slot="5"/>
          </fn>
          <ifCall line="253" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
           <check card="1" diag="0|0||ixsl:call">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
           </check>
           <str val="setInstance"/>
           <arrayBlock>
            <varRef name="instance-doc" slot="5"/>
           </arrayBlock>
          </ifCall>
         </choose>
         <resultDoc line="258" global="#&#xA;#Tue Jan 23 10:15:35 GMT 2018&#xA;indent=no&#xA;doctype-system=http\://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#xA;encoding=utf-8&#xA;doctype-public=-//W3C//DTD XHTML 1.0 Transitional//EN&#xA;omit-xml-declaration=no&#xA;method=html&#xA;" local="#&#xA;#Tue Jan 23 10:15:35 GMT 2018&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xA;">
          <fn role="href" name="concat">
           <str val="#"/>
           <varRef name="xFormsId" slot="3"/>
          </fn>
          <applyT role="content" line="259" bSlot="2">
           <slash role="select" simple="1">
            <varRef name="xforms-doci" slot="4"/>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
           </slash>
           <withParam name="Q{}instance1" as="document-node()">
            <varRef line="260" name="instance-doc" slot="5"/>
           </withParam>
           <withParam name="Q{}bindings" as="map(xs:string, node())">
            <varRef line="261" name="bindings" slot="6"/>
           </withParam>
           <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
            <treat line="84" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="3|0|XTTE0570|submissions">
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
              <forEach>
               <slash>
                <slash>
                 <slash simple="1">
                  <varRef name="xforms-doci" slot="4"/>
                  <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
                 </slash>
                 <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
                </slash>
                <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}submission)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='submission';"/>
               </slash>
               <ifCall line="85" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
                <check card="1" diag="0|0||map:entry">
                 <cast as="xs:string" emptiable="1">
                  <attVal name="Q{}ref" chk="0"/>
                 </cast>
                </check>
                <cast as="xs:string" emptiable="1">
                 <attVal name="Q{}action" chk="0"/>
                </cast>
               </ifCall>
              </forEach>
              <map size="2">
               <str val="duplicates"/>
               <str val="reject"/>
               <str val="duplicates-error-code"/>
               <str val="XTDE3365"/>
              </map>
             </ifCall>
            </treat>
           </withParam>
          </applyT>
         </resultDoc>
        </sequence>
       </let>
      </let>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="21" binds="">
  <mode name="Q{}set-field" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.25" seq="2" rank="0" minImp="0" slots="1" flags="s" line="2825" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:textarea" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='textarea'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2826">
     <param name="Q{}value" slot="0" flags="t">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <ifCall line="2828" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
      <dot type="*:textarea"/>
      <str val="value"/>
     </ifCall>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="1" rank="0" minImp="0" slots="1" flags="s" line="2817" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:select" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='select'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2818">
     <param name="Q{}value" slot="0" flags="t">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <forEach line="2820">
      <filter flags="b">
       <axis name="child" nodeTest="element(Q{}option)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='option';"/>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <varRef name="value" slot="0"/>
        </data>
        <attVal name="Q{}value" chk="0"/>
       </gc>
      </filter>
      <ifCall line="2821" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
       <str val="selected"/>
       <true/>
       <dot type="element(Q{}option)"/>
      </ifCall>
     </forEach>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="0" rank="0" minImp="0" slots="1" flags="s" line="2796" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:input" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='input'"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2797">
     <param name="Q{}value" slot="0" flags="t">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <forEach line="2800">
      <dot type="*:input"/>
      <choose line="2802">
       <and op="and">
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
        </fn>
        <gc op="=" card="1:1" comp="CCC">
         <attVal name="Q{}type" chk="0"/>
         <str val="checkbox"/>
        </gc>
       </and>
       <ifCall line="2803" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
        <str val="checked"/>
        <choose>
         <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
          <data>
           <varRef name="value" slot="0"/>
          </data>
          <str val="true"/>
         </gc>
         <check card="1" diag="0|1||ixsl:set-property">
          <varRef name="value" slot="0"/>
         </check>
         <true/>
         <str val=""/>
        </choose>
        <dot type="*:input"/>
       </ifCall>
       <true/>
       <ifCall line="2806" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
        <str val="value"/>
        <check card="1" diag="0|1||ixsl:set-property">
         <varRef name="value" slot="0"/>
        </check>
        <dot type="*:input"/>
       </ifCall>
      </choose>
     </forEach>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="24" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}foo" line="42" module="xforms-function-library.xsl" eval="7" flags="pU" as="xs:boolean" slots="1">
   <arg name="num" as="xs:integer"/>
   <compareToInt role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="45" op="lt" val="5">
    <varRef name="num" slot="0"/>
   </compareToInt>
  </function>
 </co>
 <co id="25" binds="2 10 5 26 22 2 27">
  <mode name="Q{http://saxonica.com/ns/interactiveXSLT}onclick" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.5" seq="1" rank="0" minImp="0" slots="0" flags="s" line="1697" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}select)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='select';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1697" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
     </fn>
    </p.withPredicate>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="2" rank="0" minImp="0" slots="27" flags="s" line="1700" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}button)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='button';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1700" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
     </fn>
    </p.withPredicate>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1705" var="action-map" as="item()?" slot="0" eval="8">
     <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
      <check card="1" diag="0|0||ixsl:call">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
      </check>
      <str val="getAction"/>
      <arrayBlock>
       <fn name="string">
        <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
       </fn>
      </arrayBlock>
     </ifCall>
     <let line="1715" var="updatedInstanceXML" as="document-node()" slot="1" eval="7">
      <doc line="1716" validation="preserve">
       <applyT line="1717" mode="Q{}form-check-initial" bSlot="0">
        <ifCall role="select" line="1716" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
         <check card="1" diag="0|0||ixsl:call">
          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
         </check>
         <str val="getInstance"/>
         <arrayBlock/>
        </ifCall>
       </applyT>
      </doc>
      <let line="1720" var="xforms-doc" as="item()?" slot="2" eval="8">
       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getXFormsDoc"/>
        <arrayBlock/>
       </ifCall>
       <forEach line="1728">
        <ifCall line="1707" name="Q{http://www.w3.org/2005/xpath-functions/map}keys" type="xs:anyAtomicType*">
         <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:keys">
          <check card="1" diag="0|0||map:keys">
           <varRef name="action-map" slot="0"/>
          </check>
         </treat>
        </ifCall>
        <choose line="1731">
         <gc op="=" card="1:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
          <dot type="xs:anyAtomicType"/>
          <str val="insert"/>
         </gc>
         <let line="1760" var="vv:v0" as="item()" slot="3" eval="13">
          <check card="1" diag="0|0||ixsl:call">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
          </check>
          <forEach line="1737">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
            <ifCall line="1734" name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
             <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
              <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
               <check card="1" diag="0|0||map:get">
                <varRef name="action-map" slot="0"/>
               </check>
              </treat>
              <str val="insert"/>
             </ifCall>
            </ifCall>
           </ifCall>
           <let line="1739" var="map-ref" as="item()*" slot="4" eval="3">
            <let var="vv:LHS791885625" as="function(*)" slot="5" eval="7">
             <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS791885625">
              <dot/>
             </treat>
             <choose>
              <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
               <varRef name="vv:LHS791885625" slot="5"/>
              </instance>
              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
               <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                <varRef name="vv:LHS791885625" slot="5"/>
               </treat>
               <str val="ref"/>
              </ifCall>
              <true/>
              <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
             </choose>
            </let>
            <let line="1791" var="vv:v3" as="xs:anyAtomicType*" slot="6" eval="4">
             <data>
              <varRef name="map-ref" slot="4"/>
             </data>
             <let line="1765" var="vv:v2" as="xs:anyAtomicType*" slot="7" eval="4">
              <data>
               <varRef name="map-ref" slot="4"/>
              </data>
              <let line="1762" var="vv:v1" as="xs:anyAtomicType*" slot="8" eval="4">
               <data>
                <varRef name="map-ref" slot="4"/>
               </data>
               <let line="1740" var="insert-node" as="node()" slot="9" eval="7">
                <treat line="1743" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|insert-node">
                 <check card="1" diag="3|0|XTTE0570|insert-node">
                  <evaluate dxns="">
                   <fn role="xpath" name="concat">
                    <atomSing card="?" diag="0|0||fn:concat">
                     <varRef name="map-ref" slot="4"/>
                    </atomSing>
                    <str val="["/>
                    <str val="last()"/>
                    <str val="]"/>
                   </fn>
                   <varRef role="cxt" name="updatedInstanceXML" slot="1"/>
                   <str role="sa" val="no"/>
                   <map role="wp" size="0"/>
                  </evaluate>
                 </check>
                </treat>
                <let line="1750" var="instance-with-insert" as="document-node()" slot="10" eval="7">
                 <doc line="1752" validation="preserve">
                  <applyT mode="Q{}insert-node" bSlot="1">
                   <varRef role="select" name="updatedInstanceXML" slot="1"/>
                   <withParam name="Q{}insert-node" as="node()">
                    <varRef line="1753" name="insert-node" slot="9"/>
                   </withParam>
                   <withParam name="Q{}path" as="xs:string">
                    <fn line="1755" name="concat">
                     <str val="/"/>
                     <atomSing card="?" diag="0|1||fn:concat">
                      <varRef name="map-ref" slot="4"/>
                     </atomSing>
                    </fn>
                   </withParam>
                  </applyT>
                 </doc>
                 <sequence line="1760">
                  <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                   <varRef name="vv:v0" slot="3"/>
                   <str val="setInstance"/>
                   <arrayBlock>
                    <varRef name="instance-with-insert" slot="10"/>
                   </arrayBlock>
                  </ifCall>
                  <let line="1762" var="node-to-copyi" as="element(Q{}div)" slot="11" eval="7">
                   <check card="1" diag="3|0|XTTE0570|node-to-copyi">
                    <docOrder intra="1">
                     <filter flags="b">
                      <slash>
                       <slash>
                        <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                        <fn name="key">
                         <str val="Q{http://saxon.sf.net/}kk103"/>
                         <varRef name="vv:v1" slot="8"/>
                         <dot type="document-node()"/>
                        </fn>
                       </slash>
                       <axis name="child" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
                      </slash>
                      <fn name="empty">
                       <axis name="following-sibling" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
                      </fn>
                     </filter>
                    </docOrder>
                   </check>
                   <let line="1765" var="newNodePosition" as="xs:integer" slot="12" eval="7">
                    <arith op="+" calc="i+i">
                     <fn name="count">
                      <docOrder intra="1">
                       <slash>
                        <slash>
                         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                         <fn name="key">
                          <str val="Q{http://saxon.sf.net/}kk103"/>
                          <varRef name="vv:v2" slot="7"/>
                          <dot type="document-node()"/>
                         </fn>
                        </slash>
                        <axis name="child" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
                       </slash>
                      </docOrder>
                     </fn>
                     <int val="1"/>
                    </arith>
                    <let line="1767" var="newNodeCPath" as="xs:string" slot="13" eval="7">
                     <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|newNodeCPath">
                      <check card="1" diag="3|0|XTTE0570|newNodeCPath">
                       <cvUntyped to="xs:string">
                        <data>
                         <varRef name="map-ref" slot="4"/>
                        </data>
                       </cvUntyped>
                      </check>
                     </treat>
                     <let line="1770" var="path-updated" as="xs:string" slot="14" eval="7">
                      <choose>
                       <compareToInt op="gt" val="0">
                        <varRef name="newNodePosition" slot="12"/>
                       </compareToInt>
                       <fn name="concat">
                        <varRef name="newNodeCPath" slot="13"/>
                        <str val="["/>
                        <varRef name="newNodePosition" slot="12"/>
                        <str val="]"/>
                       </fn>
                       <true/>
                       <varRef name="newNodeCPath" slot="13"/>
                      </choose>
                      <let line="1777" var="copied-node" as="node()" slot="15" eval="7">
                       <treat line="1778" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|copied-node">
                        <check card="1" diag="3|0|XTTE0570|copied-node">
                         <applyT mode="Q{}update-ref" bSlot="2">
                          <varRef role="select" name="node-to-copyi" slot="11"/>
                          <withParam name="Q{}path">
                           <varRef line="1779" name="map-ref" slot="4"/>
                          </withParam>
                          <withParam name="Q{}position" as="xs:integer">
                           <varRef line="1780" name="newNodePosition" slot="12"/>
                          </withParam>
                         </applyT>
                        </check>
                       </treat>
                       <sequence line="1791">
                        <forEach>
                         <slash>
                          <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                          <fn name="key">
                           <str val="Q{http://saxon.sf.net/}kk103"/>
                           <varRef name="vv:v3" slot="6"/>
                           <dot type="document-node()"/>
                          </fn>
                         </slash>
                         <resultDoc line="1793" global="#&#xA;#Tue Jan 23 10:15:35 GMT 2018&#xA;indent=no&#xA;doctype-system=http\://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#xA;encoding=utf-8&#xA;doctype-public=-//W3C//DTD XHTML 1.0 Transitional//EN&#xA;omit-xml-declaration=no&#xA;method=html&#xA;" local="#&#xA;#Tue Jan 23 10:15:35 GMT 2018&#xA;method={http\://saxonica.com/ns/interactiveXSLT}append-content&#xA;">
                          <str role="href" val="?."/>
                          <copyOf role="content" line="1794" flags="vc">
                           <varRef name="copied-node" slot="15"/>
                          </copyOf>
                         </resultDoc>
                        </forEach>
                        <forEach line="1802">
                         <filter line="1801" flags="b">
                          <slash simple="1">
                           <varRef name="node-to-copyi" slot="11"/>
                           <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                          </slash>
                          <or op="or">
                           <fn name="exists">
                            <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
                           </fn>
                           <fn name="exists">
                            <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
                           </fn>
                          </or>
                         </filter>
                         <let line="1804" var="dataActionRef" as="xs:string?" slot="16" eval="8">
                          <cvUntyped to="xs:string">
                           <attVal name="Q{}data-action" chk="0"/>
                          </cvUntyped>
                          <choose line="1806">
                           <fn name="exists">
                            <varRef name="dataActionRef" slot="16"/>
                           </fn>
                           <let line="1812" var="dataRefForNewNode" as="xs:string?" slot="17" eval="7">
                            <check card="?" diag="3|0|XTTE0570|dataRefForNewNode">
                             <cvUntyped to="xs:string">
                              <data>
                               <slash>
                                <filter flags="b">
                                 <slash simple="1">
                                  <varRef name="copied-node" slot="15"/>
                                  <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                                 </slash>
                                 <gc op="=" card="1:1" comp="CCC">
                                  <attVal name="Q{}data-old-action" chk="0"/>
                                  <varRef name="dataActionRef" slot="16"/>
                                 </gc>
                                </filter>
                                <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
                               </slash>
                              </data>
                             </cvUntyped>
                            </check>
                            <ifCall line="1841" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                             <check card="1" diag="0|0||ixsl:call">
                              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                             </check>
                             <str val="addAction"/>
                             <arrayBlock>
                              <check line="1811" card="1" diag="3|0|XTTE0570|newActionId">
                               <cvUntyped to="xs:string">
                                <data>
                                 <slash>
                                  <filter flags="b">
                                   <slash simple="1">
                                    <varRef name="copied-node" slot="15"/>
                                    <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                                   </slash>
                                   <gc op="=" card="1:1" comp="CCC">
                                    <attVal name="Q{}data-old-action" chk="0"/>
                                    <varRef name="dataActionRef" slot="16"/>
                                   </gc>
                                  </filter>
                                  <axis name="attribute" nodeTest="attribute(Q{}data-action)" jsTest="return item.name==='data-action'"/>
                                 </slash>
                                </data>
                               </cvUntyped>
                              </check>
                              <forEach line="1808">
                               <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actionEvents">
                                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                                 <check card="1" diag="0|0||ixsl:call">
                                  <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                                 </check>
                                 <str val="getAction"/>
                                 <arrayBlock>
                                  <fn name="string">
                                   <varRef name="dataActionRef" slot="16"/>
                                  </fn>
                                 </arrayBlock>
                                </ifCall>
                               </treat>
                               <let line="1816" var="myContext" as="map(*)" slot="18" eval="7">
                                <dot type="map(*)"/>
                                <let line="1818" var="refExsists" as="xs:boolean" slot="19" eval="8">
                                 <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
                                  <varRef name="myContext" slot="18"/>
                                  <str val="@ref"/>
                                 </ifCall>
                                 <choose line="1821">
                                  <and op="and">
                                   <varRef name="refExsists" slot="19"/>
                                   <fn name="exists">
                                    <varRef name="dataRefForNewNode" slot="17"/>
                                   </fn>
                                  </and>
                                  <ifCall line="1824" name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                                   <varRef name="myContext" slot="18"/>
                                   <str val="@ref"/>
                                   <fn name="string">
                                    <varRef name="dataRefForNewNode" slot="17"/>
                                   </fn>
                                  </ifCall>
                                  <varRef line="1826" name="refExsists" slot="19"/>
                                  <ifCall line="1830" name="Q{http://www.w3.org/2005/xpath-functions/map}put" type="map(*)">
                                   <varRef name="myContext" slot="18"/>
                                   <str val="@ref"/>
                                   <fn line="1828" name="concat">
                                    <varRef name="path-updated" slot="14"/>
                                    <fn line="1827" name="substring">
                                     <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|contextRef">
                                      <check card="1" diag="3|0|XTTE0570|contextRef">
                                       <cvUntyped to="xs:string">
                                        <data>
                                         <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                                          <varRef name="myContext" slot="18"/>
                                          <str val="@ref"/>
                                         </ifCall>
                                        </data>
                                       </cvUntyped>
                                      </check>
                                     </treat>
                                     <arith line="1828" op="+" calc="i+i">
                                      <fn name="string-length">
                                       <varRef name="path-updated" slot="14"/>
                                      </fn>
                                      <int val="1"/>
                                     </arith>
                                    </fn>
                                   </fn>
                                  </ifCall>
                                  <true/>
                                  <dot line="1833" type="map(*)"/>
                                 </choose>
                                </let>
                               </let>
                              </forEach>
                             </arrayBlock>
                            </ifCall>
                           </let>
                          </choose>
                         </let>
                        </forEach>
                       </sequence>
                      </let>
                     </let>
                    </let>
                   </let>
                  </let>
                 </sequence>
                </let>
               </let>
              </let>
             </let>
            </let>
           </let>
          </forEach>
         </let>
         <gc line="1849" op="=" card="1:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
          <dot type="xs:anyAtomicType"/>
          <str val="delete"/>
         </gc>
         <let line="1855" var="action-refi" as="xs:string?" slot="20" eval="7">
          <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|action-refi">
           <check card="?" diag="3|0|XTTE0570|action-refi">
            <cvUntyped to="xs:string">
             <data>
              <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
               <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                <check card="1" diag="0|0||map:get">
                 <varRef name="action-map" slot="0"/>
                </check>
               </treat>
               <str val="@ref"/>
              </ifCall>
             </data>
            </cvUntyped>
           </check>
          </treat>
          <forEach line="1857">
           <ifCall line="1852" name="Q{http://www.w3.org/2005/xpath-functions/array}flatten" type="item()*">
            <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
             <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
              <check card="1" diag="0|0||map:get">
               <varRef name="action-map" slot="0"/>
              </check>
             </treat>
             <str val="delete"/>
            </ifCall>
           </ifCall>
           <let line="1858" var="if-clause" as="xs:string" slot="21" eval="7">
            <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|if-clause">
             <check card="1" diag="3|0|XTTE0570|if-clause">
              <cvUntyped to="xs:string">
               <let var="vv:LHS2001112025" as="function(*)" slot="22" eval="7">
                <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS2001112025">
                 <dot/>
                </treat>
                <choose>
                 <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                  <varRef name="vv:LHS2001112025" slot="22"/>
                 </instance>
                 <data>
                  <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                   <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                    <varRef name="vv:LHS2001112025" slot="22"/>
                   </treat>
                   <str val="if"/>
                  </ifCall>
                 </data>
                 <true/>
                 <data>
                  <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                 </data>
                </choose>
               </let>
              </cvUntyped>
             </check>
            </treat>
            <let line="1859" var="delete-ref" as="xs:string" slot="23" eval="7">
             <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="3|0|XTTE0570|delete-ref">
              <check card="1" diag="3|0|XTTE0570|delete-ref">
               <cvUntyped to="xs:string">
                <let var="vv:LHS314265080" as="function(*)" slot="24" eval="7">
                 <treat as="function(*)" jsTest="return SaxonJS.U.isMap(item) || SaxonJS.U.isArray(item);" diag="3|0||vv:LHS314265080">
                  <dot/>
                 </treat>
                 <choose>
                  <instance of="map(*)" jsTest="return SaxonJS.U.isMap(item)">
                   <varRef name="vv:LHS314265080" slot="24"/>
                  </instance>
                  <data>
                   <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
                    <treat as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="0|0||map:get">
                     <varRef name="vv:LHS314265080" slot="24"/>
                    </treat>
                    <str val="ref"/>
                   </ifCall>
                  </data>
                  <true/>
                  <data>
                   <error message="First argument of '?' must be a sequence of maps" code="XPTY0004" isTypeErr="0"/>
                  </data>
                 </choose>
                </let>
               </cvUntyped>
              </check>
             </treat>
             <let line="1861" var="if-statement" as="xs:boolean" slot="25" eval="7">
              <choose line="1863">
               <fn name="empty">
                <varRef name="if-clause" slot="21"/>
               </fn>
               <true/>
               <true/>
               <treat line="1866" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|if-statement">
                <check card="1" diag="3|0|XTTE0570|if-statement">
                 <cvUntyped to="xs:boolean">
                  <data>
                   <evaluate dxns="">
                    <varRef role="xpath" name="if-clause" slot="21"/>
                    <varRef role="cxt" name="updatedInstanceXML" slot="1"/>
                    <str role="sa" val="no"/>
                    <map role="wp" size="0"/>
                   </evaluate>
                  </data>
                 </cvUntyped>
                </check>
               </treat>
              </choose>
              <choose line="1875">
               <varRef name="if-statement" slot="25"/>
               <let line="1876" var="instance-with-delete" as="document-node()" slot="26" eval="7">
                <doc line="1878" validation="preserve">
                 <applyT mode="Q{}delete-node" bSlot="3">
                  <varRef role="select" name="updatedInstanceXML" slot="1"/>
                  <withParam name="Q{}path" as="xs:string">
                   <choose line="1872">
                    <vc op="eq" onEmpty="0" comp="CCC">
                     <varRef name="delete-ref" slot="23"/>
                     <str val="."/>
                    </vc>
                    <fn name="concat">
                     <str val="/"/>
                     <varRef name="action-refi" slot="20"/>
                    </fn>
                    <true/>
                    <fn name="concat">
                     <choose>
                      <fn name="exists">
                       <varRef name="action-refi" slot="20"/>
                      </fn>
                      <fn name="concat">
                       <str val="/"/>
                       <varRef name="action-refi" slot="20"/>
                      </fn>
                      <true/>
                      <str val=""/>
                     </choose>
                     <str val="/"/>
                     <varRef name="delete-ref" slot="23"/>
                    </fn>
                   </choose>
                  </withParam>
                 </applyT>
                </doc>
                <sequence line="1887">
                 <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                  <check card="1" diag="0|0||ixsl:call">
                   <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                  </check>
                  <str val="setInstance"/>
                  <arrayBlock>
                   <varRef name="instance-with-delete" slot="26"/>
                  </arrayBlock>
                 </ifCall>
                 <callT line="1900" name="xformsjs-main" bSlot="4">
                  <withParam name="Q{}xforms-doc" flags="c" as="item()?">
                   <treat line="1901" as="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);" diag="8|0|XTTE0590|xforms-doc">
                    <varRef name="xforms-doc" slot="2"/>
                   </treat>
                  </withParam>
                  <withParam name="Q{}instance-xml" flags="c" as="document-node()">
                   <varRef line="1902" name="instance-with-delete" slot="26"/>
                  </withParam>
                  <withParam name="Q{}xFormsId" flags="c" as="item()?">
                   <treat line="1903" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|2|XTTE0590|xFormsId">
                    <check card="1" diag="8|2|XTTE0590|xFormsId">
                     <cvUntyped to="xs:string">
                      <data>
                       <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
                        <check card="1" diag="0|0||ixsl:call">
                         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
                        </check>
                        <str val="getXFormsID"/>
                        <arrayBlock/>
                       </ifCall>
                      </data>
                     </cvUntyped>
                    </check>
                   </treat>
                  </withParam>
                 </callT>
                </sequence>
               </let>
              </choose>
             </let>
            </let>
           </let>
          </forEach>
         </let>
        </choose>
       </forEach>
      </let>
     </let>
    </let>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="0" rank="0" minImp="0" slots="2" flags="s" line="843" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}button)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='button';"/>
     <fn ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="843" name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-submit)" jsTest="return item.name==='data-submit'"/>
     </fn>
    </p.withPredicate>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="847" var="updatedInstanceXML" as="document-node()" slot="0" eval="7">
     <doc line="848" validation="preserve">
      <applyT line="849" mode="Q{}form-check-initial" bSlot="5">
       <ifCall role="select" line="848" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="getInstance"/>
        <arrayBlock/>
       </ifCall>
      </applyT>
     </doc>
     <let line="860" var="required-fields-check" as="item()*" slot="1" eval="3">
      <ufCall name="Q{http://www.w3.org/2002/xforms}check-required-fields" tailCall="false" bSlot="6" eval="6">
       <varRef name="updatedInstanceXML" slot="0"/>
      </ufCall>
      <choose line="872">
       <fn name="empty">
        <varRef name="required-fields-check" slot="1"/>
       </fn>
       <ifCall line="875" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="submitXMLorderWithUrl"/>
        <arrayBlock>
         <fn name="serialize">
          <doc line="866" flags="t" validation="preserve">
           <valueOf flags="l">
            <convert from="xs:untypedAtomic" to="xs:string">
             <attVal name="Q{}data-submit" chk="0"/>
            </convert>
           </valueOf>
          </doc>
         </fn>
         <fn name="serialize">
          <varRef name="updatedInstanceXML" slot="0"/>
         </fn>
         <str val="orderResponse"/>
        </arrayBlock>
       </ifCall>
       <true/>
       <ifCall line="888" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
        <check card="1" diag="0|0||ixsl:call">
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
        </check>
        <str val="alert"/>
        <arrayBlock>
         <fn name="serialize">
          <doc line="879" flags="t" validation="preserve">
           <forEach>
            <varRef name="required-fields-check" slot="1"/>
            <valueOf line="883" flags="l">
             <fn name="concat">
              <str val="Value error see: "/>
              <fn name="serialize">
               <slash simple="1">
                <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
                 <dot line="880"/>
                </treat>
                <axis name="attribute" nodeTest="attribute(Q{}data-ref)" jsTest="return item.name==='data-ref'"/>
               </slash>
              </fn>
              <str val="&#xA;"/>
             </fn>
            </valueOf>
           </forEach>
          </doc>
         </fn>
        </arrayBlock>
       </ifCall>
      </choose>
     </let>
    </let>
   </templateRule>
  </mode>
 </co>
 <co id="28" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}impose" line="18" module="xforms-function-library.xsl" eval="8" flags="pU" as="xs:string" slots="1">
   <arg name="input" as="xs:string"/>
   <fn role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="39" name="string-join">
    <analyzeString line="21">
     <varRef role="select" name="input" slot="0"/>
     <str role="regex" val="\i\c*\("/>
     <str role="flags" val=""/>
     <choose role="matching" line="24">
      <gc op="=" card="N:1" comp="CCC">
       <literal count="4">
        <str val="index"/>
        <str val="avg"/>
        <str val="foo"/>
        <str val="current-date"/>
       </literal>
       <fn name="substring-before">
        <dot type="xs:string"/>
        <str val="("/>
       </fn>
      </gc>
      <fn line="25" name="concat">
       <str val="xforms:"/>
       <dot type="xs:string"/>
      </fn>
      <true/>
      <dot line="28" type="xs:string"/>
     </choose>
     <dot role="nonMatching" line="33" type="xs:string"/>
    </analyzeString>
   </fn>
  </function>
 </co>
 <co id="29" binds="">
  <globalVariable name="Q{}xform-functions" type="xs:string+" line="16" module="xforms-function-library.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.string.cast(val);" jsCardCheck="function c(n) {return n&gt;=1;};">
   <literal count="4">
    <str val="index"/>
    <str val="avg"/>
    <str val="foo"/>
    <str val="current-date"/>
   </literal>
  </globalVariable>
 </co>
 <co id="30" binds="">
  <globalVariable name="Q{}debugTiming" type="xs:boolean" line="27" module="saxon-xforms.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.boolean.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <false/>
  </globalVariable>
 </co>
 <co id="12" binds="12 12 12">
  <mode name="Q{}jxml-xml" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.25" seq="2" rank="0" minImp="0" slots="2" flags="s" line="2600" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:array" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='array'"/>
    <let role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2601" var="keyVar" as="attribute(Q{}key)?" slot="0" eval="8">
     <axis name="attribute" nodeTest="attribute(Q{}key)" jsTest="return item.name==='key'"/>
     <let line="2604" var="vv:v0" as="xs:string" slot="1" eval="13">
      <fn name="string">
       <convert from="xs:untypedAtomic" to="xs:string">
        <data>
         <varRef name="keyVar" slot="0"/>
        </data>
       </convert>
      </fn>
      <forEach line="2603">
       <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       <compElem line="2604">
        <varRef role="name" name="vv:v0" slot="1"/>
        <applyT role="content" line="2605" mode="Q{}jxml-xml" bSlot="0">
         <dot role="select" type="element()"/>
        </applyT>
       </compElem>
      </forEach>
     </let>
    </let>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="1" rank="0" minImp="0" slots="0" flags="s" line="2586" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:number" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='number'"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2588">
     <fn name="starts-with">
      <cvUntyped to="xs:string">
       <attVal name="Q{}key" chk="0"/>
      </cvUntyped>
      <str val="@"/>
     </fn>
     <compAtt line="2589">
      <fn role="name" name="substring">
       <cvUntyped to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </cvUntyped>
       <int val="2"/>
      </fn>
      <fn role="select" name="string-join">
       <convert from="xs:untypedAtomic" to="xs:string">
        <data>
         <mergeAdj>
          <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
         </mergeAdj>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </compAtt>
     <true/>
     <compElem line="2592">
      <fn role="name" name="string">
       <convert from="xs:untypedAtomic" to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </convert>
      </fn>
      <valueOf role="content" line="2593" flags="l">
       <fn name="string-join">
        <convert from="xs:untypedAtomic" to="xs:string">
         <data>
          <mergeAdj>
           <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
          </mergeAdj>
         </data>
        </convert>
        <str val=" "/>
       </fn>
      </valueOf>
     </compElem>
    </choose>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="1" rank="0" minImp="0" slots="0" flags="s" line="2586" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:string" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='string'"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2588">
     <fn name="starts-with">
      <cvUntyped to="xs:string">
       <attVal name="Q{}key" chk="0"/>
      </cvUntyped>
      <str val="@"/>
     </fn>
     <compAtt line="2589">
      <fn role="name" name="substring">
       <cvUntyped to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </cvUntyped>
       <int val="2"/>
      </fn>
      <fn role="select" name="string-join">
       <convert from="xs:untypedAtomic" to="xs:string">
        <data>
         <mergeAdj>
          <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
         </mergeAdj>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </compAtt>
     <true/>
     <compElem line="2592">
      <fn role="name" name="string">
       <convert from="xs:untypedAtomic" to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </convert>
      </fn>
      <valueOf role="content" line="2593" flags="l">
       <fn name="string-join">
        <convert from="xs:untypedAtomic" to="xs:string">
         <data>
          <mergeAdj>
           <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
          </mergeAdj>
         </data>
        </convert>
        <str val=" "/>
       </fn>
      </valueOf>
     </compElem>
    </choose>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="0" rank="0" minImp="0" slots="0" flags="s" line="2562" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:map" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='map'"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2564">
     <fn name="empty">
      <axis name="attribute" nodeTest="attribute(Q{}key)" jsTest="return item.name==='key'"/>
     </fn>
     <applyT line="2566" mode="Q{}jxml-xml" flags="t" bSlot="1">
      <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </applyT>
     <fn line="2571" name="starts-with">
      <cvUntyped to="xs:string">
       <attVal name="Q{}key" chk="0"/>
      </cvUntyped>
      <str val="@"/>
     </fn>
     <compAtt line="2572">
      <fn role="name" name="substring">
       <cvUntyped to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </cvUntyped>
       <int val="2"/>
      </fn>
      <convert role="select" from="xs:untypedAtomic" to="xs:string">
       <data>
        <dot type="*:map"/>
       </data>
      </convert>
     </compAtt>
     <true/>
     <compElem line="2575">
      <fn role="name" name="string">
       <convert from="xs:untypedAtomic" to="xs:string">
        <attVal name="Q{}key" chk="0"/>
       </convert>
      </fn>
      <applyT role="content" line="2576" mode="Q{}jxml-xml" bSlot="2">
       <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      </applyT>
     </compElem>
    </choose>
   </templateRule>
  </mode>
 </co>
 <co id="27" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}check-required-fields" line="785" module="saxon-xforms.xsl" eval="8" flags="pU" as="item()*" slots="2">
   <arg name="updatedInstanceXML" as="document-node()"/>
   <forEach role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="792">
    <filter line="788" flags="b">
     <slash simple="1">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
      <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </slash>
     <fn name="exists">
      <axis name="attribute" nodeTest="attribute(Q{}data-required)" jsTest="return item.name==='data-required'"/>
     </fn>
    </filter>
    <let line="794" var="resulti" as="document-node()" slot="1" eval="7">
     <doc line="797" validation="preserve">
      <evaluate dxns="">
       <fn role="xpath" name="concat">
        <str val="boolean(normalize-space("/>
        <attVal name="Q{}data-ref" chk="0"/>
        <str val="))"/>
        <str val="="/>
        <attVal name="Q{}data-ref" chk="0"/>
        <str val="/"/>
        <attVal name="Q{}data-required" chk="0"/>
       </fn>
       <varRef role="cxt" name="updatedInstanceXML" slot="0"/>
       <str role="sa" val="no"/>
       <map role="wp" size="0"/>
      </evaluate>
     </doc>
     <choose line="805">
      <vc op="eq" onEmpty="0" comp="CCC">
       <cast as="xs:string" emptiable="0">
        <data>
         <varRef name="resulti" slot="1"/>
        </data>
       </cast>
       <str val="false"/>
      </vc>
      <dot type="element()"/>
     </choose>
    </let>
   </forEach>
  </function>
 </co>
 <co id="14" binds="14 14 14">
  <mode name="Q{}json-xml" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="0" flags="s" line="2482" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2487">
     <fn name="exists">
      <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </fn>
     <forEachGroup line="2488" algorithm="by">
      <sequence role="select">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
       <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      </sequence>
      <fn role="key" name="local-name">
       <dot type="node()"/>
      </fn>
      <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
      <choose role="content" line="2490">
       <fn name="exists">
        <tail start="2">
         <currentGroup/>
        </tail>
       </fn>
       <elem line="2493" name="array" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
        <sequence>
         <att name="key" flags="l">
          <fn name="string-join">
           <convert from="xs:anyAtomicType" to="xs:string">
            <currentGroupingKey/>
           </convert>
           <str val=" "/>
          </fn>
         </att>
         <forEach line="2494">
          <currentGroup/>
          <elem line="2497" name="map" nsuri="http://www.w3.org/2005/xpath-functions" flags="dl">
           <applyT mode="Q{}json-xml" bSlot="0">
            <dot role="select"/>
           </applyT>
          </elem>
         </forEach>
        </sequence>
       </elem>
       <filter line="2504" flags="b">
        <currentGroup/>
        <fn name="exists">
         <slash simple="1">
          <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|12|XPTY0020|">
           <dot/>
          </treat>
          <axis name="self" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
         </slash>
        </fn>
       </filter>
       <elem line="2509" name="string" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
        <sequence>
         <att name="key" flags="l">
          <fn name="concat">
           <str val="@"/>
           <check card="?" diag="0|1||fn:concat">
            <currentGroupingKey/>
           </check>
          </fn>
         </att>
         <valueOf line="2510" flags="l">
          <convert from="xs:anyAtomicType" to="xs:string">
           <data>
            <dot type="node()"/>
           </data>
          </convert>
         </valueOf>
        </sequence>
       </elem>
       <fn line="2515" name="exists">
        <slash>
         <currentGroup/>
         <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
       </fn>
       <elem line="2518" name="map" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
        <sequence>
         <att name="key" flags="l">
          <fn name="string-join">
           <convert from="xs:anyAtomicType" to="xs:string">
            <currentGroupingKey/>
           </convert>
           <str val=" "/>
          </fn>
         </att>
         <applyT line="2519" mode="Q{}json-xml" bSlot="1">
          <currentGroup role="select"/>
         </applyT>
        </sequence>
       </elem>
       <true/>
       <applyT line="2524" mode="Q{}json-xml" bSlot="2">
        <currentGroup role="select"/>
       </applyT>
      </choose>
     </forEachGroup>
     <fn line="2530" name="matches">
      <cvUntyped to="xs:string">
       <data>
        <dot type="element()"/>
       </data>
      </cvUntyped>
      <str val="^[0-9]+$"/>
      <str val=""/>
     </fn>
     <elem line="2532" name="number" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
      <sequence>
       <att name="key" flags="l">
        <fn name="local-name">
         <dot type="element()"/>
        </fn>
       </att>
       <valueOf line="2533" flags="l">
        <fn name="string-join">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <mergeAdj>
            <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
           </mergeAdj>
          </data>
         </convert>
         <str val=" "/>
        </fn>
       </valueOf>
      </sequence>
     </elem>
     <true/>
     <elem line="2538" name="string" nsuri="http://www.w3.org/2005/xpath-functions" flags="d">
      <sequence>
       <att name="key" flags="l">
        <fn name="local-name">
         <dot type="element()"/>
        </fn>
       </att>
       <valueOf line="2539" flags="l">
        <fn name="string-join">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <mergeAdj>
            <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
           </mergeAdj>
          </data>
         </convert>
         <str val=" "/>
        </fn>
       </valueOf>
      </sequence>
     </elem>
    </choose>
   </templateRule>
  </mode>
 </co>
 <co id="31" binds="">
  <function name="Q{http://www.w3.org/2002/xforms}index" line="48" module="xforms-function-library.xsl" eval="7" flags="pU" as="xs:integer" slots="2">
   <arg name="repeatID" as="xs:string"/>
   <let role="body" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="50" var="element" as="item()?" slot="1" eval="8">
    <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
     <check card="1" diag="0|0||ixsl:call">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
     </check>
     <str val="getElementById"/>
     <arrayBlock>
      <varRef name="repeatID" slot="0"/>
     </arrayBlock>
    </ifCall>
    <choose line="52">
     <fn name="empty">
      <varRef name="element" slot="1"/>
     </fn>
     <int val="0"/>
     <fn line="56" name="exists">
      <slash simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
        <varRef name="element" slot="1"/>
       </treat>
       <axis name="attribute" nodeTest="attribute(Q{}data-repeatable-context)" jsTest="return item.name==='data-repeatable-context'"/>
      </slash>
     </fn>
     <fn line="57" name="count">
      <slash simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
        <varRef name="element" slot="1"/>
       </treat>
       <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      </slash>
     </fn>
     <true/>
     <int val="0"/>
    </choose>
   </let>
  </function>
 </co>
 <co id="26" binds="26">
  <mode name="Q{}delete-node" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="7" flags="s" line="1609" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1610">
     <param name="Q{}path" slot="0" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|path">
       <check card="1" diag="8|0|XTTE0590|path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1611" name="Q{}current-path" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|current-path">
       <check card="1" diag="8|0|XTTE0590|current-path">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1617" var="updatedPath2" as="document-node()" slot="2" eval="7">
      <doc line="1618" flags="t" validation="preserve">
       <sequence>
        <valueOf flags="l">
         <fn line="1612" name="concat">
          <varRef name="current-path" slot="1"/>
          <str val="/"/>
          <fn name="local-name">
           <dot type="element()"/>
          </fn>
         </fn>
        </valueOf>
        <choose line="1620">
         <fn name="exists">
          <let var="vv:current-28121473" as="element()" slot="3" eval="7">
           <dot type="element()"/>
           <let var="vv:v0" as="xs:string" slot="4" eval="13">
            <fn name="local-name">
             <varRef name="vv:current-28121473" slot="3"/>
            </fn>
            <filter flags="b">
             <union op="|">
              <fn name="reverse">
               <slash simple="1">
                <dot type="element()"/>
                <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
               </slash>
              </fn>
              <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </union>
             <vc op="eq" comp="CCC">
              <fn name="local-name">
               <dot type="element()"/>
              </fn>
              <varRef name="vv:v0" slot="4"/>
             </vc>
            </filter>
           </let>
          </let>
         </fn>
         <valueOf line="1621" flags="l">
          <fn name="concat">
           <str val="["/>
           <let line="1616" var="vv:current585323788" as="element()" slot="5" eval="7">
            <dot type="element()"/>
            <let var="vv:v1" as="xs:string" slot="6" eval="13">
             <fn name="local-name">
              <varRef name="vv:current585323788" slot="5"/>
             </fn>
             <arith op="+" calc="i+i">
              <fn name="count">
               <filter flags="b">
                <slash simple="1">
                 <dot type="element()"/>
                 <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                </slash>
                <vc op="eq" comp="CCC">
                 <fn name="local-name">
                  <dot type="element()"/>
                 </fn>
                 <varRef name="vv:v1" slot="6"/>
                </vc>
               </filter>
              </fn>
              <int val="1"/>
             </arith>
            </let>
           </let>
           <str val="]"/>
          </fn>
         </valueOf>
        </choose>
       </sequence>
      </doc>
      <choose line="1628">
       <vc op="eq" onEmpty="0" comp="CCC">
        <cast as="xs:string" emptiable="0">
         <data>
          <varRef name="updatedPath2" slot="2"/>
         </data>
        </cast>
        <varRef name="path" slot="0"/>
       </vc>
       <empty/>
       <true/>
       <copy line="1641" flags="cin">
        <applyT role="content" mode="Q{}delete-node" bSlot="0">
         <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
         <withParam name="Q{}path" as="xs:string">
          <varRef line="1642" name="path" slot="0"/>
         </withParam>
         <withParam name="Q{}current-path" as="document-node()">
          <varRef line="1643" name="updatedPath2" slot="2"/>
         </withParam>
        </applyT>
       </copy>
      </choose>
     </let>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="4" binds="">
  <mode name="Q{}get-field" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.25" seq="2" rank="0" minImp="0" slots="0" flags="s" line="2789" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:textarea" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='textarea'"/>
    <ifCall role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2792" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
     <dot type="*:textarea"/>
     <str val="value"/>
    </ifCall>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="1" rank="0" minImp="0" slots="0" flags="s" line="2784" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:select" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='select'"/>
    <ifCall role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2786" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
     <check card="?" diag="0|0||ixsl:get">
      <filter flags="b">
       <axis name="child" nodeTest="element(Q{}option)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='option';"/>
       <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
        <data>
         <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
          <dot type="element(Q{}option)"/>
          <str val="selected"/>
         </ifCall>
        </data>
        <true/>
       </gc>
      </filter>
     </check>
     <str val="value"/>
    </ifCall>
   </templateRule>
   <templateRule prec="0" prio="-0.25" seq="0" rank="0" minImp="0" slots="0" flags="s" line="2770" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="*:input" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1&amp;&amp;q.local==='input'"/>
    <choose role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2774">
     <and op="and">
      <fn name="exists">
       <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
      </fn>
      <gc op="=" card="1:1" comp="CCC">
       <attVal name="Q{}type" chk="0"/>
       <str val="checkbox"/>
      </gc>
     </and>
     <ifCall line="2775" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
      <dot type="*:input"/>
      <str val="checked"/>
     </ifCall>
     <true/>
     <ifCall line="2778" name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
      <dot type="*:input"/>
      <str val="value"/>
     </ifCall>
    </choose>
   </templateRule>
  </mode>
 </co>
 <co id="23" binds="23 1 23 23 23 23 23 23 23 28 23 23 23 23 23 1 23 23 23 23">
  <mode onNo="TC" flags="dW" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="1" rank="0" minImp="0" slots="0" flags="s" line="898" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);"/>
    <applyT role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="899" flags="t" bSlot="0">
     <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
    </applyT>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}setindex)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="14" rank="1" minImp="0" slots="8" flags="s" line="1924" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}trigger)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='trigger';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1925">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1926" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1927" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="1928" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="1929" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <let line="1938" var="innerbody" as="document-node()" slot="5" eval="7">
      <doc line="1940" validation="preserve">
       <choose>
        <fn name="exists">
         <filter flags="b">
          <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
          <vc op="eq" comp="CCC">
           <fn name="local-name">
            <dot type="element()"/>
           </fn>
           <str val="label"/>
          </vc>
         </filter>
        </fn>
        <applyT line="1942" bSlot="2">
         <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
         <withParam name="Q{}instance1" as="node()?">
          <varRef line="1943" name="instance1" slot="0"/>
         </withParam>
         <withParam name="Q{}bindings" as="map(xs:string, node())">
          <varRef line="1944" name="bindings" slot="1"/>
         </withParam>
        </applyT>
        <true/>
        <valueOf line="1948" flags="l">
         <str val=" "/>
        </valueOf>
       </choose>
      </doc>
      <let line="1956" var="myid" as="item()?" slot="6" eval="7">
       <choose>
        <fn name="exists">
         <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
        </fn>
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
        <true/>
        <fn name="concat">
         <fn name="generate-id">
          <dot type="element(Q{http://www.w3.org/2002/xforms}trigger)"/>
         </fn>
         <atomSing card="?" diag="0|1||fn:concat">
          <varRef name="position" slot="3"/>
         </atomSing>
        </fn>
       </choose>
       <let line="1966" var="actions" as="map(*)*" slot="7" eval="3">
        <treat line="1967" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
         <applyT bSlot="3">
          <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
          <withParam name="Q{}instance1" as="node()?">
           <varRef line="1968" name="instance1" slot="0"/>
          </withParam>
          <withParam name="Q{}nodeset">
           <varRef line="1969" name="nodeset" slot="4"/>
          </withParam>
          <withParam name="Q{}bindings" as="map(xs:string, node())">
           <varRef line="1970" name="bindings" slot="1"/>
          </withParam>
          <withParam name="Q{}position">
           <varRef line="1971" name="position" slot="3"/>
          </withParam>
          <withParam name="Q{}myid" flags="t" as="item()?">
           <varRef line="1972" name="myid" slot="6"/>
          </withParam>
         </applyT>
        </treat>
        <sequence line="1977">
         <choose>
          <fn name="exists">
           <varRef name="actions" slot="7"/>
          </fn>
          <ifCall line="1988" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
           <check card="1" diag="0|0||ixsl:call">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
           </check>
           <str val="addAction"/>
           <arrayBlock>
            <varRef name="myid" slot="6"/>
            <varRef name="actions" slot="7"/>
           </arrayBlock>
          </ifCall>
         </choose>
         <elem line="1992" name="span" nsuri="" namespaces="rdf xhtml js in fn map array ev">
          <sequence>
           <att name="style" flags="l">
            <str val="display:'inline'"/>
           </att>
           <choose line="1994">
            <gc op="=" card="1:1" comp="CCC">
             <attVal name="Q{}appearance" chk="0"/>
             <str val="minimal"/>
            </gc>
            <elem line="1996" name="a" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
             <sequence>
              <att name="data-action" flags="l">
               <fn name="string-join">
                <convert from="xs:anyAtomicType" to="xs:string">
                 <data>
                  <varRef name="myid" slot="6"/>
                 </data>
                </convert>
                <str val=" "/>
               </fn>
              </att>
              <copyOf line="1997" flags="vc">
               <varRef name="innerbody" slot="5"/>
              </copyOf>
             </sequence>
            </elem>
            <true/>
            <elem line="2001" name="button" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
             <sequence>
              <att name="type" flags="l">
               <str val="button"/>
              </att>
              <att line="2004" name="data-action" flags="l">
               <fn name="string-join">
                <convert from="xs:anyAtomicType" to="xs:string">
                 <data>
                  <varRef name="myid" slot="6"/>
                 </data>
                </convert>
                <str val=" "/>
               </fn>
              </att>
              <copyOf line="2009" flags="vc">
               <varRef name="innerbody" slot="5"/>
              </copyOf>
             </sequence>
            </elem>
           </choose>
          </sequence>
         </elem>
        </sequence>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}reset)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="11" rank="1" minImp="0" slots="3" flags="s" line="1466" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1467">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1468" name="Q{}nodeset" slot="1" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <let line="1469" var="selectedVar" as="document-node()" slot="2" eval="7">
      <doc line="1470" validation="preserve">
       <evaluate dxns="">
        <varRef role="xpath" name="nodeset" slot="1"/>
        <varRef role="cxt" name="instance1" slot="0"/>
        <str role="sa" val="no"/>
        <map role="wp" size="0"/>
       </evaluate>
      </doc>
      <elem line="1473" name="option" nsuri="" namespaces="rdf xhtml js in fn map array ev">
       <sequence>
        <att name="value" flags="l">
         <fn name="string-join">
          <convert from="xs:untypedAtomic" to="xs:string">
           <data>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}value)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='value';"/>
           </data>
          </convert>
          <str val=" "/>
         </fn>
        </att>
        <choose line="1474">
         <and op="and">
          <fn name="exists">
           <varRef name="instance1" slot="0"/>
          </fn>
          <gc op="=" card="N:1" comp="CCC">
           <data>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}value)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='value';"/>
           </data>
           <data>
            <varRef name="selectedVar" slot="2"/>
           </data>
          </gc>
         </and>
         <att line="1475" name="selected" flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <data>
            <varRef name="selectedVar" slot="2"/>
           </data>
          </convert>
         </att>
        </choose>
        <valueOf line="1478" flags="l">
         <fn name="string-join">
          <convert from="xs:untypedAtomic" to="xs:string">
           <data>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
           </data>
          </convert>
          <str val=" "/>
         </fn>
        </valueOf>
       </sequence>
      </elem>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}toggle)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="10" rank="1" minImp="0" slots="1" flags="s" line="1454" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1455">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <elem line="1458" name="label" nsuri="" namespaces="rdf xhtml js in fn map array ev">
      <choose>
       <fn name="exists">
        <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
       </fn>
       <applyT line="1459" bSlot="4">
        <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
       </applyT>
       <true/>
       <sequence line="1461">
        <valueOf flags="l">
         <str val=" "/>
        </valueOf>
        <valueOf flags="Sl">
         <str val=""/>
        </valueOf>
       </sequence>
      </choose>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="13" rank="1" minImp="0" slots="4" flags="s" line="1524" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}submit)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='submit';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1525">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1526" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1527" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <let line="1528" var="innerbody" as="document-node()" slot="3" eval="7">
      <doc line="1530" validation="preserve">
       <choose>
        <fn name="exists">
         <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
        </fn>
        <applyT line="1531" bSlot="5">
         <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
         <withParam name="Q{}instance1" as="node()?">
          <varRef line="1532" name="instance1" slot="0"/>
         </withParam>
         <withParam name="Q{}bindings" as="map(xs:string, node())">
          <varRef line="1533" name="bindings" slot="1"/>
         </withParam>
        </applyT>
        <true/>
        <valueOf line="1537" flags="l">
         <str val=" "/>
        </valueOf>
       </choose>
      </doc>
      <choose line="1543">
       <gc op="=" card="1:1" comp="CCC">
        <attVal name="Q{}appearance" chk="0"/>
        <str val="minimal"/>
       </gc>
       <elem line="1545" name="a" nsuri="" namespaces="rdf xhtml js in fn map array ev">
        <copyOf flags="vc">
         <varRef name="innerbody" slot="3"/>
        </copyOf>
       </elem>
       <true/>
       <elem line="1549" name="button" nsuri="" namespaces="rdf xhtml js in fn map array ev">
        <sequence>
         <att name="type" flags="l">
          <str val="button"/>
         </att>
         <copyOf line="1550" flags="vc">
          <filter flags="b">
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
           <vc op="ne" comp="CCC">
            <fn name="local-name">
             <dot type="attribute()"/>
            </fn>
            <str val="ref"/>
           </vc>
          </filter>
         </copyOf>
         <choose line="1551">
          <and op="and">
           <fn name="exists">
            <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
           </fn>
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}contains" type="xs:boolean">
            <varRef name="submissions" slot="2"/>
            <atomSing diag="0|1||map:contains">
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            </atomSing>
           </ifCall>
          </and>
          <att line="1552" name="data-action" flags="l">
           <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
            <varRef name="submissions" slot="2"/>
            <atomSing diag="0|1||map:get">
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            </atomSing>
           </ifCall>
          </att>
         </choose>
         <copyOf line="1554" flags="vc">
          <varRef name="innerbody" slot="3"/>
         </copyOf>
        </sequence>
       </elem>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}message)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="2.0" seq="5" rank="3" minImp="0" slots="7" flags="s" line="1201" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}textarea)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='textarea';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1202">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1203" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1204" name="Q{}nodeset" slot="2" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <applyT line="1205" bSlot="6">
      <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </applyT>
     <let line="1207" var="hints" as="text()*" slot="3" eval="3">
      <slash>
       <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}hint)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';"/>
       <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
      </slash>
      <let line="1209" var="actions" as="map(*)*" slot="4" eval="3">
       <treat line="1210" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
        <applyT bSlot="7">
         <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
         <withParam name="Q{}instance1" as="node()?">
          <varRef line="1211" name="instance1" slot="0"/>
         </withParam>
         <withParam name="Q{}nodeset" as="xs:string">
          <varRef line="1212" name="nodeset" slot="2"/>
         </withParam>
         <withParam name="Q{}bindings" as="map(xs:string, node())">
          <varRef line="1213" name="bindings" slot="1"/>
         </withParam>
        </applyT>
       </treat>
       <let line="1217" var="ref-binding" as="xs:string" slot="5" eval="7">
        <choose line="1219">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
         </fn>
         <cvUntyped line="1220" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <fn name="string">
            <convert from="xs:untypedAtomic" to="xs:string">
             <attVal name="Q{}ref" chk="0"/>
            </convert>
           </fn>
          </cast>
         </cvUntyped>
         <fn line="1222" name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}bind)" jsTest="return item.name==='bind'"/>
         </fn>
         <cvUntyped line="1223" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <fn name="string">
            <convert from="xs:untypedAtomic" to="xs:string">
             <attVal name="Q{}bind" chk="0"/>
            </convert>
           </fn>
          </cast>
         </cvUntyped>
         <true/>
         <str val=""/>
        </choose>
        <let line="1238" var="bindingi" as="node()?" slot="6" eval="7">
         <choose>
          <fn name="empty">
           <varRef name="ref-binding" slot="5"/>
          </fn>
          <empty/>
          <true/>
          <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
           <varRef name="bindings" slot="1"/>
           <varRef name="ref-binding" slot="5"/>
          </ifCall>
         </choose>
         <sequence line="1268">
          <choose>
           <fn name="exists">
            <varRef name="actions" slot="4"/>
           </fn>
           <ifCall line="1284" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
            <check card="1" diag="0|0||ixsl:call">
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            </check>
            <str val="addAction"/>
            <arrayBlock>
             <choose line="1274">
              <fn name="exists">
               <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
              </fn>
              <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
              <true/>
              <fn name="generate-id">
               <dot type="element(Q{http://www.w3.org/2002/xforms}textarea)"/>
              </fn>
             </choose>
             <varRef name="actions" slot="4"/>
            </arrayBlock>
           </ifCall>
          </choose>
          <elem line="1291" name="textarea" nsuri="" namespaces="rdf xhtml js in fn map array ev">
           <sequence>
            <copyOf flags="vc">
             <filter flags="b">
              <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
              <vc op="ne" comp="CCC">
               <fn name="local-name">
                <dot type="attribute()"/>
               </fn>
               <str val="ref"/>
              </vc>
             </filter>
            </copyOf>
            <att line="1292" name="data-element" flags="l">
             <lastOf line="1242">
              <fn name="tokenize">
               <choose>
                <fn name="exists">
                 <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                </fn>
                <cvUntyped line="1249" to="xs:string">
                 <cast as="xs:untypedAtomic" emptiable="0">
                  <choose>
                   <fn name="not">
                    <varRef name="nodeset" slot="2"/>
                   </fn>
                   <fn name="concat">
                    <varRef name="nodeset" slot="2"/>
                    <attVal name="Q{}ref" chk="0"/>
                   </fn>
                   <true/>
                   <fn name="concat">
                    <varRef name="nodeset" slot="2"/>
                    <str val="/"/>
                    <attVal name="Q{}ref" chk="0"/>
                   </fn>
                  </choose>
                 </cast>
                </cvUntyped>
                <fn line="1251" name="exists">
                 <varRef name="bindingi" slot="6"/>
                </fn>
                <cvUntyped line="1258" to="xs:string">
                 <cast as="xs:untypedAtomic" emptiable="0">
                  <fn name="string-join">
                   <convert from="xs:anyAtomicType" to="xs:string">
                    <choose>
                     <fn name="exists">
                      <slash simple="1">
                       <varRef name="bindingi" slot="6"/>
                       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                      </slash>
                     </fn>
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="6"/>
                       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                      </slash>
                     </data>
                     <true/>
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="6"/>
                       <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                      </slash>
                     </data>
                    </choose>
                   </convert>
                   <str val=" "/>
                  </fn>
                 </cast>
                </cvUntyped>
                <true/>
                <str val=""/>
               </choose>
               <str val="/"/>
               <str val=""/>
              </fn>
             </lastOf>
            </att>
            <att line="1298" name="data-ref" flags="l">
             <choose>
              <fn name="not">
               <varRef name="nodeset" slot="2"/>
              </fn>
              <fn name="concat">
               <varRef name="nodeset" slot="2"/>
               <attVal name="Q{}ref" chk="0"/>
              </fn>
              <true/>
              <fn name="concat">
               <varRef name="nodeset" slot="2"/>
               <str val="/"/>
               <attVal name="Q{}ref" chk="0"/>
              </fn>
             </choose>
            </att>
            <choose line="1300">
             <and op="and">
              <fn name="exists">
               <varRef name="instance1" slot="0"/>
              </fn>
              <fn name="exists">
               <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
              </fn>
             </and>
             <evaluate line="1303" dxns="">
              <fn role="xpath" name="concat">
               <attVal name="Q{}ref" chk="0"/>
               <str val="/text()"/>
              </fn>
              <varRef role="cxt" name="instance1" slot="0"/>
              <str role="sa" val="no"/>
              <map role="wp" size="0"/>
             </evaluate>
             <true/>
             <sequence line="1305">
              <valueOf flags="Sl">
               <str val=""/>
              </valueOf>
              <valueOf flags="l">
               <str val="  "/>
              </valueOf>
             </sequence>
            </choose>
            <choose line="1308">
             <fn name="exists">
              <varRef name="hints" slot="3"/>
             </fn>
             <att line="1309" name="title" flags="l">
              <fn name="string-join">
               <convert from="xs:untypedAtomic" to="xs:string">
                <data>
                 <mergeAdj>
                  <varRef name="hints" slot="3"/>
                 </mergeAdj>
                </data>
               </convert>
               <str val=" "/>
              </fn>
             </att>
            </choose>
           </sequence>
          </elem>
         </sequence>
        </let>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}setvalue)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}hide)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="3" rank="1" minImp="0" slots="0" flags="s" line="921" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/1999/xhtml}html)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='html';"/>
    <elem role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="923" name="html" nsuri="" namespaces="rdf xhtml js in fn map array ev">
     <sequence>
      <copyOf flags="vc">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
      </copyOf>
      <elem line="925" name="head" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
       <sequence>
        <copyOf flags="vc">
         <union op="|">
          <slash>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
          <slash>
           <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
         </union>
        </copyOf>
        <elem line="926" name="meta" nsuri="" flags="l">
         <sequence>
          <att name="http-equiv" flags="l">
           <str val="Content-Type"/>
          </att>
          <att name="content" flags="l">
           <str val="text/html;charset=utf-8"/>
          </att>
         </sequence>
        </elem>
        <forEach line="928">
         <union op="|">
          <filter flags="b">
           <slash>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
          <filter flags="b">
           <slash>
            <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
         </union>
         <elem line="930" name="meta" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
          <copyOf flags="vc">
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </copyOf>
         </elem>
        </forEach>
        <copyOf line="935" flags="vc">
         <axis name="child" nodeTest="element(Q{}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='script';"/>
        </copyOf>
       </sequence>
      </elem>
      <elem line="938" name="body" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
       <applyT bSlot="8">
        <slash role="select">
         <axis name="child" nodeTest="element(Q{}body)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='body';"/>
         <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
       </applyT>
      </elem>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}setfocus)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="4" rank="1" minImp="0" slots="13" flags="s" line="945" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}input)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='input';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="946">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="947" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="949" name="Q{}nodeset" slot="2" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="950" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <let line="957" var="ref-binding" as="xs:string" slot="4" eval="7">
      <choose line="959">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
       </fn>
       <cvUntyped line="960" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}ref" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <fn line="962" name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}bind)" jsTest="return item.name==='bind'"/>
       </fn>
       <cvUntyped line="963" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}bind" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <true/>
       <str val=""/>
      </choose>
      <let line="979" var="bindingi" as="node()?" slot="5" eval="7">
       <choose>
        <fn name="empty">
         <varRef name="ref-binding" slot="4"/>
        </fn>
        <empty/>
        <true/>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="bindings" slot="1"/>
         <varRef name="ref-binding" slot="4"/>
        </ifCall>
       </choose>
       <let line="982" var="refi" as="xs:string" slot="6" eval="7">
        <choose line="984">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
         </fn>
         <cvUntyped line="991" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <choose>
            <fn name="not">
             <varRef name="nodeset" slot="2"/>
            </fn>
            <fn name="concat">
             <varRef name="nodeset" slot="2"/>
             <attVal name="Q{}ref" chk="0"/>
            </fn>
            <true/>
            <fn name="concat">
             <varRef name="nodeset" slot="2"/>
             <str val="/"/>
             <attVal name="Q{}ref" chk="0"/>
            </fn>
           </choose>
          </cast>
         </cvUntyped>
         <fn line="993" name="exists">
          <varRef name="bindingi" slot="5"/>
         </fn>
         <cvUntyped line="1000" to="xs:string">
          <cast as="xs:untypedAtomic" emptiable="0">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <choose>
              <fn name="exists">
               <slash simple="1">
                <varRef name="bindingi" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </fn>
              <data>
               <slash simple="1">
                <varRef name="bindingi" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
               </slash>
              </data>
              <true/>
              <data>
               <slash simple="1">
                <varRef name="bindingi" slot="5"/>
                <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
               </slash>
              </data>
             </choose>
            </convert>
            <str val=" "/>
           </fn>
          </cast>
         </cvUntyped>
         <true/>
         <str val=""/>
        </choose>
        <let line="1015" var="instanceForBinding" as="node()?" slot="7" eval="7">
         <choose line="1017">
          <and op="and">
           <fn name="exists">
            <varRef name="bindingi" slot="5"/>
           </fn>
           <fn name="exists">
            <slash simple="1">
             <varRef name="bindingi" slot="5"/>
             <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
            </slash>
           </fn>
          </and>
          <treat line="1021" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|instanceForBinding">
           <check card="?" diag="3|0|XTTE0570|instanceForBinding">
            <evaluate dxns="">
             <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
              <cvUntyped to="xs:string">
               <data>
                <slash simple="1">
                 <varRef name="bindingi" slot="5"/>
                 <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                </slash>
               </data>
              </cvUntyped>
             </check>
             <varRef role="cxt" name="instance1" slot="0"/>
             <str role="sa" val="no"/>
             <map role="wp" size="0"/>
            </evaluate>
           </check>
          </treat>
          <true/>
          <varRef line="1024" name="instance1" slot="0"/>
         </choose>
         <let line="1029" var="relevantVar" as="xs:boolean" slot="8" eval="7">
          <choose line="1031">
           <and op="and">
            <and op="and">
             <fn name="exists">
              <varRef name="bindingi" slot="5"/>
             </fn>
             <fn name="exists">
              <slash simple="1">
               <varRef name="bindingi" slot="5"/>
               <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
              </slash>
             </fn>
            </and>
            <fn name="exists">
             <varRef name="instanceForBinding" slot="7"/>
            </fn>
           </and>
           <treat line="1032" as="xs:boolean" jsTest="return SaxonJS.U.Atomic.boolean.matches(item);" diag="3|0|XTTE0570|relevantVar">
            <check card="1" diag="3|0|XTTE0570|relevantVar">
             <cvUntyped to="xs:boolean">
              <data>
               <evaluate dxns="">
                <ufCall role="xpath" name="Q{http://www.w3.org/2002/xforms}impose" tailCall="false" bSlot="9" eval="7">
                 <check card="1" diag="0|0||xforms:impose">
                  <cvUntyped to="xs:string">
                   <data>
                    <slash simple="1">
                     <varRef name="bindingi" slot="5"/>
                     <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                    </slash>
                   </data>
                  </cvUntyped>
                 </check>
                </ufCall>
                <varRef role="cxt" name="instanceForBinding" slot="7"/>
                <str role="sa" val="no"/>
                <map role="wp" size="0"/>
               </evaluate>
              </data>
             </cvUntyped>
            </check>
           </treat>
           <true/>
           <true/>
          </choose>
          <let line="1040" var="actions" as="map(*)*" slot="9" eval="3">
           <treat line="1041" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
            <applyT bSlot="10">
             <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
             <withParam name="Q{}instance1" as="node()?">
              <varRef line="1042" name="instance1" slot="0"/>
             </withParam>
             <withParam name="Q{}nodeset" as="xs:string">
              <varRef line="1043" name="refi" slot="6"/>
             </withParam>
             <withParam name="Q{}bindings" as="map(xs:string, node())">
              <varRef line="1044" name="bindings" slot="1"/>
             </withParam>
             <withParam name="Q{}position">
              <varRef line="1045" name="position" slot="3"/>
             </withParam>
            </applyT>
           </treat>
           <let line="1054" var="myid" as="item()?" slot="10" eval="7">
            <choose>
             <fn name="exists">
              <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
             </fn>
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
             <true/>
             <fn name="concat">
              <fn name="generate-id">
               <dot type="element(Q{http://www.w3.org/2002/xforms}input)"/>
              </fn>
              <atomSing card="?" diag="0|1||fn:concat">
               <varRef name="position" slot="3"/>
              </atomSing>
             </fn>
            </choose>
            <sequence line="1055">
             <choose>
              <fn name="exists">
               <varRef name="actions" slot="9"/>
              </fn>
              <ifCall line="1065" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
               <check card="1" diag="0|0||ixsl:call">
                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
               </check>
               <str val="addAction"/>
               <arrayBlock>
                <varRef name="myid" slot="10"/>
                <varRef name="actions" slot="9"/>
               </arrayBlock>
              </ifCall>
             </choose>
             <elem line="1075" name="span" nsuri="" namespaces="rdf xhtml js in fn map array ev">
              <sequence>
               <att name="style" flags="l">
                <choose>
                 <varRef name="relevantVar" slot="8"/>
                 <str val="display:inline"/>
                 <true/>
                 <str val="display:none"/>
                </choose>
               </att>
               <applyT line="1078" bSlot="11">
                <axis role="select" name="child" nodeTest="(element(Q{http://www.w3.org/2002/xforms}label) | element(Q{http://www.w3.org/2002/xforms}hint))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';};return a()||b();"/>
                <withParam name="Q{}instance1" as="node()?">
                 <varRef line="1079" name="instance1" slot="0"/>
                </withParam>
                <withParam name="Q{}nodeset" as="xs:string">
                 <varRef line="1080" name="refi" slot="6"/>
                </withParam>
                <withParam name="Q{}bindings" as="map(xs:string, node())">
                 <varRef line="1081" name="bindings" slot="1"/>
                </withParam>
                <withParam name="Q{}position">
                 <varRef line="1082" name="position" slot="3"/>
                </withParam>
               </applyT>
               <let line="1088" var="hints" as="text()*" slot="11" eval="3">
                <slash>
                 <axis name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}hint)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';"/>
                 <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
                </slash>
                <elem line="1093" name="input" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
                 <sequence>
                  <att name="data-element" flags="l">
                   <lastOf line="1090">
                    <fn name="tokenize">
                     <varRef name="refi" slot="6"/>
                     <str val="/"/>
                     <str val=""/>
                    </fn>
                   </lastOf>
                  </att>
                  <choose line="1094">
                   <and op="and">
                    <fn name="exists">
                     <varRef name="bindingi" slot="5"/>
                    </fn>
                    <fn name="exists">
                     <slash simple="1">
                      <varRef name="bindingi" slot="5"/>
                      <axis name="attribute" nodeTest="attribute(Q{}required)" jsTest="return item.name==='required'"/>
                     </slash>
                    </fn>
                   </and>
                   <att line="1095" name="data-required" flags="l">
                    <convert from="xs:untypedAtomic" to="xs:string">
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="5"/>
                       <axis name="attribute" nodeTest="attribute(Q{}required)" jsTest="return item.name==='required'"/>
                      </slash>
                     </data>
                    </convert>
                   </att>
                  </choose>
                  <choose line="1097">
                   <and op="and">
                    <fn name="exists">
                     <varRef name="bindingi" slot="5"/>
                    </fn>
                    <fn name="exists">
                     <slash simple="1">
                      <varRef name="bindingi" slot="5"/>
                      <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                     </slash>
                    </fn>
                   </and>
                   <att line="1098" name="data-constraint" flags="l">
                    <convert from="xs:untypedAtomic" to="xs:string">
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="5"/>
                       <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                      </slash>
                     </data>
                    </convert>
                   </att>
                  </choose>
                  <choose line="1100">
                   <fn name="exists">
                    <varRef name="actions" slot="9"/>
                   </fn>
                   <att line="1101" name="data-action" flags="l">
                    <fn name="string-join">
                     <convert from="xs:anyAtomicType" to="xs:string">
                      <data>
                       <varRef name="myid" slot="10"/>
                      </data>
                     </convert>
                     <str val=" "/>
                    </fn>
                   </att>
                  </choose>
                  <choose line="1104">
                   <and op="and">
                    <fn name="exists">
                     <varRef name="bindingi" slot="5"/>
                    </fn>
                    <fn name="exists">
                     <slash simple="1">
                      <varRef name="bindingi" slot="5"/>
                      <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                     </slash>
                    </fn>
                   </and>
                   <att line="1105" name="data-relevant" flags="l">
                    <convert from="xs:untypedAtomic" to="xs:string">
                     <data>
                      <slash simple="1">
                       <varRef name="bindingi" slot="5"/>
                       <axis name="attribute" nodeTest="attribute(Q{}relevant)" jsTest="return item.name==='relevant'"/>
                      </slash>
                     </data>
                    </convert>
                   </att>
                  </choose>
                  <choose line="1119">
                   <choose>
                    <fn name="exists">
                     <varRef name="bindingi" slot="5"/>
                    </fn>
                    <vc op="eq" comp="EQC">
                     <cast as="xs:QName" emptiable="1">
                      <data>
                       <slash simple="1">
                        <varRef name="bindingi" slot="5"/>
                        <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
                       </slash>
                      </data>
                     </cast>
                     <qName pre="xs" uri="http://www.w3.org/2001/XMLSchema" loc="date"/>
                    </vc>
                    <true/>
                    <false/>
                   </choose>
                   <sequence line="1120">
                    <att name="data-type" flags="l">
                     <str val="date"/>
                    </att>
                    <att line="1122" name="type" flags="l">
                     <str val="date"/>
                    </att>
                    <att line="1125" name="value" flags="l">
                     <fn name="string-join">
                      <convert from="xs:anyAtomicType" to="xs:string">
                       <choose>
                        <and op="and">
                         <fn name="exists">
                          <varRef name="instance1" slot="0"/>
                         </fn>
                         <fn name="exists">
                          <varRef name="refi" slot="6"/>
                         </fn>
                        </and>
                        <data line="1127">
                         <mergeAdj>
                          <evaluate dxns="">
                           <fn role="xpath" name="concat">
                            <varRef name="refi" slot="6"/>
                            <str val="/text()"/>
                           </fn>
                           <varRef role="cxt" name="instance1" slot="0"/>
                           <str role="sa" val="no"/>
                           <map role="wp" size="0"/>
                          </evaluate>
                         </mergeAdj>
                        </data>
                       </choose>
                      </convert>
                      <str val=""/>
                     </fn>
                    </att>
                   </sequence>
                   <choose line="1136">
                    <fn name="exists">
                     <varRef name="bindingi" slot="5"/>
                    </fn>
                    <vc op="eq" comp="EQC">
                     <cast as="xs:QName" emptiable="1">
                      <data>
                       <slash simple="1">
                        <varRef name="bindingi" slot="5"/>
                        <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
                       </slash>
                      </data>
                     </cast>
                     <qName pre="xs" uri="http://www.w3.org/2001/XMLSchema" loc="time"/>
                    </vc>
                    <true/>
                    <false/>
                   </choose>
                   <sequence line="1137">
                    <att name="data-type" flags="l">
                     <str val="time"/>
                    </att>
                    <att line="1139" name="type" flags="l">
                     <str val="time"/>
                    </att>
                    <att line="1143" name="value" flags="l">
                     <fn name="string-join">
                      <convert from="xs:anyAtomicType" to="xs:string">
                       <choose>
                        <and op="and">
                         <fn name="exists">
                          <varRef name="instance1" slot="0"/>
                         </fn>
                         <fn name="exists">
                          <varRef name="refi" slot="6"/>
                         </fn>
                        </and>
                        <data line="1145">
                         <mergeAdj>
                          <evaluate dxns="">
                           <fn role="xpath" name="concat">
                            <varRef name="refi" slot="6"/>
                            <str val="/text()"/>
                           </fn>
                           <varRef role="cxt" name="instance1" slot="0"/>
                           <str role="sa" val="no"/>
                           <map role="wp" size="0"/>
                          </evaluate>
                         </mergeAdj>
                        </data>
                       </choose>
                      </convert>
                      <str val=""/>
                     </fn>
                    </att>
                   </sequence>
                   <choose line="1154">
                    <fn name="exists">
                     <varRef name="bindingi" slot="5"/>
                    </fn>
                    <vc op="eq" comp="EQC">
                     <cast as="xs:QName" emptiable="1">
                      <data>
                       <slash simple="1">
                        <varRef name="bindingi" slot="5"/>
                        <axis name="attribute" nodeTest="attribute(Q{}type)" jsTest="return item.name==='type'"/>
                       </slash>
                      </data>
                     </cast>
                     <qName pre="xs" uri="http://www.w3.org/2001/XMLSchema" loc="boolean"/>
                    </vc>
                    <true/>
                    <false/>
                   </choose>
                   <sequence line="1155">
                    <att name="data-type" flags="l">
                     <str val="checkbox"/>
                    </att>
                    <att line="1157" name="type" flags="l">
                     <str val="checkbox"/>
                    </att>
                    <choose line="1161">
                     <and op="and">
                      <fn name="exists">
                       <varRef name="instance1" slot="0"/>
                      </fn>
                      <fn name="exists">
                       <slash simple="1">
                        <varRef name="bindingi" slot="5"/>
                        <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                       </slash>
                      </fn>
                     </and>
                     <let line="1163" var="checkedi" as="document-node()" slot="12" eval="7">
                      <doc line="1164" validation="preserve">
                       <evaluate dxns="">
                        <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
                         <cvUntyped to="xs:string">
                          <data>
                           <slash simple="1">
                            <varRef name="bindingi" slot="5"/>
                            <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
                           </slash>
                          </data>
                         </cvUntyped>
                        </check>
                        <varRef role="cxt" name="instance1" slot="0"/>
                        <str role="sa" val="no"/>
                        <map role="wp" size="0"/>
                       </evaluate>
                      </doc>
                      <choose line="1167">
                       <and op="and">
                        <and op="and">
                         <fn name="exists">
                          <varRef name="checkedi" slot="12"/>
                         </fn>
                         <cvUntyped to="xs:string">
                          <data>
                           <varRef name="checkedi" slot="12"/>
                          </data>
                         </cvUntyped>
                        </and>
                        <cast as="xs:boolean" emptiable="0">
                         <data>
                          <varRef name="checkedi" slot="12"/>
                         </data>
                        </cast>
                       </and>
                       <att line="1168" name="checked" flags="l">
                        <convert from="xs:untypedAtomic" to="xs:string">
                         <data>
                          <varRef name="checkedi" slot="12"/>
                         </data>
                        </convert>
                       </att>
                      </choose>
                     </let>
                    </choose>
                   </sequence>
                   <true/>
                   <sequence line="1175">
                    <choose>
                     <varRef name="relevantVar" slot="8"/>
                     <att line="1176" name="type" flags="l">
                      <str val="text"/>
                     </att>
                    </choose>
                    <att line="1179" name="value" flags="l">
                     <fn name="string-join">
                      <convert from="xs:anyAtomicType" to="xs:string">
                       <choose>
                        <and op="and">
                         <fn name="exists">
                          <varRef name="instance1" slot="0"/>
                         </fn>
                         <fn name="exists">
                          <varRef name="refi" slot="6"/>
                         </fn>
                        </and>
                        <data line="1181">
                         <mergeAdj>
                          <evaluate dxns="">
                           <fn role="xpath" name="concat">
                            <varRef name="refi" slot="6"/>
                            <str val="/text()"/>
                           </fn>
                           <varRef role="cxt" name="instance1" slot="0"/>
                           <str role="sa" val="no"/>
                           <map role="wp" size="0"/>
                          </evaluate>
                         </mergeAdj>
                        </data>
                       </choose>
                      </convert>
                      <str val=""/>
                     </fn>
                    </att>
                   </sequence>
                  </choose>
                  <choose line="1188">
                   <fn name="exists">
                    <varRef name="hints" slot="11"/>
                   </fn>
                   <att line="1189" name="title" flags="l">
                    <fn name="string-join">
                     <convert from="xs:untypedAtomic" to="xs:string">
                      <data>
                       <mergeAdj>
                        <varRef name="hints" slot="11"/>
                       </mergeAdj>
                      </data>
                     </convert>
                     <str val=" "/>
                    </fn>
                   </att>
                  </choose>
                  <choose line="1191">
                   <fn name="exists">
                    <axis name="attribute" nodeTest="attribute(Q{}size)" jsTest="return item.name==='size'"/>
                   </fn>
                   <att line="1192" name="size" flags="l">
                    <convert from="xs:untypedAtomic" to="xs:string">
                     <attVal name="Q{}size" chk="0"/>
                    </convert>
                   </att>
                  </choose>
                  <att line="1194" name="data-ref" flags="l">
                   <varRef name="refi" slot="6"/>
                  </att>
                 </sequence>
                </elem>
               </let>
              </sequence>
             </elem>
            </sequence>
           </let>
          </let>
         </let>
        </let>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="0" rank="1" minImp="0" slots="0" flags="s" line="896" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}rebuild)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="7" rank="1" minImp="0" slots="9" flags="s" line="1316" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}select)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='select';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1317">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1318" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1320" name="Q{}nodeset" slot="2" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1321" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <let line="1326" var="ref-binding" as="xs:string" slot="4" eval="7">
      <choose line="1328">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
       </fn>
       <cvUntyped line="1329" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}ref" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <fn line="1331" name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}bind)" jsTest="return item.name==='bind'"/>
       </fn>
       <cvUntyped line="1332" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}bind" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <true/>
       <str val=""/>
      </choose>
      <let line="1347" var="bindingi" as="node()?" slot="5" eval="7">
       <choose>
        <fn name="empty">
         <varRef name="ref-binding" slot="4"/>
        </fn>
        <empty/>
        <true/>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="bindings" slot="1"/>
         <varRef name="ref-binding" slot="4"/>
        </ifCall>
       </choose>
       <let line="1354" var="refi" as="xs:string" slot="6" eval="7">
        <choose>
         <fn name="not">
          <varRef name="nodeset" slot="2"/>
         </fn>
         <fn name="concat">
          <varRef name="nodeset" slot="2"/>
          <attVal name="Q{}ref" chk="0"/>
         </fn>
         <true/>
         <fn name="concat">
          <varRef name="nodeset" slot="2"/>
          <str val="/"/>
          <attVal name="Q{}ref" chk="0"/>
         </fn>
        </choose>
        <sequence line="1355">
         <applyT bSlot="12">
          <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
         </applyT>
         <let line="1357" var="actions" as="map(*)*" slot="7" eval="3">
          <treat line="1358" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
           <applyT bSlot="13">
            <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
            <withParam name="Q{}instance1" as="node()?">
             <varRef line="1359" name="instance1" slot="0"/>
            </withParam>
            <withParam name="Q{}nodeset" as="xs:string">
             <varRef line="1360" name="refi" slot="6"/>
            </withParam>
            <withParam name="Q{}bindings" as="map(xs:string, node())">
             <varRef line="1361" name="bindings" slot="1"/>
            </withParam>
            <withParam name="Q{}position">
             <varRef line="1362" name="position" slot="3"/>
            </withParam>
           </applyT>
          </treat>
          <let line="1371" var="myid" as="item()?" slot="8" eval="7">
           <choose>
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            </fn>
            <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            <true/>
            <fn name="concat">
             <fn name="generate-id">
              <dot type="element()"/>
             </fn>
             <atomSing card="?" diag="0|1||fn:concat">
              <varRef name="position" slot="3"/>
             </atomSing>
            </fn>
           </choose>
           <sequence line="1374">
            <choose>
             <fn name="exists">
              <varRef name="actions" slot="7"/>
             </fn>
             <ifCall line="1383" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
              <check card="1" diag="0|0||ixsl:call">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
              </check>
              <str val="addAction"/>
              <arrayBlock>
               <varRef name="myid" slot="8"/>
               <varRef name="actions" slot="7"/>
              </arrayBlock>
             </ifCall>
            </choose>
            <elem line="1389" name="span" nsuri="" namespaces="rdf xhtml js in fn map array ev">
             <sequence>
              <att name="style" flags="l">
               <str val="display:inline"/>
              </att>
              <elem line="1391" name="select" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
               <sequence>
                <copyOf flags="vc">
                 <filter flags="b">
                  <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
                  <vc op="ne" comp="CCC">
                   <fn name="local-name">
                    <dot type="attribute()"/>
                   </fn>
                   <str val="ref"/>
                  </vc>
                 </filter>
                </copyOf>
                <choose line="1392">
                 <and op="and">
                  <fn name="exists">
                   <varRef name="instance1" slot="0"/>
                  </fn>
                  <fn name="exists">
                   <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                  </fn>
                 </and>
                 <att line="1399" name="data-ref" flags="l">
                  <choose>
                   <fn name="not">
                    <varRef name="nodeset" slot="2"/>
                   </fn>
                   <fn name="concat">
                    <varRef name="nodeset" slot="2"/>
                    <attVal name="Q{}ref" chk="0"/>
                   </fn>
                   <true/>
                   <fn name="concat">
                    <varRef name="nodeset" slot="2"/>
                    <str val="/"/>
                    <attVal name="Q{}ref" chk="0"/>
                   </fn>
                  </choose>
                 </att>
                </choose>
                <att line="1401" name="data-element" flags="l">
                 <lastOf line="1387">
                  <fn name="tokenize">
                   <varRef name="refi" slot="6"/>
                   <str val="/"/>
                   <str val=""/>
                  </fn>
                 </lastOf>
                </att>
                <choose line="1402">
                 <and op="and">
                  <fn name="exists">
                   <varRef name="bindingi" slot="5"/>
                  </fn>
                  <fn name="exists">
                   <slash simple="1">
                    <varRef name="bindingi" slot="5"/>
                    <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                   </slash>
                  </fn>
                 </and>
                 <att line="1403" name="data-constraint" flags="l">
                  <convert from="xs:untypedAtomic" to="xs:string">
                   <data>
                    <slash simple="1">
                     <varRef name="bindingi" slot="5"/>
                     <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                    </slash>
                   </data>
                  </convert>
                 </att>
                </choose>
                <choose line="1405">
                 <vc op="eq" onEmpty="0" comp="CCC">
                  <fn name="local-name">
                   <dot type="element()"/>
                  </fn>
                  <str val="select"/>
                 </vc>
                 <sequence line="1408">
                  <att name="multiple" flags="l">
                   <str val="true"/>
                  </att>
                  <att name="size" flags="l">
                   <convert from="xs:integer" to="xs:string">
                    <fn name="count">
                     <axis name="descendant" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                    </fn>
                   </convert>
                  </att>
                 </sequence>
                </choose>
                <choose line="1411">
                 <fn name="exists">
                  <varRef name="actions" slot="7"/>
                 </fn>
                 <att line="1412" name="data-action" flags="l">
                  <fn name="string-join">
                   <convert from="xs:anyAtomicType" to="xs:string">
                    <data>
                     <varRef name="myid" slot="8"/>
                    </data>
                   </convert>
                   <str val=" "/>
                  </fn>
                 </att>
                </choose>
                <applyT line="1415" bSlot="14">
                 <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                 <withParam name="Q{}instance1" as="node()?">
                  <varRef line="1416" name="instance1" slot="0"/>
                 </withParam>
                 <withParam name="Q{}nodeset" as="xs:string">
                  <varRef line="1417" name="refi" slot="6"/>
                 </withParam>
                 <withParam name="Q{}bindings" as="map(xs:string, node())">
                  <varRef line="1418" name="bindings" slot="1"/>
                 </withParam>
                 <withParam name="Q{}position">
                  <varRef line="1419" name="position" slot="3"/>
                 </withParam>
                </applyT>
               </sequence>
              </elem>
             </sequence>
            </elem>
           </sequence>
          </let>
         </let>
        </sequence>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}delete)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}unload)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}load)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="15" rank="1" minImp="0" slots="7" flags="s" line="2017" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}action)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2018">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2019" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2020" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2021" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2022" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2028" name="Q{}myid" slot="5" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element(Q{http://www.w3.org/2002/xforms}action)"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="5"/>
     </param>
     <let line="2035" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="6" eval="8">
      <ifCall line="2039" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
       <sequence>
        <choose>
         <fn name="exists">
          <varRef name="nodeset" slot="4"/>
         </fn>
         <ifCall line="2040" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@ref"/>
          <cast as="xs:string" emptiable="1">
           <atomSing card="?" diag="2|0||cast as">
            <varRef name="nodeset" slot="4"/>
           </atomSing>
          </cast>
         </ifCall>
        </choose>
        <choose line="2043">
         <fn name="exists">
          <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
         </fn>
         <ifCall line="2044" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@event"/>
          <cast as="xs:string" emptiable="1">
           <atomSing card="?" diag="2|0||cast as">
            <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
           </atomSing>
          </cast>
         </ifCall>
        </choose>
        <choose line="2047">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
         </fn>
         <ifCall line="2048" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@position"/>
          <fn name="string">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
         </ifCall>
        </choose>
        <choose line="2050">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
         </fn>
         <ifCall line="2051" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@at"/>
          <fn name="string">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
         </ifCall>
        </choose>
        <choose line="2053">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
         </fn>
         <ifCall line="2054" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@if"/>
          <fn name="string">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
         </ifCall>
        </choose>
        <choose line="2056">
         <fn name="exists">
          <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
         </fn>
         <ifCall line="2057" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
          <str val="@while"/>
          <fn name="string">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
         </ifCall>
        </choose>
        <treat line="2061" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
         <forEachGroup algorithm="by">
          <axis role="select" name="child" nodeTest="(((((((((((((((element(Q{http://www.w3.org/2002/xforms}setvalue) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
          <fn role="key" name="local-name">
           <dot type="element()"/>
          </fn>
          <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
          <applyT role="content" line="2063" mode="Q{}xforms-action-map" bSlot="15">
           <dot role="select" type="(((((((((((((((element(Q{http://www.w3.org/2002/xforms}setvalue) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))"/>
           <withParam name="Q{}nodeset">
            <varRef line="2064" name="nodeset" slot="4"/>
           </withParam>
          </applyT>
         </forEachGroup>
        </treat>
       </sequence>
       <map size="2">
        <str val="duplicates"/>
        <str val="reject"/>
        <str val="duplicates-error-code"/>
        <str val="XTDE3365"/>
       </map>
      </ifCall>
      <choose line="2075">
       <and op="and">
        <fn name="exists">
         <varRef name="action-map" slot="6"/>
        </fn>
        <fn name="exists">
         <varRef name="myid" slot="5"/>
        </fn>
       </and>
       <varRef line="2077" name="action-map" slot="6"/>
      </choose>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}show)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="3" rank="1" minImp="0" slots="0" flags="s" line="921" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{}html)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='html';"/>
    <elem role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="923" name="html" nsuri="" namespaces="rdf xhtml js in fn map array ev">
     <sequence>
      <copyOf flags="vc">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
      </copyOf>
      <elem line="925" name="head" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
       <sequence>
        <copyOf flags="vc">
         <union op="|">
          <slash>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
          <slash>
           <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </slash>
         </union>
        </copyOf>
        <elem line="926" name="meta" nsuri="" flags="l">
         <sequence>
          <att name="http-equiv" flags="l">
           <str val="Content-Type"/>
          </att>
          <att name="content" flags="l">
           <str val="text/html;charset=utf-8"/>
          </att>
         </sequence>
        </elem>
        <forEach line="928">
         <union op="|">
          <filter flags="b">
           <slash>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/xhtml}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/xhtml'&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
          <filter flags="b">
           <slash>
            <axis name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
            <axis name="child" nodeTest="element(Q{}meta)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='meta';"/>
           </slash>
           <vc op="ne" comp="CCC">
            <fn name="string">
             <axis name="attribute" nodeTest="attribute(Q{}http-equiv)" jsTest="return item.name==='http-equiv'"/>
            </fn>
            <str val="Content-Type"/>
           </vc>
          </filter>
         </union>
         <elem line="930" name="meta" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
          <copyOf flags="vc">
           <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          </copyOf>
         </elem>
        </forEach>
        <copyOf line="935" flags="vc">
         <axis name="child" nodeTest="element(Q{}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='script';"/>
        </copyOf>
       </sequence>
      </elem>
      <elem line="938" name="body" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
       <applyT bSlot="8">
        <slash role="select">
         <axis name="child" nodeTest="element(Q{}body)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='body';"/>
         <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
       </applyT>
      </elem>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}send)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="6" rank="1" minImp="0" slots="0" flags="s" line="1314" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}hint)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hint';"/>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="2" rank="1" minImp="0" slots="3" flags="s" line="909" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}xform)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='xform';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="910">
     <param name="Q{}instance1" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <param line="911" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="912" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <applyT line="914" flags="t" bSlot="16">
      <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      <withParam name="Q{}instance1">
       <varRef line="915" name="instance1" slot="0"/>
      </withParam>
      <withParam name="Q{}bindings" as="map(xs:string, node())">
       <varRef line="916" name="bindings" slot="1"/>
      </withParam>
      <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
       <varRef line="917" name="submissions" slot="2"/>
      </withParam>
     </applyT>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}dispatch)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="7" rank="1" minImp="0" slots="9" flags="s" line="1316" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}select1)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='select1';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1317">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1318" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1320" name="Q{}nodeset" slot="2" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="2"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <param line="1321" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <let line="1326" var="ref-binding" as="xs:string" slot="4" eval="7">
      <choose line="1328">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
       </fn>
       <cvUntyped line="1329" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}ref" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <fn line="1331" name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}bind)" jsTest="return item.name==='bind'"/>
       </fn>
       <cvUntyped line="1332" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}bind" chk="0"/>
          </convert>
         </fn>
        </cast>
       </cvUntyped>
       <true/>
       <str val=""/>
      </choose>
      <let line="1347" var="bindingi" as="node()?" slot="5" eval="7">
       <choose>
        <fn name="empty">
         <varRef name="ref-binding" slot="4"/>
        </fn>
        <empty/>
        <true/>
        <ifCall name="Q{http://www.w3.org/2005/xpath-functions/map}get" type="item()*">
         <varRef name="bindings" slot="1"/>
         <varRef name="ref-binding" slot="4"/>
        </ifCall>
       </choose>
       <let line="1354" var="refi" as="xs:string" slot="6" eval="7">
        <choose>
         <fn name="not">
          <varRef name="nodeset" slot="2"/>
         </fn>
         <fn name="concat">
          <varRef name="nodeset" slot="2"/>
          <attVal name="Q{}ref" chk="0"/>
         </fn>
         <true/>
         <fn name="concat">
          <varRef name="nodeset" slot="2"/>
          <str val="/"/>
          <attVal name="Q{}ref" chk="0"/>
         </fn>
        </choose>
        <sequence line="1355">
         <applyT bSlot="12">
          <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='label';"/>
         </applyT>
         <let line="1357" var="actions" as="map(*)*" slot="7" eval="3">
          <treat line="1358" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="3|0|XTTE0570|actions">
           <applyT bSlot="13">
            <axis role="select" name="child" nodeTest="((((((((((((((((element(Q{http://www.w3.org/2002/xforms}action) | element(Q{http://www.w3.org/2002/xforms}setvalue)) | element(Q{http://www.w3.org/2002/xforms}insert)) | element(Q{http://www.w3.org/2002/xforms}delete)) | element(Q{http://www.w3.org/2002/xforms}toggle)) | element(Q{http://www.w3.org/2002/xforms}send)) | element(Q{http://www.w3.org/2002/xforms}setfocus)) | element(Q{http://www.w3.org/2002/xforms}setindex)) | element(Q{http://www.w3.org/2002/xforms}load)) | element(Q{http://www.w3.org/2002/xforms}message)) | element(Q{http://www.w3.org/2002/xforms}dispatch)) | element(Q{http://www.w3.org/2002/xforms}rebuild)) | element(Q{http://www.w3.org/2002/xforms}reset)) | element(Q{http://www.w3.org/2002/xforms}show)) | element(Q{http://www.w3.org/2002/xforms}hide)) | element(Q{http://www.w3.org/2002/xforms}script)) | element(Q{http://www.w3.org/2002/xforms}unload))" jsTest="function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='action';};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setvalue';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='delete';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='toggle';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='send';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setfocus';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='setindex';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='load';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='message';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='dispatch';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='rebuild';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='reset';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='show';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='hide';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='unload';};return a()||b();"/>
            <withParam name="Q{}instance1" as="node()?">
             <varRef line="1359" name="instance1" slot="0"/>
            </withParam>
            <withParam name="Q{}nodeset" as="xs:string">
             <varRef line="1360" name="refi" slot="6"/>
            </withParam>
            <withParam name="Q{}bindings" as="map(xs:string, node())">
             <varRef line="1361" name="bindings" slot="1"/>
            </withParam>
            <withParam name="Q{}position">
             <varRef line="1362" name="position" slot="3"/>
            </withParam>
           </applyT>
          </treat>
          <let line="1371" var="myid" as="item()?" slot="8" eval="7">
           <choose>
            <fn name="exists">
             <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            </fn>
            <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
            <true/>
            <fn name="concat">
             <fn name="generate-id">
              <dot type="element()"/>
             </fn>
             <atomSing card="?" diag="0|1||fn:concat">
              <varRef name="position" slot="3"/>
             </atomSing>
            </fn>
           </choose>
           <sequence line="1374">
            <choose>
             <fn name="exists">
              <varRef name="actions" slot="7"/>
             </fn>
             <ifCall line="1383" name="Q{http://saxonica.com/ns/interactiveXSLT}call" type="item()?">
              <check card="1" diag="0|0||ixsl:call">
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
              </check>
              <str val="addAction"/>
              <arrayBlock>
               <varRef name="myid" slot="8"/>
               <varRef name="actions" slot="7"/>
              </arrayBlock>
             </ifCall>
            </choose>
            <elem line="1389" name="span" nsuri="" namespaces="rdf xhtml js in fn map array ev">
             <sequence>
              <att name="style" flags="l">
               <str val="display:inline"/>
              </att>
              <elem line="1391" name="select" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
               <sequence>
                <copyOf flags="vc">
                 <filter flags="b">
                  <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
                  <vc op="ne" comp="CCC">
                   <fn name="local-name">
                    <dot type="attribute()"/>
                   </fn>
                   <str val="ref"/>
                  </vc>
                 </filter>
                </copyOf>
                <choose line="1392">
                 <and op="and">
                  <fn name="exists">
                   <varRef name="instance1" slot="0"/>
                  </fn>
                  <fn name="exists">
                   <axis name="attribute" nodeTest="attribute(Q{}ref)" jsTest="return item.name==='ref'"/>
                  </fn>
                 </and>
                 <att line="1399" name="data-ref" flags="l">
                  <choose>
                   <fn name="not">
                    <varRef name="nodeset" slot="2"/>
                   </fn>
                   <fn name="concat">
                    <varRef name="nodeset" slot="2"/>
                    <attVal name="Q{}ref" chk="0"/>
                   </fn>
                   <true/>
                   <fn name="concat">
                    <varRef name="nodeset" slot="2"/>
                    <str val="/"/>
                    <attVal name="Q{}ref" chk="0"/>
                   </fn>
                  </choose>
                 </att>
                </choose>
                <att line="1401" name="data-element" flags="l">
                 <lastOf line="1387">
                  <fn name="tokenize">
                   <varRef name="refi" slot="6"/>
                   <str val="/"/>
                   <str val=""/>
                  </fn>
                 </lastOf>
                </att>
                <choose line="1402">
                 <and op="and">
                  <fn name="exists">
                   <varRef name="bindingi" slot="5"/>
                  </fn>
                  <fn name="exists">
                   <slash simple="1">
                    <varRef name="bindingi" slot="5"/>
                    <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                   </slash>
                  </fn>
                 </and>
                 <att line="1403" name="data-constraint" flags="l">
                  <convert from="xs:untypedAtomic" to="xs:string">
                   <data>
                    <slash simple="1">
                     <varRef name="bindingi" slot="5"/>
                     <axis name="attribute" nodeTest="attribute(Q{}constraint)" jsTest="return item.name==='constraint'"/>
                    </slash>
                   </data>
                  </convert>
                 </att>
                </choose>
                <choose line="1405">
                 <vc op="eq" onEmpty="0" comp="CCC">
                  <fn name="local-name">
                   <dot type="element()"/>
                  </fn>
                  <str val="select"/>
                 </vc>
                 <sequence line="1408">
                  <att name="multiple" flags="l">
                   <str val="true"/>
                  </att>
                  <att name="size" flags="l">
                   <convert from="xs:integer" to="xs:string">
                    <fn name="count">
                     <axis name="descendant" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                    </fn>
                   </convert>
                  </att>
                 </sequence>
                </choose>
                <choose line="1411">
                 <fn name="exists">
                  <varRef name="actions" slot="7"/>
                 </fn>
                 <att line="1412" name="data-action" flags="l">
                  <fn name="string-join">
                   <convert from="xs:anyAtomicType" to="xs:string">
                    <data>
                     <varRef name="myid" slot="8"/>
                    </data>
                   </convert>
                   <str val=" "/>
                  </fn>
                 </att>
                </choose>
                <applyT line="1415" bSlot="14">
                 <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/2002/xforms}item)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='item';"/>
                 <withParam name="Q{}instance1" as="node()?">
                  <varRef line="1416" name="instance1" slot="0"/>
                 </withParam>
                 <withParam name="Q{}nodeset" as="xs:string">
                  <varRef line="1417" name="refi" slot="6"/>
                 </withParam>
                 <withParam name="Q{}bindings" as="map(xs:string, node())">
                  <varRef line="1418" name="bindings" slot="1"/>
                 </withParam>
                 <withParam name="Q{}position">
                  <varRef line="1419" name="position" slot="3"/>
                 </withParam>
                </applyT>
               </sequence>
              </elem>
             </sequence>
            </elem>
           </sequence>
          </let>
         </let>
        </sequence>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}insert)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='insert';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="16" rank="1" minImp="0" slots="8" flags="s" line="2085" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}script)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='script';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="2086">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="2087" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="2088" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="2089" name="Q{}position" slot="3">
      <str role="select" val=""/>
      <supplied role="conversion" slot="3"/>
     </param>
     <param line="2090" name="Q{}nodeset" slot="4">
      <str role="select" val=""/>
      <supplied role="conversion" slot="4"/>
     </param>
     <param line="2091" name="Q{}updateMode" slot="5" flags="t">
      <false role="select"/>
      <supplied role="conversion" slot="5"/>
     </param>
     <param line="2097" name="Q{}myid" slot="6" flags="t">
      <choose role="select">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       </fn>
       <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
       <true/>
       <fn name="concat">
        <fn name="generate-id">
         <dot type="element()"/>
        </fn>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="position" slot="3"/>
        </atomSing>
       </fn>
      </choose>
      <supplied role="conversion" slot="6"/>
     </param>
     <choose line="2102">
      <fn name="not">
       <varRef name="updateMode" slot="5"/>
      </fn>
      <let line="2110" var="action-map" as="map(xs:anyAtomicType, item()*)" slot="7" eval="8">
       <ifCall line="2114" name="Q{http://www.w3.org/2005/xpath-functions/map}merge" type="map(*)">
        <sequence>
         <choose>
          <fn name="exists">
           <varRef name="nodeset" slot="4"/>
          </fn>
          <ifCall line="2115" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@ref"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <varRef name="nodeset" slot="4"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2118">
          <fn name="exists">
           <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
          </fn>
          <ifCall line="2119" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@event"/>
           <cast as="xs:string" emptiable="1">
            <atomSing card="?" diag="2|0||cast as">
             <axis name="attribute" nodeTest="@*:event" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===2&amp;&amp;q.local==='event'"/>
            </atomSing>
           </cast>
          </ifCall>
         </choose>
         <choose line="2122">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
          </fn>
          <ifCall line="2123" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@position"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}position)" jsTest="return item.name==='position'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2125">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
          </fn>
          <ifCall line="2126" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@at"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}at)" jsTest="return item.name==='at'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2128">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
          </fn>
          <ifCall line="2129" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@if"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}if)" jsTest="return item.name==='if'"/>
           </fn>
          </ifCall>
         </choose>
         <choose line="2131">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
          </fn>
          <ifCall line="2132" name="Q{http://www.w3.org/2005/xpath-functions/map}entry" type="map(*)">
           <str val="@while"/>
           <fn name="string">
            <axis name="attribute" nodeTest="attribute(Q{}while)" jsTest="return item.name==='while'"/>
           </fn>
          </ifCall>
         </choose>
         <treat line="2135" as="map(*)" jsTest="return SaxonJS.U.isMap(item)" diag="18|0|XTTE3375|">
          <forEachGroup algorithm="by">
           <dot role="select" type="element()"/>
           <fn role="key" name="local-name">
            <dot type="element()"/>
           </fn>
           <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
           <applyT role="content" line="2136" mode="Q{}xforms-action-map" bSlot="1">
            <dot role="select" type="element()"/>
            <withParam name="Q{}nodeset">
             <varRef line="2137" name="nodeset" slot="4"/>
            </withParam>
           </applyT>
          </forEachGroup>
         </treat>
        </sequence>
        <map size="2">
         <str val="duplicates"/>
         <str val="reject"/>
         <str val="duplicates-error-code"/>
         <str val="XTDE3365"/>
        </map>
       </ifCall>
       <varRef line="2178" name="action-map" slot="7"/>
      </let>
     </choose>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="12" rank="1" minImp="0" slots="8" flags="s" line="1483" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/2002/xforms}repeat)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='repeat';"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1484">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1485" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1486" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <let line="1489" var="context" as="element(Q{http://www.w3.org/2002/xforms}repeat)" slot="3" eval="7">
      <dot type="element(Q{http://www.w3.org/2002/xforms}repeat)"/>
      <let line="1490" var="nodeseti" as="attribute(Q{}nodeset)?" slot="4" eval="8">
       <axis name="attribute" nodeTest="attribute(Q{}nodeset)" jsTest="return item.name==='nodeset'"/>
       <choose line="1492">
        <fn name="exists">
         <varRef name="instance1" slot="0"/>
        </fn>
        <let line="1493" var="selectedRepeatVar" as="node()*" slot="5" eval="8">
         <treat line="1495" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="3|0|XTTE0570|selectedRepeatVar">
          <evaluate dxns="">
           <check role="xpath" card="1" diag="4|0||xsl:evaluate/xpath">
            <cvUntyped to="xs:string">
             <attVal name="Q{}nodeset" chk="0"/>
            </cvUntyped>
           </check>
           <varRef role="cxt" name="instance1" slot="0"/>
           <str role="sa" val="no"/>
           <map role="wp" size="0"/>
          </evaluate>
         </treat>
         <choose line="1499">
          <fn name="exists">
           <varRef name="selectedRepeatVar" slot="5"/>
          </fn>
          <let line="1510" var="vv:v1" as="xs:untypedAtomic?" slot="6" eval="13">
           <data>
            <varRef name="nodeseti" slot="4"/>
           </data>
           <let line="1506" var="vv:v0" as="element()*" slot="7" eval="4">
            <slash simple="1">
             <varRef name="context" slot="3"/>
             <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
            </slash>
            <elem line="1500" name="div" nsuri="" namespaces="rdf xhtml js in fn map array ev">
             <sequence>
              <att name="data-repeatable-context" flags="l">
               <convert from="xs:untypedAtomic" to="xs:string">
                <attVal name="Q{}nodeset" chk="0"/>
               </convert>
              </att>
              <att name="data-count" flags="l">
               <convert from="xs:integer" to="xs:string">
                <fn name="count">
                 <varRef name="selectedRepeatVar" slot="5"/>
                </fn>
               </convert>
              </att>
              <choose line="1501">
               <fn name="exists">
                <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
               </fn>
               <att line="1502" name="id" flags="l">
                <convert from="xs:untypedAtomic" to="xs:string">
                 <attVal name="Q{}id" chk="0"/>
                </convert>
               </att>
              </choose>
              <forEach line="1504">
               <varRef name="selectedRepeatVar" slot="5"/>
               <elem line="1506" name="div" nsuri="" flags="l" namespaces="rdf xhtml js in fn map array ev">
                <applyT bSlot="17">
                 <varRef role="select" name="vv:v0" slot="7"/>
                 <withParam name="Q{}instance1" as="node()?">
                  <varRef line="1507" name="instance1" slot="0"/>
                 </withParam>
                 <withParam name="Q{}position" as="xs:integer">
                  <fn line="1508" name="position"/>
                 </withParam>
                 <withParam name="Q{}nodeset" as="xs:string">
                  <fn line="1510" name="concat">
                   <varRef name="vv:v1" slot="6"/>
                   <str val="["/>
                   <fn name="position"/>
                   <str val="]"/>
                  </fn>
                 </withParam>
                 <withParam name="Q{}bindings" as="map(xs:string, node())">
                  <varRef line="1511" name="bindings" slot="1"/>
                 </withParam>
                 <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
                  <varRef line="1512" name="submissions" slot="2"/>
                 </withParam>
                </applyT>
               </elem>
              </forEach>
             </sequence>
            </elem>
           </let>
          </let>
         </choose>
        </let>
       </choose>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="8" rank="0" minImp="0" slots="4" flags="s" line="1429" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1430">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1431" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1432" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="1434" name="Q{}nodeset" slot="3" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="3"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <copy line="1436" flags="cin">
      <sequence role="content">
       <applyT bSlot="18">
        <axis role="select" name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
       </applyT>
       <applyT line="1437" bSlot="19">
        <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
        <withParam name="Q{}instance1" as="node()?">
         <varRef line="1438" name="instance1" slot="0"/>
        </withParam>
        <withParam name="Q{}bindings" as="map(xs:string, node())">
         <varRef line="1439" name="bindings" slot="1"/>
        </withParam>
        <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
         <varRef line="1441" name="submissions" slot="2"/>
        </withParam>
        <withParam name="Q{}nodeset" as="xs:string">
         <varRef line="1442" name="nodeset" slot="3"/>
        </withParam>
       </applyT>
      </sequence>
     </copy>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="9" rank="2" minImp="0" slots="0" flags="s" line="1450" module="saxon-xforms.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="text()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;"/>
     <axis ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1450" name="ancestor" nodeTest="element(Q{http://www.w3.org/2002/xforms}model)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2002/xforms'&amp;&amp;q.local==='model';"/>
    </p.withPredicate>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="8" rank="0" minImp="0" slots="4" flags="s" line="1429" module="saxon-xforms.xsl">
    <p.nodeTest role="match" test="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
    <sequence role="action" ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1430">
     <param name="Q{}instance1" slot="0" as="node()?">
      <empty role="select"/>
      <treat role="conversion" as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="8|0|XTTE0590|instance1">
       <check card="?" diag="8|0|XTTE0590|instance1">
        <supplied slot="0"/>
       </check>
      </treat>
     </param>
     <param line="1431" name="Q{}bindings" slot="1" as="map(xs:string, node())">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, node())" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.isNode(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|bindings">
       <check card="1" diag="8|0|XTTE0590|bindings">
        <supplied slot="1"/>
       </check>
      </treat>
     </param>
     <param line="1432" name="Q{}submissions" slot="2" as="map(xs:string, xs:string)">
      <map role="select" size="0"/>
      <treat role="conversion" as="map(xs:string, xs:string)" jsTest="function k(item) {return SaxonJS.U.Atomic.string.matches(item);};function v(item) {return SaxonJS.U.Atomic.string.matches(item);};function c(n) {return n==1;};return SaxonJS.U.isMap(item) &amp;&amp; item.conforms(k, v, c);" diag="8|0|XTTE0590|submissions">
       <check card="1" diag="8|0|XTTE0590|submissions">
        <supplied slot="2"/>
       </check>
      </treat>
     </param>
     <param line="1434" name="Q{}nodeset" slot="3" as="xs:string">
      <str role="select" val=""/>
      <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|nodeset">
       <check card="1" diag="8|0|XTTE0590|nodeset">
        <cvUntyped to="xs:string">
         <data>
          <supplied slot="3"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </param>
     <copy line="1436" flags="cin">
      <sequence role="content">
       <applyT bSlot="18">
        <axis role="select" name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
       </applyT>
       <applyT line="1437" bSlot="19">
        <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
        <withParam name="Q{}instance1" as="node()?">
         <varRef line="1438" name="instance1" slot="0"/>
        </withParam>
        <withParam name="Q{}bindings" as="map(xs:string, node())">
         <varRef line="1439" name="bindings" slot="1"/>
        </withParam>
        <withParam name="Q{}submissions" as="map(xs:string, xs:string)">
         <varRef line="1441" name="submissions" slot="2"/>
        </withParam>
        <withParam name="Q{}nodeset" as="xs:string">
         <varRef line="1442" name="nodeset" slot="3"/>
        </withParam>
       </applyT>
      </sequence>
     </copy>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <overridden/>
 <key name="Q{http://saxon.sf.net/}kk101" line="0" binds="" flags="u">
  <p.nodeSet type="element()">
   <axis ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="471" name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
  </p.nodeSet>
  <attVal ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="471" name="Q{}data-ref" chk="0"/>
 </key>
 <key name="Q{http://saxon.sf.net/}kk102" line="0" binds="" flags="u">
  <p.nodeSet type="element()">
   <axis ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1659" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
  </p.nodeSet>
  <data ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1659">
   <axis name="child" nodeTest="element(Q{}data-action)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='data-action';"/>
  </data>
 </key>
 <key name="Q{http://saxon.sf.net/}kk103" line="0" binds="" flags="u">
  <p.nodeSet type="element(Q{}div)">
   <axis ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1762" name="descendant" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
  </p.nodeSet>
  <attVal ns="xforms=http://www.w3.org/2002/xforms in=http://www.w3.org/2002/xforms-instance fn=~ js=~ saxon=~ xf=http://www.w3.org/2002/xforms xhtml=http://www.w3.org/1999/xhtml xsl=~ ev=http://www.w3.org/2001/xml-events rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# array=http://www.w3.org/2005/xpath-functions/array ixsl=~ xs=~ math=http://www.w3.org/2005/xpath-functions/math map=http://www.w3.org/2005/xpath-functions/map" line="1762" name="Q{}data-repeatable-context" chk="0"/>
 </key>
 <output>
  <property name="indent" value="no"/>
  <property name="doctype-system" value="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"/>
  <property name="encoding" value="utf-8"/>
  <property name="doctype-public" value="-//W3C//DTD XHTML 1.0 Transitional//EN"/>
  <property name="omit-xml-declaration" value="no"/>
  <property name="{http://saxon.sf.net/}stylesheet-version" value="30"/>
  <property name="method" value="html"/>
 </output>
 <decimalFormat/>
</package>
<?Σ 8e12760b?>
